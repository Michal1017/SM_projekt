
SM_projekt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009594  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000042c  08009768  08009768  00019768  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009b94  08009b94  000201f8  2**0
                  CONTENTS
  4 .ARM          00000008  08009b94  08009b94  00019b94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009b9c  08009b9c  000201f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009b9c  08009b9c  00019b9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009ba0  08009ba0  00019ba0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f8  20000000  08009ba4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000260  200001f8  08009d9c  000201f8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000458  08009d9c  00020458  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201f8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015bf3  00000000  00000000  00020228  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002734  00000000  00000000  00035e1b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001090  00000000  00000000  00038550  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f98  00000000  00000000  000395e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027f48  00000000  00000000  0003a578  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014859  00000000  00000000  000624c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f5ab2  00000000  00000000  00076d19  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0016c7cb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005844  00000000  00000000  0016c820  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001f8 	.word	0x200001f8
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800974c 	.word	0x0800974c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001fc 	.word	0x200001fc
 800020c:	0800974c 	.word	0x0800974c

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_ldivmod>:
 8000c88:	b97b      	cbnz	r3, 8000caa <__aeabi_ldivmod+0x22>
 8000c8a:	b972      	cbnz	r2, 8000caa <__aeabi_ldivmod+0x22>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bfbe      	ittt	lt
 8000c90:	2000      	movlt	r0, #0
 8000c92:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000c96:	e006      	blt.n	8000ca6 <__aeabi_ldivmod+0x1e>
 8000c98:	bf08      	it	eq
 8000c9a:	2800      	cmpeq	r0, #0
 8000c9c:	bf1c      	itt	ne
 8000c9e:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000ca2:	f04f 30ff 	movne.w	r0, #4294967295
 8000ca6:	f000 b9b9 	b.w	800101c <__aeabi_idiv0>
 8000caa:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cae:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb2:	2900      	cmp	r1, #0
 8000cb4:	db09      	blt.n	8000cca <__aeabi_ldivmod+0x42>
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	db1a      	blt.n	8000cf0 <__aeabi_ldivmod+0x68>
 8000cba:	f000 f84d 	bl	8000d58 <__udivmoddi4>
 8000cbe:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc6:	b004      	add	sp, #16
 8000cc8:	4770      	bx	lr
 8000cca:	4240      	negs	r0, r0
 8000ccc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	db1b      	blt.n	8000d0c <__aeabi_ldivmod+0x84>
 8000cd4:	f000 f840 	bl	8000d58 <__udivmoddi4>
 8000cd8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cdc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce0:	b004      	add	sp, #16
 8000ce2:	4240      	negs	r0, r0
 8000ce4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce8:	4252      	negs	r2, r2
 8000cea:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cee:	4770      	bx	lr
 8000cf0:	4252      	negs	r2, r2
 8000cf2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cf6:	f000 f82f 	bl	8000d58 <__udivmoddi4>
 8000cfa:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cfe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d02:	b004      	add	sp, #16
 8000d04:	4240      	negs	r0, r0
 8000d06:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d0a:	4770      	bx	lr
 8000d0c:	4252      	negs	r2, r2
 8000d0e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d12:	f000 f821 	bl	8000d58 <__udivmoddi4>
 8000d16:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d1a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d1e:	b004      	add	sp, #16
 8000d20:	4252      	negs	r2, r2
 8000d22:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d26:	4770      	bx	lr

08000d28 <__aeabi_uldivmod>:
 8000d28:	b953      	cbnz	r3, 8000d40 <__aeabi_uldivmod+0x18>
 8000d2a:	b94a      	cbnz	r2, 8000d40 <__aeabi_uldivmod+0x18>
 8000d2c:	2900      	cmp	r1, #0
 8000d2e:	bf08      	it	eq
 8000d30:	2800      	cmpeq	r0, #0
 8000d32:	bf1c      	itt	ne
 8000d34:	f04f 31ff 	movne.w	r1, #4294967295
 8000d38:	f04f 30ff 	movne.w	r0, #4294967295
 8000d3c:	f000 b96e 	b.w	800101c <__aeabi_idiv0>
 8000d40:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d44:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d48:	f000 f806 	bl	8000d58 <__udivmoddi4>
 8000d4c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d50:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d54:	b004      	add	sp, #16
 8000d56:	4770      	bx	lr

08000d58 <__udivmoddi4>:
 8000d58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d5c:	9d08      	ldr	r5, [sp, #32]
 8000d5e:	4604      	mov	r4, r0
 8000d60:	468c      	mov	ip, r1
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	f040 8083 	bne.w	8000e6e <__udivmoddi4+0x116>
 8000d68:	428a      	cmp	r2, r1
 8000d6a:	4617      	mov	r7, r2
 8000d6c:	d947      	bls.n	8000dfe <__udivmoddi4+0xa6>
 8000d6e:	fab2 f282 	clz	r2, r2
 8000d72:	b142      	cbz	r2, 8000d86 <__udivmoddi4+0x2e>
 8000d74:	f1c2 0020 	rsb	r0, r2, #32
 8000d78:	fa24 f000 	lsr.w	r0, r4, r0
 8000d7c:	4091      	lsls	r1, r2
 8000d7e:	4097      	lsls	r7, r2
 8000d80:	ea40 0c01 	orr.w	ip, r0, r1
 8000d84:	4094      	lsls	r4, r2
 8000d86:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d8a:	0c23      	lsrs	r3, r4, #16
 8000d8c:	fbbc f6f8 	udiv	r6, ip, r8
 8000d90:	fa1f fe87 	uxth.w	lr, r7
 8000d94:	fb08 c116 	mls	r1, r8, r6, ip
 8000d98:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d9c:	fb06 f10e 	mul.w	r1, r6, lr
 8000da0:	4299      	cmp	r1, r3
 8000da2:	d909      	bls.n	8000db8 <__udivmoddi4+0x60>
 8000da4:	18fb      	adds	r3, r7, r3
 8000da6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000daa:	f080 8119 	bcs.w	8000fe0 <__udivmoddi4+0x288>
 8000dae:	4299      	cmp	r1, r3
 8000db0:	f240 8116 	bls.w	8000fe0 <__udivmoddi4+0x288>
 8000db4:	3e02      	subs	r6, #2
 8000db6:	443b      	add	r3, r7
 8000db8:	1a5b      	subs	r3, r3, r1
 8000dba:	b2a4      	uxth	r4, r4
 8000dbc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dc0:	fb08 3310 	mls	r3, r8, r0, r3
 8000dc4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000dc8:	fb00 fe0e 	mul.w	lr, r0, lr
 8000dcc:	45a6      	cmp	lr, r4
 8000dce:	d909      	bls.n	8000de4 <__udivmoddi4+0x8c>
 8000dd0:	193c      	adds	r4, r7, r4
 8000dd2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dd6:	f080 8105 	bcs.w	8000fe4 <__udivmoddi4+0x28c>
 8000dda:	45a6      	cmp	lr, r4
 8000ddc:	f240 8102 	bls.w	8000fe4 <__udivmoddi4+0x28c>
 8000de0:	3802      	subs	r0, #2
 8000de2:	443c      	add	r4, r7
 8000de4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000de8:	eba4 040e 	sub.w	r4, r4, lr
 8000dec:	2600      	movs	r6, #0
 8000dee:	b11d      	cbz	r5, 8000df8 <__udivmoddi4+0xa0>
 8000df0:	40d4      	lsrs	r4, r2
 8000df2:	2300      	movs	r3, #0
 8000df4:	e9c5 4300 	strd	r4, r3, [r5]
 8000df8:	4631      	mov	r1, r6
 8000dfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dfe:	b902      	cbnz	r2, 8000e02 <__udivmoddi4+0xaa>
 8000e00:	deff      	udf	#255	; 0xff
 8000e02:	fab2 f282 	clz	r2, r2
 8000e06:	2a00      	cmp	r2, #0
 8000e08:	d150      	bne.n	8000eac <__udivmoddi4+0x154>
 8000e0a:	1bcb      	subs	r3, r1, r7
 8000e0c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e10:	fa1f f887 	uxth.w	r8, r7
 8000e14:	2601      	movs	r6, #1
 8000e16:	fbb3 fcfe 	udiv	ip, r3, lr
 8000e1a:	0c21      	lsrs	r1, r4, #16
 8000e1c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000e20:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e24:	fb08 f30c 	mul.w	r3, r8, ip
 8000e28:	428b      	cmp	r3, r1
 8000e2a:	d907      	bls.n	8000e3c <__udivmoddi4+0xe4>
 8000e2c:	1879      	adds	r1, r7, r1
 8000e2e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e32:	d202      	bcs.n	8000e3a <__udivmoddi4+0xe2>
 8000e34:	428b      	cmp	r3, r1
 8000e36:	f200 80e9 	bhi.w	800100c <__udivmoddi4+0x2b4>
 8000e3a:	4684      	mov	ip, r0
 8000e3c:	1ac9      	subs	r1, r1, r3
 8000e3e:	b2a3      	uxth	r3, r4
 8000e40:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e44:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e48:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000e4c:	fb08 f800 	mul.w	r8, r8, r0
 8000e50:	45a0      	cmp	r8, r4
 8000e52:	d907      	bls.n	8000e64 <__udivmoddi4+0x10c>
 8000e54:	193c      	adds	r4, r7, r4
 8000e56:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e5a:	d202      	bcs.n	8000e62 <__udivmoddi4+0x10a>
 8000e5c:	45a0      	cmp	r8, r4
 8000e5e:	f200 80d9 	bhi.w	8001014 <__udivmoddi4+0x2bc>
 8000e62:	4618      	mov	r0, r3
 8000e64:	eba4 0408 	sub.w	r4, r4, r8
 8000e68:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e6c:	e7bf      	b.n	8000dee <__udivmoddi4+0x96>
 8000e6e:	428b      	cmp	r3, r1
 8000e70:	d909      	bls.n	8000e86 <__udivmoddi4+0x12e>
 8000e72:	2d00      	cmp	r5, #0
 8000e74:	f000 80b1 	beq.w	8000fda <__udivmoddi4+0x282>
 8000e78:	2600      	movs	r6, #0
 8000e7a:	e9c5 0100 	strd	r0, r1, [r5]
 8000e7e:	4630      	mov	r0, r6
 8000e80:	4631      	mov	r1, r6
 8000e82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e86:	fab3 f683 	clz	r6, r3
 8000e8a:	2e00      	cmp	r6, #0
 8000e8c:	d14a      	bne.n	8000f24 <__udivmoddi4+0x1cc>
 8000e8e:	428b      	cmp	r3, r1
 8000e90:	d302      	bcc.n	8000e98 <__udivmoddi4+0x140>
 8000e92:	4282      	cmp	r2, r0
 8000e94:	f200 80b8 	bhi.w	8001008 <__udivmoddi4+0x2b0>
 8000e98:	1a84      	subs	r4, r0, r2
 8000e9a:	eb61 0103 	sbc.w	r1, r1, r3
 8000e9e:	2001      	movs	r0, #1
 8000ea0:	468c      	mov	ip, r1
 8000ea2:	2d00      	cmp	r5, #0
 8000ea4:	d0a8      	beq.n	8000df8 <__udivmoddi4+0xa0>
 8000ea6:	e9c5 4c00 	strd	r4, ip, [r5]
 8000eaa:	e7a5      	b.n	8000df8 <__udivmoddi4+0xa0>
 8000eac:	f1c2 0320 	rsb	r3, r2, #32
 8000eb0:	fa20 f603 	lsr.w	r6, r0, r3
 8000eb4:	4097      	lsls	r7, r2
 8000eb6:	fa01 f002 	lsl.w	r0, r1, r2
 8000eba:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ebe:	40d9      	lsrs	r1, r3
 8000ec0:	4330      	orrs	r0, r6
 8000ec2:	0c03      	lsrs	r3, r0, #16
 8000ec4:	fbb1 f6fe 	udiv	r6, r1, lr
 8000ec8:	fa1f f887 	uxth.w	r8, r7
 8000ecc:	fb0e 1116 	mls	r1, lr, r6, r1
 8000ed0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ed4:	fb06 f108 	mul.w	r1, r6, r8
 8000ed8:	4299      	cmp	r1, r3
 8000eda:	fa04 f402 	lsl.w	r4, r4, r2
 8000ede:	d909      	bls.n	8000ef4 <__udivmoddi4+0x19c>
 8000ee0:	18fb      	adds	r3, r7, r3
 8000ee2:	f106 3cff 	add.w	ip, r6, #4294967295
 8000ee6:	f080 808d 	bcs.w	8001004 <__udivmoddi4+0x2ac>
 8000eea:	4299      	cmp	r1, r3
 8000eec:	f240 808a 	bls.w	8001004 <__udivmoddi4+0x2ac>
 8000ef0:	3e02      	subs	r6, #2
 8000ef2:	443b      	add	r3, r7
 8000ef4:	1a5b      	subs	r3, r3, r1
 8000ef6:	b281      	uxth	r1, r0
 8000ef8:	fbb3 f0fe 	udiv	r0, r3, lr
 8000efc:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f00:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f04:	fb00 f308 	mul.w	r3, r0, r8
 8000f08:	428b      	cmp	r3, r1
 8000f0a:	d907      	bls.n	8000f1c <__udivmoddi4+0x1c4>
 8000f0c:	1879      	adds	r1, r7, r1
 8000f0e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f12:	d273      	bcs.n	8000ffc <__udivmoddi4+0x2a4>
 8000f14:	428b      	cmp	r3, r1
 8000f16:	d971      	bls.n	8000ffc <__udivmoddi4+0x2a4>
 8000f18:	3802      	subs	r0, #2
 8000f1a:	4439      	add	r1, r7
 8000f1c:	1acb      	subs	r3, r1, r3
 8000f1e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000f22:	e778      	b.n	8000e16 <__udivmoddi4+0xbe>
 8000f24:	f1c6 0c20 	rsb	ip, r6, #32
 8000f28:	fa03 f406 	lsl.w	r4, r3, r6
 8000f2c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000f30:	431c      	orrs	r4, r3
 8000f32:	fa20 f70c 	lsr.w	r7, r0, ip
 8000f36:	fa01 f306 	lsl.w	r3, r1, r6
 8000f3a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000f3e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000f42:	431f      	orrs	r7, r3
 8000f44:	0c3b      	lsrs	r3, r7, #16
 8000f46:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f4a:	fa1f f884 	uxth.w	r8, r4
 8000f4e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f52:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f56:	fb09 fa08 	mul.w	sl, r9, r8
 8000f5a:	458a      	cmp	sl, r1
 8000f5c:	fa02 f206 	lsl.w	r2, r2, r6
 8000f60:	fa00 f306 	lsl.w	r3, r0, r6
 8000f64:	d908      	bls.n	8000f78 <__udivmoddi4+0x220>
 8000f66:	1861      	adds	r1, r4, r1
 8000f68:	f109 30ff 	add.w	r0, r9, #4294967295
 8000f6c:	d248      	bcs.n	8001000 <__udivmoddi4+0x2a8>
 8000f6e:	458a      	cmp	sl, r1
 8000f70:	d946      	bls.n	8001000 <__udivmoddi4+0x2a8>
 8000f72:	f1a9 0902 	sub.w	r9, r9, #2
 8000f76:	4421      	add	r1, r4
 8000f78:	eba1 010a 	sub.w	r1, r1, sl
 8000f7c:	b2bf      	uxth	r7, r7
 8000f7e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f82:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f86:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000f8a:	fb00 f808 	mul.w	r8, r0, r8
 8000f8e:	45b8      	cmp	r8, r7
 8000f90:	d907      	bls.n	8000fa2 <__udivmoddi4+0x24a>
 8000f92:	19e7      	adds	r7, r4, r7
 8000f94:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f98:	d22e      	bcs.n	8000ff8 <__udivmoddi4+0x2a0>
 8000f9a:	45b8      	cmp	r8, r7
 8000f9c:	d92c      	bls.n	8000ff8 <__udivmoddi4+0x2a0>
 8000f9e:	3802      	subs	r0, #2
 8000fa0:	4427      	add	r7, r4
 8000fa2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000fa6:	eba7 0708 	sub.w	r7, r7, r8
 8000faa:	fba0 8902 	umull	r8, r9, r0, r2
 8000fae:	454f      	cmp	r7, r9
 8000fb0:	46c6      	mov	lr, r8
 8000fb2:	4649      	mov	r1, r9
 8000fb4:	d31a      	bcc.n	8000fec <__udivmoddi4+0x294>
 8000fb6:	d017      	beq.n	8000fe8 <__udivmoddi4+0x290>
 8000fb8:	b15d      	cbz	r5, 8000fd2 <__udivmoddi4+0x27a>
 8000fba:	ebb3 020e 	subs.w	r2, r3, lr
 8000fbe:	eb67 0701 	sbc.w	r7, r7, r1
 8000fc2:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000fc6:	40f2      	lsrs	r2, r6
 8000fc8:	ea4c 0202 	orr.w	r2, ip, r2
 8000fcc:	40f7      	lsrs	r7, r6
 8000fce:	e9c5 2700 	strd	r2, r7, [r5]
 8000fd2:	2600      	movs	r6, #0
 8000fd4:	4631      	mov	r1, r6
 8000fd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fda:	462e      	mov	r6, r5
 8000fdc:	4628      	mov	r0, r5
 8000fde:	e70b      	b.n	8000df8 <__udivmoddi4+0xa0>
 8000fe0:	4606      	mov	r6, r0
 8000fe2:	e6e9      	b.n	8000db8 <__udivmoddi4+0x60>
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	e6fd      	b.n	8000de4 <__udivmoddi4+0x8c>
 8000fe8:	4543      	cmp	r3, r8
 8000fea:	d2e5      	bcs.n	8000fb8 <__udivmoddi4+0x260>
 8000fec:	ebb8 0e02 	subs.w	lr, r8, r2
 8000ff0:	eb69 0104 	sbc.w	r1, r9, r4
 8000ff4:	3801      	subs	r0, #1
 8000ff6:	e7df      	b.n	8000fb8 <__udivmoddi4+0x260>
 8000ff8:	4608      	mov	r0, r1
 8000ffa:	e7d2      	b.n	8000fa2 <__udivmoddi4+0x24a>
 8000ffc:	4660      	mov	r0, ip
 8000ffe:	e78d      	b.n	8000f1c <__udivmoddi4+0x1c4>
 8001000:	4681      	mov	r9, r0
 8001002:	e7b9      	b.n	8000f78 <__udivmoddi4+0x220>
 8001004:	4666      	mov	r6, ip
 8001006:	e775      	b.n	8000ef4 <__udivmoddi4+0x19c>
 8001008:	4630      	mov	r0, r6
 800100a:	e74a      	b.n	8000ea2 <__udivmoddi4+0x14a>
 800100c:	f1ac 0c02 	sub.w	ip, ip, #2
 8001010:	4439      	add	r1, r7
 8001012:	e713      	b.n	8000e3c <__udivmoddi4+0xe4>
 8001014:	3802      	subs	r0, #2
 8001016:	443c      	add	r4, r7
 8001018:	e724      	b.n	8000e64 <__udivmoddi4+0x10c>
 800101a:	bf00      	nop

0800101c <__aeabi_idiv0>:
 800101c:	4770      	bx	lr
 800101e:	bf00      	nop

08001020 <BMP280_Read8>:
  return tmp;
}
#endif
#ifdef BMP280
uint8_t BMP280_Read8(uint8_t addr)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b088      	sub	sp, #32
 8001024:	af04      	add	r7, sp, #16
 8001026:	4603      	mov	r3, r0
 8001028:	71fb      	strb	r3, [r7, #7]
#if(BMP_I2C == 1)
	uint8_t tmp = 0;
 800102a:	2300      	movs	r3, #0
 800102c:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Mem_Read(i2c_h, BMP280_I2CADDR, addr, 1, &tmp, 1, 10);
 800102e:	4b0a      	ldr	r3, [pc, #40]	; (8001058 <BMP280_Read8+0x38>)
 8001030:	6818      	ldr	r0, [r3, #0]
 8001032:	79fb      	ldrb	r3, [r7, #7]
 8001034:	b29a      	uxth	r2, r3
 8001036:	230a      	movs	r3, #10
 8001038:	9302      	str	r3, [sp, #8]
 800103a:	2301      	movs	r3, #1
 800103c:	9301      	str	r3, [sp, #4]
 800103e:	f107 030f 	add.w	r3, r7, #15
 8001042:	9300      	str	r3, [sp, #0]
 8001044:	2301      	movs	r3, #1
 8001046:	21ec      	movs	r1, #236	; 0xec
 8001048:	f002 f9de 	bl	8003408 <HAL_I2C_Mem_Read>
  return tmp;
 800104c:	7bfb      	ldrb	r3, [r7, #15]
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_RESET);
	HAL_SPI_TransmitReceive(spi_h, tmp, tmp, 2, 10);
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_SET);
	return tmp[1];
#endif
}
 800104e:	4618      	mov	r0, r3
 8001050:	3710      	adds	r7, #16
 8001052:	46bd      	mov	sp, r7
 8001054:	bd80      	pop	{r7, pc}
 8001056:	bf00      	nop
 8001058:	20000240 	.word	0x20000240

0800105c <BMP280_Read16>:
	return ((tmp[0] << 8) | tmp[1]);
}
#endif
#ifdef BMP280
uint16_t BMP280_Read16(uint8_t addr)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b088      	sub	sp, #32
 8001060:	af04      	add	r7, sp, #16
 8001062:	4603      	mov	r3, r0
 8001064:	71fb      	strb	r3, [r7, #7]
#if(BMP_I2C == 1)
	uint8_t tmp[2];
	HAL_I2C_Mem_Read(i2c_h, BMP280_I2CADDR, addr, 1, tmp, 2, 10);
 8001066:	4b0d      	ldr	r3, [pc, #52]	; (800109c <BMP280_Read16+0x40>)
 8001068:	6818      	ldr	r0, [r3, #0]
 800106a:	79fb      	ldrb	r3, [r7, #7]
 800106c:	b29a      	uxth	r2, r3
 800106e:	230a      	movs	r3, #10
 8001070:	9302      	str	r3, [sp, #8]
 8001072:	2302      	movs	r3, #2
 8001074:	9301      	str	r3, [sp, #4]
 8001076:	f107 030c 	add.w	r3, r7, #12
 800107a:	9300      	str	r3, [sp, #0]
 800107c:	2301      	movs	r3, #1
 800107e:	21ec      	movs	r1, #236	; 0xec
 8001080:	f002 f9c2 	bl	8003408 <HAL_I2C_Mem_Read>
	return ((tmp[0] << 8) | tmp[1]);
 8001084:	7b3b      	ldrb	r3, [r7, #12]
 8001086:	021b      	lsls	r3, r3, #8
 8001088:	b21a      	sxth	r2, r3
 800108a:	7b7b      	ldrb	r3, [r7, #13]
 800108c:	b21b      	sxth	r3, r3
 800108e:	4313      	orrs	r3, r2
 8001090:	b21b      	sxth	r3, r3
 8001092:	b29b      	uxth	r3, r3
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_RESET);
	HAL_SPI_TransmitReceive(spi_h, tmp, tmp, 3, 10);
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_SET);
	return ((tmp[1] << 8) | tmp[2]);
#endif
}
 8001094:	4618      	mov	r0, r3
 8001096:	3710      	adds	r7, #16
 8001098:	46bd      	mov	sp, r7
 800109a:	bd80      	pop	{r7, pc}
 800109c:	20000240 	.word	0x20000240

080010a0 <BMP280_Read16LE>:

uint16_t BMP280_Read16LE(uint8_t addr)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b084      	sub	sp, #16
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	4603      	mov	r3, r0
 80010a8:	71fb      	strb	r3, [r7, #7]
	uint16_t tmp;

	tmp = BMP280_Read16(addr);
 80010aa:	79fb      	ldrb	r3, [r7, #7]
 80010ac:	4618      	mov	r0, r3
 80010ae:	f7ff ffd5 	bl	800105c <BMP280_Read16>
 80010b2:	4603      	mov	r3, r0
 80010b4:	81fb      	strh	r3, [r7, #14]
	return (tmp >> 8) | (tmp << 8);
 80010b6:	89fb      	ldrh	r3, [r7, #14]
 80010b8:	0a1b      	lsrs	r3, r3, #8
 80010ba:	b29b      	uxth	r3, r3
 80010bc:	b21a      	sxth	r2, r3
 80010be:	89fb      	ldrh	r3, [r7, #14]
 80010c0:	021b      	lsls	r3, r3, #8
 80010c2:	b21b      	sxth	r3, r3
 80010c4:	4313      	orrs	r3, r2
 80010c6:	b21b      	sxth	r3, r3
 80010c8:	b29b      	uxth	r3, r3
}
 80010ca:	4618      	mov	r0, r3
 80010cc:	3710      	adds	r7, #16
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bd80      	pop	{r7, pc}
	...

080010d4 <BMP280_Write8>:
	HAL_I2C_Mem_Write(i2c_h, BMP180_I2CADDR, address, 1, &data, 1, 10);
}
#endif
#ifdef BMP280
void BMP280_Write8(uint8_t address, uint8_t data)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b086      	sub	sp, #24
 80010d8:	af04      	add	r7, sp, #16
 80010da:	4603      	mov	r3, r0
 80010dc:	460a      	mov	r2, r1
 80010de:	71fb      	strb	r3, [r7, #7]
 80010e0:	4613      	mov	r3, r2
 80010e2:	71bb      	strb	r3, [r7, #6]
#if(BMP_I2C == 1)
	HAL_I2C_Mem_Write(i2c_h, BMP280_I2CADDR, address, 1, &data, 1, 10);
 80010e4:	4b08      	ldr	r3, [pc, #32]	; (8001108 <BMP280_Write8+0x34>)
 80010e6:	6818      	ldr	r0, [r3, #0]
 80010e8:	79fb      	ldrb	r3, [r7, #7]
 80010ea:	b29a      	uxth	r2, r3
 80010ec:	230a      	movs	r3, #10
 80010ee:	9302      	str	r3, [sp, #8]
 80010f0:	2301      	movs	r3, #1
 80010f2:	9301      	str	r3, [sp, #4]
 80010f4:	1dbb      	adds	r3, r7, #6
 80010f6:	9300      	str	r3, [sp, #0]
 80010f8:	2301      	movs	r3, #1
 80010fa:	21ec      	movs	r1, #236	; 0xec
 80010fc:	f002 f870 	bl	80031e0 <HAL_I2C_Mem_Write>
	tmp[1] = data;
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_RESET);
	HAL_SPI_TransmitReceive(spi_h, tmp, tmp, 2, 10);
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_SET);
#endif
}
 8001100:	bf00      	nop
 8001102:	3708      	adds	r7, #8
 8001104:	46bd      	mov	sp, r7
 8001106:	bd80      	pop	{r7, pc}
 8001108:	20000240 	.word	0x20000240

0800110c <BMP280_Read24>:

uint32_t BMP280_Read24(uint8_t addr)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b088      	sub	sp, #32
 8001110:	af04      	add	r7, sp, #16
 8001112:	4603      	mov	r3, r0
 8001114:	71fb      	strb	r3, [r7, #7]
#if(BMP_I2C == 1)
	uint8_t tmp[3];
	HAL_I2C_Mem_Read(i2c_h, BMP280_I2CADDR, addr, 1, tmp, 3, 10);
 8001116:	4b0d      	ldr	r3, [pc, #52]	; (800114c <BMP280_Read24+0x40>)
 8001118:	6818      	ldr	r0, [r3, #0]
 800111a:	79fb      	ldrb	r3, [r7, #7]
 800111c:	b29a      	uxth	r2, r3
 800111e:	230a      	movs	r3, #10
 8001120:	9302      	str	r3, [sp, #8]
 8001122:	2303      	movs	r3, #3
 8001124:	9301      	str	r3, [sp, #4]
 8001126:	f107 030c 	add.w	r3, r7, #12
 800112a:	9300      	str	r3, [sp, #0]
 800112c:	2301      	movs	r3, #1
 800112e:	21ec      	movs	r1, #236	; 0xec
 8001130:	f002 f96a 	bl	8003408 <HAL_I2C_Mem_Read>
	return ((tmp[0] << 16) | tmp[1] << 8 | tmp[2]);
 8001134:	7b3b      	ldrb	r3, [r7, #12]
 8001136:	041a      	lsls	r2, r3, #16
 8001138:	7b7b      	ldrb	r3, [r7, #13]
 800113a:	021b      	lsls	r3, r3, #8
 800113c:	4313      	orrs	r3, r2
 800113e:	7bba      	ldrb	r2, [r7, #14]
 8001140:	4313      	orrs	r3, r2
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_RESET);
	HAL_SPI_TransmitReceive(spi_h, tmp, tmp, 3, 10);
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_SET);
	return ((tmp[1] << 16) | tmp[2] << 8 | tmp[3]);
#endif
}
 8001142:	4618      	mov	r0, r3
 8001144:	3710      	adds	r7, #16
 8001146:	46bd      	mov	sp, r7
 8001148:	bd80      	pop	{r7, pc}
 800114a:	bf00      	nop
 800114c:	20000240 	.word	0x20000240

08001150 <BMP280_Init>:
{
	BMP280_Write8(BMP280_CONFIG, (((standby_time & 0x7) << 5) | ((filter & 0x7) << 2)) & 0xFC);
}
#if(BMP_I2C == 1)
void BMP280_Init(I2C_HandleTypeDef *i2c_handler, uint8_t temperature_resolution, uint8_t pressure_oversampling, uint8_t mode)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b082      	sub	sp, #8
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
 8001158:	4608      	mov	r0, r1
 800115a:	4611      	mov	r1, r2
 800115c:	461a      	mov	r2, r3
 800115e:	4603      	mov	r3, r0
 8001160:	70fb      	strb	r3, [r7, #3]
 8001162:	460b      	mov	r3, r1
 8001164:	70bb      	strb	r3, [r7, #2]
 8001166:	4613      	mov	r3, r2
 8001168:	707b      	strb	r3, [r7, #1]
	i2c_h = i2c_handler;
 800116a:	4a48      	ldr	r2, [pc, #288]	; (800128c <BMP280_Init+0x13c>)
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	6013      	str	r3, [r2, #0]
	spi_h = spi_handler;
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_RESET);
	HAL_Delay(5);
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_SET);
#endif
	if (mode > BMP280_NORMALMODE)
 8001170:	787b      	ldrb	r3, [r7, #1]
 8001172:	2b03      	cmp	r3, #3
 8001174:	d901      	bls.n	800117a <BMP280_Init+0x2a>
	    mode = BMP280_NORMALMODE;
 8001176:	2303      	movs	r3, #3
 8001178:	707b      	strb	r3, [r7, #1]
	_mode = mode;
 800117a:	4a45      	ldr	r2, [pc, #276]	; (8001290 <BMP280_Init+0x140>)
 800117c:	787b      	ldrb	r3, [r7, #1]
 800117e:	7013      	strb	r3, [r2, #0]
	if(mode == BMP280_FORCEDMODE)
 8001180:	787b      	ldrb	r3, [r7, #1]
 8001182:	2b01      	cmp	r3, #1
 8001184:	d101      	bne.n	800118a <BMP280_Init+0x3a>
		mode = BMP280_SLEEPMODE;
 8001186:	2300      	movs	r3, #0
 8001188:	707b      	strb	r3, [r7, #1]



	if (temperature_resolution > BMP280_TEMPERATURE_20BIT)
 800118a:	78fb      	ldrb	r3, [r7, #3]
 800118c:	2b05      	cmp	r3, #5
 800118e:	d901      	bls.n	8001194 <BMP280_Init+0x44>
		temperature_resolution = BMP280_TEMPERATURE_20BIT;
 8001190:	2305      	movs	r3, #5
 8001192:	70fb      	strb	r3, [r7, #3]
	_temperature_res = temperature_resolution;
 8001194:	4a3f      	ldr	r2, [pc, #252]	; (8001294 <BMP280_Init+0x144>)
 8001196:	78fb      	ldrb	r3, [r7, #3]
 8001198:	7013      	strb	r3, [r2, #0]

	if (pressure_oversampling > BMP280_ULTRAHIGHRES)
 800119a:	78bb      	ldrb	r3, [r7, #2]
 800119c:	2b05      	cmp	r3, #5
 800119e:	d901      	bls.n	80011a4 <BMP280_Init+0x54>
		pressure_oversampling = BMP280_ULTRAHIGHRES;
 80011a0:	2305      	movs	r3, #5
 80011a2:	70bb      	strb	r3, [r7, #2]
	_pressure_oversampling = pressure_oversampling;
 80011a4:	4a3c      	ldr	r2, [pc, #240]	; (8001298 <BMP280_Init+0x148>)
 80011a6:	78bb      	ldrb	r3, [r7, #2]
 80011a8:	7013      	strb	r3, [r2, #0]

	while(BMP280_Read8(BMP280_CHIPID) != 0x58);
 80011aa:	bf00      	nop
 80011ac:	20d0      	movs	r0, #208	; 0xd0
 80011ae:	f7ff ff37 	bl	8001020 <BMP280_Read8>
 80011b2:	4603      	mov	r3, r0
 80011b4:	2b58      	cmp	r3, #88	; 0x58
 80011b6:	d1f9      	bne.n	80011ac <BMP280_Init+0x5c>

	/* read calibration data */
	t1 = BMP280_Read16LE(BMP280_DIG_T1);
 80011b8:	2088      	movs	r0, #136	; 0x88
 80011ba:	f7ff ff71 	bl	80010a0 <BMP280_Read16LE>
 80011be:	4603      	mov	r3, r0
 80011c0:	461a      	mov	r2, r3
 80011c2:	4b36      	ldr	r3, [pc, #216]	; (800129c <BMP280_Init+0x14c>)
 80011c4:	801a      	strh	r2, [r3, #0]
	t2 = BMP280_Read16LE(BMP280_DIG_T2);
 80011c6:	208a      	movs	r0, #138	; 0x8a
 80011c8:	f7ff ff6a 	bl	80010a0 <BMP280_Read16LE>
 80011cc:	4603      	mov	r3, r0
 80011ce:	b21a      	sxth	r2, r3
 80011d0:	4b33      	ldr	r3, [pc, #204]	; (80012a0 <BMP280_Init+0x150>)
 80011d2:	801a      	strh	r2, [r3, #0]
	t3 = BMP280_Read16LE(BMP280_DIG_T3);
 80011d4:	208c      	movs	r0, #140	; 0x8c
 80011d6:	f7ff ff63 	bl	80010a0 <BMP280_Read16LE>
 80011da:	4603      	mov	r3, r0
 80011dc:	b21a      	sxth	r2, r3
 80011de:	4b31      	ldr	r3, [pc, #196]	; (80012a4 <BMP280_Init+0x154>)
 80011e0:	801a      	strh	r2, [r3, #0]

	p1 = BMP280_Read16LE(BMP280_DIG_P1);
 80011e2:	208e      	movs	r0, #142	; 0x8e
 80011e4:	f7ff ff5c 	bl	80010a0 <BMP280_Read16LE>
 80011e8:	4603      	mov	r3, r0
 80011ea:	461a      	mov	r2, r3
 80011ec:	4b2e      	ldr	r3, [pc, #184]	; (80012a8 <BMP280_Init+0x158>)
 80011ee:	801a      	strh	r2, [r3, #0]
	p2 = BMP280_Read16LE(BMP280_DIG_P2);
 80011f0:	2090      	movs	r0, #144	; 0x90
 80011f2:	f7ff ff55 	bl	80010a0 <BMP280_Read16LE>
 80011f6:	4603      	mov	r3, r0
 80011f8:	b21a      	sxth	r2, r3
 80011fa:	4b2c      	ldr	r3, [pc, #176]	; (80012ac <BMP280_Init+0x15c>)
 80011fc:	801a      	strh	r2, [r3, #0]
	p3 = BMP280_Read16LE(BMP280_DIG_P3);
 80011fe:	2092      	movs	r0, #146	; 0x92
 8001200:	f7ff ff4e 	bl	80010a0 <BMP280_Read16LE>
 8001204:	4603      	mov	r3, r0
 8001206:	b21a      	sxth	r2, r3
 8001208:	4b29      	ldr	r3, [pc, #164]	; (80012b0 <BMP280_Init+0x160>)
 800120a:	801a      	strh	r2, [r3, #0]
	p4 = BMP280_Read16LE(BMP280_DIG_P4);
 800120c:	2094      	movs	r0, #148	; 0x94
 800120e:	f7ff ff47 	bl	80010a0 <BMP280_Read16LE>
 8001212:	4603      	mov	r3, r0
 8001214:	b21a      	sxth	r2, r3
 8001216:	4b27      	ldr	r3, [pc, #156]	; (80012b4 <BMP280_Init+0x164>)
 8001218:	801a      	strh	r2, [r3, #0]
	p5 = BMP280_Read16LE(BMP280_DIG_P5);
 800121a:	2096      	movs	r0, #150	; 0x96
 800121c:	f7ff ff40 	bl	80010a0 <BMP280_Read16LE>
 8001220:	4603      	mov	r3, r0
 8001222:	b21a      	sxth	r2, r3
 8001224:	4b24      	ldr	r3, [pc, #144]	; (80012b8 <BMP280_Init+0x168>)
 8001226:	801a      	strh	r2, [r3, #0]
	p6 = BMP280_Read16LE(BMP280_DIG_P6);
 8001228:	2098      	movs	r0, #152	; 0x98
 800122a:	f7ff ff39 	bl	80010a0 <BMP280_Read16LE>
 800122e:	4603      	mov	r3, r0
 8001230:	b21a      	sxth	r2, r3
 8001232:	4b22      	ldr	r3, [pc, #136]	; (80012bc <BMP280_Init+0x16c>)
 8001234:	801a      	strh	r2, [r3, #0]
	p7 = BMP280_Read16LE(BMP280_DIG_P7);
 8001236:	209a      	movs	r0, #154	; 0x9a
 8001238:	f7ff ff32 	bl	80010a0 <BMP280_Read16LE>
 800123c:	4603      	mov	r3, r0
 800123e:	b21a      	sxth	r2, r3
 8001240:	4b1f      	ldr	r3, [pc, #124]	; (80012c0 <BMP280_Init+0x170>)
 8001242:	801a      	strh	r2, [r3, #0]
	p8 = BMP280_Read16LE(BMP280_DIG_P8);
 8001244:	209c      	movs	r0, #156	; 0x9c
 8001246:	f7ff ff2b 	bl	80010a0 <BMP280_Read16LE>
 800124a:	4603      	mov	r3, r0
 800124c:	b21a      	sxth	r2, r3
 800124e:	4b1d      	ldr	r3, [pc, #116]	; (80012c4 <BMP280_Init+0x174>)
 8001250:	801a      	strh	r2, [r3, #0]
	p9 = BMP280_Read16LE(BMP280_DIG_P9);
 8001252:	209e      	movs	r0, #158	; 0x9e
 8001254:	f7ff ff24 	bl	80010a0 <BMP280_Read16LE>
 8001258:	4603      	mov	r3, r0
 800125a:	b21a      	sxth	r2, r3
 800125c:	4b1a      	ldr	r3, [pc, #104]	; (80012c8 <BMP280_Init+0x178>)
 800125e:	801a      	strh	r2, [r3, #0]

	BMP280_Write8(BMP280_CONTROL, ((temperature_resolution<<5) | (pressure_oversampling<<2) | mode));
 8001260:	78fb      	ldrb	r3, [r7, #3]
 8001262:	015b      	lsls	r3, r3, #5
 8001264:	b25a      	sxtb	r2, r3
 8001266:	78bb      	ldrb	r3, [r7, #2]
 8001268:	009b      	lsls	r3, r3, #2
 800126a:	b25b      	sxtb	r3, r3
 800126c:	4313      	orrs	r3, r2
 800126e:	b25a      	sxtb	r2, r3
 8001270:	f997 3001 	ldrsb.w	r3, [r7, #1]
 8001274:	4313      	orrs	r3, r2
 8001276:	b25b      	sxtb	r3, r3
 8001278:	b2db      	uxtb	r3, r3
 800127a:	4619      	mov	r1, r3
 800127c:	20f4      	movs	r0, #244	; 0xf4
 800127e:	f7ff ff29 	bl	80010d4 <BMP280_Write8>
}
 8001282:	bf00      	nop
 8001284:	3708      	adds	r7, #8
 8001286:	46bd      	mov	sp, r7
 8001288:	bd80      	pop	{r7, pc}
 800128a:	bf00      	nop
 800128c:	20000240 	.word	0x20000240
 8001290:	20000244 	.word	0x20000244
 8001294:	2000023c 	.word	0x2000023c
 8001298:	2000022e 	.word	0x2000022e
 800129c:	2000023a 	.word	0x2000023a
 80012a0:	20000230 	.word	0x20000230
 80012a4:	20000228 	.word	0x20000228
 80012a8:	20000234 	.word	0x20000234
 80012ac:	2000022a 	.word	0x2000022a
 80012b0:	20000246 	.word	0x20000246
 80012b4:	2000024a 	.word	0x2000024a
 80012b8:	20000232 	.word	0x20000232
 80012bc:	20000238 	.word	0x20000238
 80012c0:	2000022c 	.word	0x2000022c
 80012c4:	20000236 	.word	0x20000236
 80012c8:	20000248 	.word	0x20000248

080012cc <BMP280_ReadTemperature>:
	  return temp;
}
#endif
#ifdef BMP280
float BMP280_ReadTemperature(void)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b086      	sub	sp, #24
 80012d0:	af00      	add	r7, sp, #0
  int32_t var1, var2;

  if(_mode == BMP280_FORCEDMODE)
 80012d2:	4b3d      	ldr	r3, [pc, #244]	; (80013c8 <BMP280_ReadTemperature+0xfc>)
 80012d4:	781b      	ldrb	r3, [r3, #0]
 80012d6:	2b01      	cmp	r3, #1
 80012d8:	d16d      	bne.n	80013b6 <BMP280_ReadTemperature+0xea>
  {
	  uint8_t mode;
	  uint8_t ctrl = BMP280_Read8(BMP280_CONTROL);
 80012da:	20f4      	movs	r0, #244	; 0xf4
 80012dc:	f7ff fea0 	bl	8001020 <BMP280_Read8>
 80012e0:	4603      	mov	r3, r0
 80012e2:	75fb      	strb	r3, [r7, #23]
	  ctrl &= ~(0x03);
 80012e4:	7dfb      	ldrb	r3, [r7, #23]
 80012e6:	f023 0303 	bic.w	r3, r3, #3
 80012ea:	75fb      	strb	r3, [r7, #23]
	  ctrl |= BMP280_FORCEDMODE;
 80012ec:	7dfb      	ldrb	r3, [r7, #23]
 80012ee:	f043 0301 	orr.w	r3, r3, #1
 80012f2:	75fb      	strb	r3, [r7, #23]
	  BMP280_Write8(BMP280_CONTROL, ctrl);
 80012f4:	7dfb      	ldrb	r3, [r7, #23]
 80012f6:	4619      	mov	r1, r3
 80012f8:	20f4      	movs	r0, #244	; 0xf4
 80012fa:	f7ff feeb 	bl	80010d4 <BMP280_Write8>

	  mode = BMP280_Read8(BMP280_CONTROL); 	// Read written mode
 80012fe:	20f4      	movs	r0, #244	; 0xf4
 8001300:	f7ff fe8e 	bl	8001020 <BMP280_Read8>
 8001304:	4603      	mov	r3, r0
 8001306:	75bb      	strb	r3, [r7, #22]
	  mode &= 0x03;							// Do not work without it...
 8001308:	7dbb      	ldrb	r3, [r7, #22]
 800130a:	f003 0303 	and.w	r3, r3, #3
 800130e:	75bb      	strb	r3, [r7, #22]

	  if(mode == BMP280_FORCEDMODE)
 8001310:	7dbb      	ldrb	r3, [r7, #22]
 8001312:	2b01      	cmp	r3, #1
 8001314:	d14f      	bne.n	80013b6 <BMP280_ReadTemperature+0xea>
	  {
		  while(1) // Wait for end of conversion
		  {
			  mode = BMP280_Read8(BMP280_CONTROL);
 8001316:	20f4      	movs	r0, #244	; 0xf4
 8001318:	f7ff fe82 	bl	8001020 <BMP280_Read8>
 800131c:	4603      	mov	r3, r0
 800131e:	75bb      	strb	r3, [r7, #22]
			  mode &= 0x03;
 8001320:	7dbb      	ldrb	r3, [r7, #22]
 8001322:	f003 0303 	and.w	r3, r3, #3
 8001326:	75bb      	strb	r3, [r7, #22]
			  if(mode == BMP280_SLEEPMODE)
 8001328:	7dbb      	ldrb	r3, [r7, #22]
 800132a:	2b00      	cmp	r3, #0
 800132c:	d000      	beq.n	8001330 <BMP280_ReadTemperature+0x64>
			  mode = BMP280_Read8(BMP280_CONTROL);
 800132e:	e7f2      	b.n	8001316 <BMP280_ReadTemperature+0x4a>
				  break;
 8001330:	bf00      	nop
		  }

		  int32_t adc_T = BMP280_Read24(BMP280_TEMPDATA);
 8001332:	20fa      	movs	r0, #250	; 0xfa
 8001334:	f7ff feea 	bl	800110c <BMP280_Read24>
 8001338:	4603      	mov	r3, r0
 800133a:	613b      	str	r3, [r7, #16]
		  adc_T >>= 4;
 800133c:	693b      	ldr	r3, [r7, #16]
 800133e:	111b      	asrs	r3, r3, #4
 8001340:	613b      	str	r3, [r7, #16]

		  var1  = ((((adc_T>>3) - ((int32_t)t1 <<1))) *
 8001342:	693b      	ldr	r3, [r7, #16]
 8001344:	10da      	asrs	r2, r3, #3
 8001346:	4b21      	ldr	r3, [pc, #132]	; (80013cc <BMP280_ReadTemperature+0x100>)
 8001348:	881b      	ldrh	r3, [r3, #0]
 800134a:	005b      	lsls	r3, r3, #1
 800134c:	1ad3      	subs	r3, r2, r3
				  ((int32_t)t2)) >> 11;
 800134e:	4a20      	ldr	r2, [pc, #128]	; (80013d0 <BMP280_ReadTemperature+0x104>)
 8001350:	f9b2 2000 	ldrsh.w	r2, [r2]
		  var1  = ((((adc_T>>3) - ((int32_t)t1 <<1))) *
 8001354:	fb02 f303 	mul.w	r3, r2, r3
 8001358:	12db      	asrs	r3, r3, #11
 800135a:	60fb      	str	r3, [r7, #12]

		  var2  = (((((adc_T>>4) - ((int32_t)t1)) *
 800135c:	693b      	ldr	r3, [r7, #16]
 800135e:	111b      	asrs	r3, r3, #4
 8001360:	4a1a      	ldr	r2, [pc, #104]	; (80013cc <BMP280_ReadTemperature+0x100>)
 8001362:	8812      	ldrh	r2, [r2, #0]
 8001364:	1a9b      	subs	r3, r3, r2
				  ((adc_T>>4) - ((int32_t)t1))) >> 12) *
 8001366:	693a      	ldr	r2, [r7, #16]
 8001368:	1112      	asrs	r2, r2, #4
 800136a:	4918      	ldr	r1, [pc, #96]	; (80013cc <BMP280_ReadTemperature+0x100>)
 800136c:	8809      	ldrh	r1, [r1, #0]
 800136e:	1a52      	subs	r2, r2, r1
		  var2  = (((((adc_T>>4) - ((int32_t)t1)) *
 8001370:	fb02 f303 	mul.w	r3, r2, r3
				  ((adc_T>>4) - ((int32_t)t1))) >> 12) *
 8001374:	131b      	asrs	r3, r3, #12
				  ((int32_t)t3)) >> 14;
 8001376:	4a17      	ldr	r2, [pc, #92]	; (80013d4 <BMP280_ReadTemperature+0x108>)
 8001378:	f9b2 2000 	ldrsh.w	r2, [r2]
				  ((adc_T>>4) - ((int32_t)t1))) >> 12) *
 800137c:	fb02 f303 	mul.w	r3, r2, r3
		  var2  = (((((adc_T>>4) - ((int32_t)t1)) *
 8001380:	139b      	asrs	r3, r3, #14
 8001382:	60bb      	str	r3, [r7, #8]

		  t_fine = var1 + var2;
 8001384:	68fa      	ldr	r2, [r7, #12]
 8001386:	68bb      	ldr	r3, [r7, #8]
 8001388:	4413      	add	r3, r2
 800138a:	4a13      	ldr	r2, [pc, #76]	; (80013d8 <BMP280_ReadTemperature+0x10c>)
 800138c:	6013      	str	r3, [r2, #0]

		  float T  = (t_fine * 5 + 128) >> 8;
 800138e:	4b12      	ldr	r3, [pc, #72]	; (80013d8 <BMP280_ReadTemperature+0x10c>)
 8001390:	681a      	ldr	r2, [r3, #0]
 8001392:	4613      	mov	r3, r2
 8001394:	009b      	lsls	r3, r3, #2
 8001396:	4413      	add	r3, r2
 8001398:	3380      	adds	r3, #128	; 0x80
 800139a:	121b      	asrs	r3, r3, #8
 800139c:	ee07 3a90 	vmov	s15, r3
 80013a0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80013a4:	edc7 7a01 	vstr	s15, [r7, #4]
		  return T/100;
 80013a8:	edd7 7a01 	vldr	s15, [r7, #4]
 80013ac:	eddf 6a0b 	vldr	s13, [pc, #44]	; 80013dc <BMP280_ReadTemperature+0x110>
 80013b0:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80013b4:	e001      	b.n	80013ba <BMP280_ReadTemperature+0xee>
	  }
  }

  return -99;
 80013b6:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 80013e0 <BMP280_ReadTemperature+0x114>
 80013ba:	eef0 7a47 	vmov.f32	s15, s14
}
 80013be:	eeb0 0a67 	vmov.f32	s0, s15
 80013c2:	3718      	adds	r7, #24
 80013c4:	46bd      	mov	sp, r7
 80013c6:	bd80      	pop	{r7, pc}
 80013c8:	20000244 	.word	0x20000244
 80013cc:	2000023a 	.word	0x2000023a
 80013d0:	20000230 	.word	0x20000230
 80013d4:	20000228 	.word	0x20000228
 80013d8:	2000024c 	.word	0x2000024c
 80013dc:	42c80000 	.word	0x42c80000
 80013e0:	c2c60000 	.word	0xc2c60000

080013e4 <BMP280_ReadTemperatureAndPressure>:
}
#endif

#ifdef BMP280
uint8_t BMP280_ReadTemperatureAndPressure(float *temperature, int32_t *pressure)
{
 80013e4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80013e8:	b09c      	sub	sp, #112	; 0x70
 80013ea:	af00      	add	r7, sp, #0
 80013ec:	64f8      	str	r0, [r7, #76]	; 0x4c
 80013ee:	64b9      	str	r1, [r7, #72]	; 0x48
	  int64_t var1, var2, p;

	  // Must be done first to get the t_fine variable set up
	  *temperature = BMP280_ReadTemperature();
 80013f0:	f7ff ff6c 	bl	80012cc <BMP280_ReadTemperature>
 80013f4:	eef0 7a40 	vmov.f32	s15, s0
 80013f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80013fa:	edc3 7a00 	vstr	s15, [r3]

	  if(*temperature == -99)
 80013fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001400:	edd3 7a00 	vldr	s15, [r3]
 8001404:	ed9f 7a73 	vldr	s14, [pc, #460]	; 80015d4 <BMP280_ReadTemperatureAndPressure+0x1f0>
 8001408:	eef4 7a47 	vcmp.f32	s15, s14
 800140c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001410:	d101      	bne.n	8001416 <BMP280_ReadTemperatureAndPressure+0x32>
		  return -1;
 8001412:	23ff      	movs	r3, #255	; 0xff
 8001414:	e1d8      	b.n	80017c8 <BMP280_ReadTemperatureAndPressure+0x3e4>

	  int32_t adc_P = BMP280_Read24(BMP280_PRESSUREDATA);
 8001416:	20f7      	movs	r0, #247	; 0xf7
 8001418:	f7ff fe78 	bl	800110c <BMP280_Read24>
 800141c:	4603      	mov	r3, r0
 800141e:	66fb      	str	r3, [r7, #108]	; 0x6c
	  adc_P >>= 4;
 8001420:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001422:	111b      	asrs	r3, r3, #4
 8001424:	66fb      	str	r3, [r7, #108]	; 0x6c

	  var1 = ((int64_t)t_fine) - 128000;
 8001426:	4b6c      	ldr	r3, [pc, #432]	; (80015d8 <BMP280_ReadTemperatureAndPressure+0x1f4>)
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	461a      	mov	r2, r3
 800142c:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8001430:	f5b2 34fa 	subs.w	r4, r2, #128000	; 0x1f400
 8001434:	f143 35ff 	adc.w	r5, r3, #4294967295
 8001438:	e9c7 4518 	strd	r4, r5, [r7, #96]	; 0x60
	  var2 = var1 * var1 * (int64_t)p6;
 800143c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800143e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001440:	fb03 f102 	mul.w	r1, r3, r2
 8001444:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8001446:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001448:	fb03 f302 	mul.w	r3, r3, r2
 800144c:	18ca      	adds	r2, r1, r3
 800144e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001450:	fba3 4503 	umull	r4, r5, r3, r3
 8001454:	1953      	adds	r3, r2, r5
 8001456:	461d      	mov	r5, r3
 8001458:	4b60      	ldr	r3, [pc, #384]	; (80015dc <BMP280_ReadTemperatureAndPressure+0x1f8>)
 800145a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800145e:	b21a      	sxth	r2, r3
 8001460:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8001464:	fb02 f005 	mul.w	r0, r2, r5
 8001468:	fb04 f103 	mul.w	r1, r4, r3
 800146c:	4401      	add	r1, r0
 800146e:	fba4 2302 	umull	r2, r3, r4, r2
 8001472:	4419      	add	r1, r3
 8001474:	460b      	mov	r3, r1
 8001476:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
 800147a:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
	  var2 = var2 + ((var1*(int64_t)p5)<<17);
 800147e:	4b58      	ldr	r3, [pc, #352]	; (80015e0 <BMP280_ReadTemperatureAndPressure+0x1fc>)
 8001480:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001484:	b21a      	sxth	r2, r3
 8001486:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800148a:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800148c:	fb03 f001 	mul.w	r0, r3, r1
 8001490:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8001492:	fb02 f101 	mul.w	r1, r2, r1
 8001496:	4408      	add	r0, r1
 8001498:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800149a:	fba1 2302 	umull	r2, r3, r1, r2
 800149e:	18c1      	adds	r1, r0, r3
 80014a0:	460b      	mov	r3, r1
 80014a2:	f04f 0000 	mov.w	r0, #0
 80014a6:	f04f 0100 	mov.w	r1, #0
 80014aa:	0459      	lsls	r1, r3, #17
 80014ac:	ea41 31d2 	orr.w	r1, r1, r2, lsr #15
 80014b0:	0450      	lsls	r0, r2, #17
 80014b2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80014b6:	eb12 0800 	adds.w	r8, r2, r0
 80014ba:	eb43 0901 	adc.w	r9, r3, r1
 80014be:	e9c7 8916 	strd	r8, r9, [r7, #88]	; 0x58
	  var2 = var2 + (((int64_t)p4)<<35);
 80014c2:	4b48      	ldr	r3, [pc, #288]	; (80015e4 <BMP280_ReadTemperatureAndPressure+0x200>)
 80014c4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014c8:	b21a      	sxth	r2, r3
 80014ca:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80014ce:	f04f 0000 	mov.w	r0, #0
 80014d2:	f04f 0100 	mov.w	r1, #0
 80014d6:	00d1      	lsls	r1, r2, #3
 80014d8:	2000      	movs	r0, #0
 80014da:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80014de:	1814      	adds	r4, r2, r0
 80014e0:	61bc      	str	r4, [r7, #24]
 80014e2:	414b      	adcs	r3, r1
 80014e4:	61fb      	str	r3, [r7, #28]
 80014e6:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 80014ea:	e9c7 3416 	strd	r3, r4, [r7, #88]	; 0x58
	  var1 = ((var1 * var1 * (int64_t)p3)>>8) +
 80014ee:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80014f0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80014f2:	fb03 f102 	mul.w	r1, r3, r2
 80014f6:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80014f8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80014fa:	fb03 f302 	mul.w	r3, r3, r2
 80014fe:	18ca      	adds	r2, r1, r3
 8001500:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001502:	fba3 4503 	umull	r4, r5, r3, r3
 8001506:	1953      	adds	r3, r2, r5
 8001508:	461d      	mov	r5, r3
 800150a:	4b37      	ldr	r3, [pc, #220]	; (80015e8 <BMP280_ReadTemperatureAndPressure+0x204>)
 800150c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001510:	b21a      	sxth	r2, r3
 8001512:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8001516:	fb02 f005 	mul.w	r0, r2, r5
 800151a:	fb04 f103 	mul.w	r1, r4, r3
 800151e:	4401      	add	r1, r0
 8001520:	fba4 2302 	umull	r2, r3, r4, r2
 8001524:	4419      	add	r1, r3
 8001526:	460b      	mov	r3, r1
 8001528:	f04f 0800 	mov.w	r8, #0
 800152c:	f04f 0900 	mov.w	r9, #0
 8001530:	ea4f 2812 	mov.w	r8, r2, lsr #8
 8001534:	ea48 6803 	orr.w	r8, r8, r3, lsl #24
 8001538:	ea4f 2923 	mov.w	r9, r3, asr #8
	    ((var1 * (int64_t)p2)<<12);
 800153c:	4b2b      	ldr	r3, [pc, #172]	; (80015ec <BMP280_ReadTemperatureAndPressure+0x208>)
 800153e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001542:	b21a      	sxth	r2, r3
 8001544:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8001548:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800154a:	fb03 f001 	mul.w	r0, r3, r1
 800154e:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8001550:	fb02 f101 	mul.w	r1, r2, r1
 8001554:	1844      	adds	r4, r0, r1
 8001556:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8001558:	fba1 0102 	umull	r0, r1, r1, r2
 800155c:	1863      	adds	r3, r4, r1
 800155e:	4619      	mov	r1, r3
 8001560:	f04f 0200 	mov.w	r2, #0
 8001564:	f04f 0300 	mov.w	r3, #0
 8001568:	030b      	lsls	r3, r1, #12
 800156a:	ea43 5310 	orr.w	r3, r3, r0, lsr #20
 800156e:	0302      	lsls	r2, r0, #12
	  var1 = ((var1 * var1 * (int64_t)p3)>>8) +
 8001570:	eb18 0102 	adds.w	r1, r8, r2
 8001574:	6139      	str	r1, [r7, #16]
 8001576:	eb49 0303 	adc.w	r3, r9, r3
 800157a:	617b      	str	r3, [r7, #20]
 800157c:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8001580:	e9c7 3418 	strd	r3, r4, [r7, #96]	; 0x60
	  var1 = (((((int64_t)1)<<47)+var1))*((int64_t)p1)>>33;
 8001584:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8001588:	1c11      	adds	r1, r2, #0
 800158a:	6439      	str	r1, [r7, #64]	; 0x40
 800158c:	f543 4300 	adc.w	r3, r3, #32768	; 0x8000
 8001590:	647b      	str	r3, [r7, #68]	; 0x44
 8001592:	4b17      	ldr	r3, [pc, #92]	; (80015f0 <BMP280_ReadTemperatureAndPressure+0x20c>)
 8001594:	881b      	ldrh	r3, [r3, #0]
 8001596:	b29a      	uxth	r2, r3
 8001598:	f04f 0300 	mov.w	r3, #0
 800159c:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	; 0x40
 80015a0:	4629      	mov	r1, r5
 80015a2:	fb02 f001 	mul.w	r0, r2, r1
 80015a6:	4621      	mov	r1, r4
 80015a8:	fb01 f103 	mul.w	r1, r1, r3
 80015ac:	4401      	add	r1, r0
 80015ae:	4620      	mov	r0, r4
 80015b0:	fba0 2302 	umull	r2, r3, r0, r2
 80015b4:	4419      	add	r1, r3
 80015b6:	460b      	mov	r3, r1
 80015b8:	f04f 0000 	mov.w	r0, #0
 80015bc:	f04f 0100 	mov.w	r1, #0
 80015c0:	1058      	asrs	r0, r3, #1
 80015c2:	17d9      	asrs	r1, r3, #31
 80015c4:	e9c7 0118 	strd	r0, r1, [r7, #96]	; 0x60

	  if (var1 == 0) {
 80015c8:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80015cc:	4313      	orrs	r3, r2
 80015ce:	d111      	bne.n	80015f4 <BMP280_ReadTemperatureAndPressure+0x210>
	    return 0;  // avoid exception caused by division by zero
 80015d0:	2300      	movs	r3, #0
 80015d2:	e0f9      	b.n	80017c8 <BMP280_ReadTemperatureAndPressure+0x3e4>
 80015d4:	c2c60000 	.word	0xc2c60000
 80015d8:	2000024c 	.word	0x2000024c
 80015dc:	20000238 	.word	0x20000238
 80015e0:	20000232 	.word	0x20000232
 80015e4:	2000024a 	.word	0x2000024a
 80015e8:	20000246 	.word	0x20000246
 80015ec:	2000022a 	.word	0x2000022a
 80015f0:	20000234 	.word	0x20000234
	  }
	  p = 1048576 - adc_P;
 80015f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80015f6:	f5c3 1380 	rsb	r3, r3, #1048576	; 0x100000
 80015fa:	461a      	mov	r2, r3
 80015fc:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8001600:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
	  p = (((p<<31) - var2)*3125) / var1;
 8001604:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001606:	105b      	asrs	r3, r3, #1
 8001608:	63fb      	str	r3, [r7, #60]	; 0x3c
 800160a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800160c:	07db      	lsls	r3, r3, #31
 800160e:	63bb      	str	r3, [r7, #56]	; 0x38
 8001610:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001614:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	; 0x38
 8001618:	4621      	mov	r1, r4
 800161a:	ebb1 0a02 	subs.w	sl, r1, r2
 800161e:	4629      	mov	r1, r5
 8001620:	eb61 0b03 	sbc.w	fp, r1, r3
 8001624:	4652      	mov	r2, sl
 8001626:	465b      	mov	r3, fp
 8001628:	1891      	adds	r1, r2, r2
 800162a:	60b9      	str	r1, [r7, #8]
 800162c:	415b      	adcs	r3, r3
 800162e:	60fb      	str	r3, [r7, #12]
 8001630:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001634:	eb12 020a 	adds.w	r2, r2, sl
 8001638:	eb43 030b 	adc.w	r3, r3, fp
 800163c:	f04f 0000 	mov.w	r0, #0
 8001640:	f04f 0100 	mov.w	r1, #0
 8001644:	0199      	lsls	r1, r3, #6
 8001646:	ea41 6192 	orr.w	r1, r1, r2, lsr #26
 800164a:	0190      	lsls	r0, r2, #6
 800164c:	1812      	adds	r2, r2, r0
 800164e:	eb41 0303 	adc.w	r3, r1, r3
 8001652:	f04f 0000 	mov.w	r0, #0
 8001656:	f04f 0100 	mov.w	r1, #0
 800165a:	0099      	lsls	r1, r3, #2
 800165c:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8001660:	0090      	lsls	r0, r2, #2
 8001662:	4602      	mov	r2, r0
 8001664:	460b      	mov	r3, r1
 8001666:	eb12 020a 	adds.w	r2, r2, sl
 800166a:	eb43 030b 	adc.w	r3, r3, fp
 800166e:	f04f 0000 	mov.w	r0, #0
 8001672:	f04f 0100 	mov.w	r1, #0
 8001676:	0099      	lsls	r1, r3, #2
 8001678:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 800167c:	0090      	lsls	r0, r2, #2
 800167e:	4602      	mov	r2, r0
 8001680:	460b      	mov	r3, r1
 8001682:	eb12 010a 	adds.w	r1, r2, sl
 8001686:	6339      	str	r1, [r7, #48]	; 0x30
 8001688:	eb43 030b 	adc.w	r3, r3, fp
 800168c:	637b      	str	r3, [r7, #52]	; 0x34
 800168e:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8001692:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8001696:	f7ff faf7 	bl	8000c88 <__aeabi_ldivmod>
 800169a:	4602      	mov	r2, r0
 800169c:	460b      	mov	r3, r1
 800169e:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
	  var1 = (((int64_t)p9) * (p>>13) * (p>>13)) >> 25;
 80016a2:	4b4c      	ldr	r3, [pc, #304]	; (80017d4 <BMP280_ReadTemperatureAndPressure+0x3f0>)
 80016a4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016a8:	b218      	sxth	r0, r3
 80016aa:	ea4f 71e0 	mov.w	r1, r0, asr #31
 80016ae:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 80016b2:	f04f 0200 	mov.w	r2, #0
 80016b6:	f04f 0300 	mov.w	r3, #0
 80016ba:	0b62      	lsrs	r2, r4, #13
 80016bc:	ea42 42c5 	orr.w	r2, r2, r5, lsl #19
 80016c0:	136b      	asrs	r3, r5, #13
 80016c2:	fb02 f501 	mul.w	r5, r2, r1
 80016c6:	fb00 f403 	mul.w	r4, r0, r3
 80016ca:	442c      	add	r4, r5
 80016cc:	fba0 0102 	umull	r0, r1, r0, r2
 80016d0:	1863      	adds	r3, r4, r1
 80016d2:	4619      	mov	r1, r3
 80016d4:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 80016d8:	f04f 0200 	mov.w	r2, #0
 80016dc:	f04f 0300 	mov.w	r3, #0
 80016e0:	0b62      	lsrs	r2, r4, #13
 80016e2:	ea42 42c5 	orr.w	r2, r2, r5, lsl #19
 80016e6:	136b      	asrs	r3, r5, #13
 80016e8:	fb02 f501 	mul.w	r5, r2, r1
 80016ec:	fb00 f403 	mul.w	r4, r0, r3
 80016f0:	442c      	add	r4, r5
 80016f2:	fba0 0102 	umull	r0, r1, r0, r2
 80016f6:	1863      	adds	r3, r4, r1
 80016f8:	4619      	mov	r1, r3
 80016fa:	f04f 0200 	mov.w	r2, #0
 80016fe:	f04f 0300 	mov.w	r3, #0
 8001702:	0e42      	lsrs	r2, r0, #25
 8001704:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 8001708:	164b      	asrs	r3, r1, #25
 800170a:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
	  var2 = (((int64_t)p8) * p) >> 19;
 800170e:	4b32      	ldr	r3, [pc, #200]	; (80017d8 <BMP280_ReadTemperatureAndPressure+0x3f4>)
 8001710:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001714:	b21a      	sxth	r2, r3
 8001716:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800171a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800171c:	fb03 f001 	mul.w	r0, r3, r1
 8001720:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001722:	fb02 f101 	mul.w	r1, r2, r1
 8001726:	1844      	adds	r4, r0, r1
 8001728:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800172a:	fba1 0102 	umull	r0, r1, r1, r2
 800172e:	1863      	adds	r3, r4, r1
 8001730:	4619      	mov	r1, r3
 8001732:	f04f 0200 	mov.w	r2, #0
 8001736:	f04f 0300 	mov.w	r3, #0
 800173a:	0cc2      	lsrs	r2, r0, #19
 800173c:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 8001740:	14cb      	asrs	r3, r1, #19
 8001742:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58

	  p = ((p + var1 + var2) >> 8) + (((int64_t)p7)<<4);
 8001746:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800174a:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 800174e:	1884      	adds	r4, r0, r2
 8001750:	62bc      	str	r4, [r7, #40]	; 0x28
 8001752:	eb41 0303 	adc.w	r3, r1, r3
 8001756:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001758:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800175c:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 8001760:	4621      	mov	r1, r4
 8001762:	1889      	adds	r1, r1, r2
 8001764:	6239      	str	r1, [r7, #32]
 8001766:	4629      	mov	r1, r5
 8001768:	eb43 0101 	adc.w	r1, r3, r1
 800176c:	6279      	str	r1, [r7, #36]	; 0x24
 800176e:	f04f 0000 	mov.w	r0, #0
 8001772:	f04f 0100 	mov.w	r1, #0
 8001776:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800177a:	4623      	mov	r3, r4
 800177c:	0a18      	lsrs	r0, r3, #8
 800177e:	462b      	mov	r3, r5
 8001780:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8001784:	462b      	mov	r3, r5
 8001786:	1219      	asrs	r1, r3, #8
 8001788:	4b14      	ldr	r3, [pc, #80]	; (80017dc <BMP280_ReadTemperatureAndPressure+0x3f8>)
 800178a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800178e:	b21c      	sxth	r4, r3
 8001790:	ea4f 75e4 	mov.w	r5, r4, asr #31
 8001794:	f04f 0200 	mov.w	r2, #0
 8001798:	f04f 0300 	mov.w	r3, #0
 800179c:	012b      	lsls	r3, r5, #4
 800179e:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 80017a2:	0122      	lsls	r2, r4, #4
 80017a4:	1884      	adds	r4, r0, r2
 80017a6:	603c      	str	r4, [r7, #0]
 80017a8:	eb41 0303 	adc.w	r3, r1, r3
 80017ac:	607b      	str	r3, [r7, #4]
 80017ae:	e9d7 3400 	ldrd	r3, r4, [r7]
 80017b2:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
	  *pressure = (int32_t)p/256;
 80017b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	da00      	bge.n	80017be <BMP280_ReadTemperatureAndPressure+0x3da>
 80017bc:	33ff      	adds	r3, #255	; 0xff
 80017be:	121b      	asrs	r3, r3, #8
 80017c0:	461a      	mov	r2, r3
 80017c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80017c4:	601a      	str	r2, [r3, #0]

	  return 0;
 80017c6:	2300      	movs	r3, #0
}
 80017c8:	4618      	mov	r0, r3
 80017ca:	3770      	adds	r7, #112	; 0x70
 80017cc:	46bd      	mov	sp, r7
 80017ce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80017d2:	bf00      	nop
 80017d4:	20000248 	.word	0x20000248
 80017d8:	20000236 	.word	0x20000236
 80017dc:	2000022c 	.word	0x2000022c

080017e0 <lcd_send_cmd>:

#define SLAVE_ADDRESS_LCD 0x4E // change this according to ur setup
//#define SLAVE_ADDRESS_LCD 0x70 // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b086      	sub	sp, #24
 80017e4:	af02      	add	r7, sp, #8
 80017e6:	4603      	mov	r3, r0
 80017e8:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 80017ea:	79fb      	ldrb	r3, [r7, #7]
 80017ec:	f023 030f 	bic.w	r3, r3, #15
 80017f0:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 80017f2:	79fb      	ldrb	r3, [r7, #7]
 80017f4:	011b      	lsls	r3, r3, #4
 80017f6:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 80017f8:	7bfb      	ldrb	r3, [r7, #15]
 80017fa:	f043 030c 	orr.w	r3, r3, #12
 80017fe:	b2db      	uxtb	r3, r3
 8001800:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 8001802:	7bfb      	ldrb	r3, [r7, #15]
 8001804:	f043 0308 	orr.w	r3, r3, #8
 8001808:	b2db      	uxtb	r3, r3
 800180a:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 800180c:	7bbb      	ldrb	r3, [r7, #14]
 800180e:	f043 030c 	orr.w	r3, r3, #12
 8001812:	b2db      	uxtb	r3, r3
 8001814:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 8001816:	7bbb      	ldrb	r3, [r7, #14]
 8001818:	f043 0308 	orr.w	r3, r3, #8
 800181c:	b2db      	uxtb	r3, r3
 800181e:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c4, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001820:	f107 0208 	add.w	r2, r7, #8
 8001824:	2364      	movs	r3, #100	; 0x64
 8001826:	9300      	str	r3, [sp, #0]
 8001828:	2304      	movs	r3, #4
 800182a:	214e      	movs	r1, #78	; 0x4e
 800182c:	4803      	ldr	r0, [pc, #12]	; (800183c <lcd_send_cmd+0x5c>)
 800182e:	f001 fbe3 	bl	8002ff8 <HAL_I2C_Master_Transmit>
}
 8001832:	bf00      	nop
 8001834:	3710      	adds	r7, #16
 8001836:	46bd      	mov	sp, r7
 8001838:	bd80      	pop	{r7, pc}
 800183a:	bf00      	nop
 800183c:	20000250 	.word	0x20000250

08001840 <lcd_send_data>:

void lcd_send_data (char data)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b086      	sub	sp, #24
 8001844:	af02      	add	r7, sp, #8
 8001846:	4603      	mov	r3, r0
 8001848:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 800184a:	79fb      	ldrb	r3, [r7, #7]
 800184c:	f023 030f 	bic.w	r3, r3, #15
 8001850:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 8001852:	79fb      	ldrb	r3, [r7, #7]
 8001854:	011b      	lsls	r3, r3, #4
 8001856:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8001858:	7bfb      	ldrb	r3, [r7, #15]
 800185a:	f043 030d 	orr.w	r3, r3, #13
 800185e:	b2db      	uxtb	r3, r3
 8001860:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8001862:	7bfb      	ldrb	r3, [r7, #15]
 8001864:	f043 0309 	orr.w	r3, r3, #9
 8001868:	b2db      	uxtb	r3, r3
 800186a:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 800186c:	7bbb      	ldrb	r3, [r7, #14]
 800186e:	f043 030d 	orr.w	r3, r3, #13
 8001872:	b2db      	uxtb	r3, r3
 8001874:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8001876:	7bbb      	ldrb	r3, [r7, #14]
 8001878:	f043 0309 	orr.w	r3, r3, #9
 800187c:	b2db      	uxtb	r3, r3
 800187e:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c4, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001880:	f107 0208 	add.w	r2, r7, #8
 8001884:	2364      	movs	r3, #100	; 0x64
 8001886:	9300      	str	r3, [sp, #0]
 8001888:	2304      	movs	r3, #4
 800188a:	214e      	movs	r1, #78	; 0x4e
 800188c:	4803      	ldr	r0, [pc, #12]	; (800189c <lcd_send_data+0x5c>)
 800188e:	f001 fbb3 	bl	8002ff8 <HAL_I2C_Master_Transmit>
}
 8001892:	bf00      	nop
 8001894:	3710      	adds	r7, #16
 8001896:	46bd      	mov	sp, r7
 8001898:	bd80      	pop	{r7, pc}
 800189a:	bf00      	nop
 800189c:	20000250 	.word	0x20000250

080018a0 <lcd_clear>:

void lcd_clear (void)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b082      	sub	sp, #8
 80018a4:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x80);
 80018a6:	2080      	movs	r0, #128	; 0x80
 80018a8:	f7ff ff9a 	bl	80017e0 <lcd_send_cmd>
	for (int i=0; i<70; i++)
 80018ac:	2300      	movs	r3, #0
 80018ae:	607b      	str	r3, [r7, #4]
 80018b0:	e005      	b.n	80018be <lcd_clear+0x1e>
	{
		lcd_send_data (' ');
 80018b2:	2020      	movs	r0, #32
 80018b4:	f7ff ffc4 	bl	8001840 <lcd_send_data>
	for (int i=0; i<70; i++)
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	3301      	adds	r3, #1
 80018bc:	607b      	str	r3, [r7, #4]
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	2b45      	cmp	r3, #69	; 0x45
 80018c2:	ddf6      	ble.n	80018b2 <lcd_clear+0x12>
	}
	lcd_put_cur(0, 0); //Dopisane ustawienie kursora na 0,0
 80018c4:	2100      	movs	r1, #0
 80018c6:	2000      	movs	r0, #0
 80018c8:	f000 f804 	bl	80018d4 <lcd_put_cur>
}
 80018cc:	bf00      	nop
 80018ce:	3708      	adds	r7, #8
 80018d0:	46bd      	mov	sp, r7
 80018d2:	bd80      	pop	{r7, pc}

080018d4 <lcd_put_cur>:

void lcd_put_cur(int row, int col)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b082      	sub	sp, #8
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
 80018dc:	6039      	str	r1, [r7, #0]
    switch (row)
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d003      	beq.n	80018ec <lcd_put_cur+0x18>
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	2b01      	cmp	r3, #1
 80018e8:	d005      	beq.n	80018f6 <lcd_put_cur+0x22>
 80018ea:	e009      	b.n	8001900 <lcd_put_cur+0x2c>
    {
        case 0:
            col |= 0x80;
 80018ec:	683b      	ldr	r3, [r7, #0]
 80018ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80018f2:	603b      	str	r3, [r7, #0]
            break;
 80018f4:	e004      	b.n	8001900 <lcd_put_cur+0x2c>
        case 1:
            col |= 0xC0;
 80018f6:	683b      	ldr	r3, [r7, #0]
 80018f8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80018fc:	603b      	str	r3, [r7, #0]
            break;
 80018fe:	bf00      	nop
    }

    lcd_send_cmd (col);
 8001900:	683b      	ldr	r3, [r7, #0]
 8001902:	b2db      	uxtb	r3, r3
 8001904:	4618      	mov	r0, r3
 8001906:	f7ff ff6b 	bl	80017e0 <lcd_send_cmd>
}
 800190a:	bf00      	nop
 800190c:	3708      	adds	r7, #8
 800190e:	46bd      	mov	sp, r7
 8001910:	bd80      	pop	{r7, pc}

08001912 <lcd_init>:


void lcd_init (void)
{
 8001912:	b580      	push	{r7, lr}
 8001914:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 8001916:	2032      	movs	r0, #50	; 0x32
 8001918:	f001 f80e 	bl	8002938 <HAL_Delay>
	lcd_send_cmd (0x30);
 800191c:	2030      	movs	r0, #48	; 0x30
 800191e:	f7ff ff5f 	bl	80017e0 <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 8001922:	2005      	movs	r0, #5
 8001924:	f001 f808 	bl	8002938 <HAL_Delay>
	lcd_send_cmd (0x30);
 8001928:	2030      	movs	r0, #48	; 0x30
 800192a:	f7ff ff59 	bl	80017e0 <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 800192e:	2001      	movs	r0, #1
 8001930:	f001 f802 	bl	8002938 <HAL_Delay>
	lcd_send_cmd (0x30);
 8001934:	2030      	movs	r0, #48	; 0x30
 8001936:	f7ff ff53 	bl	80017e0 <lcd_send_cmd>
	HAL_Delay(10);
 800193a:	200a      	movs	r0, #10
 800193c:	f000 fffc 	bl	8002938 <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 8001940:	2020      	movs	r0, #32
 8001942:	f7ff ff4d 	bl	80017e0 <lcd_send_cmd>
	HAL_Delay(10);
 8001946:	200a      	movs	r0, #10
 8001948:	f000 fff6 	bl	8002938 <HAL_Delay>

  // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 800194c:	2028      	movs	r0, #40	; 0x28
 800194e:	f7ff ff47 	bl	80017e0 <lcd_send_cmd>
	HAL_Delay(1);
 8001952:	2001      	movs	r0, #1
 8001954:	f000 fff0 	bl	8002938 <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 8001958:	2008      	movs	r0, #8
 800195a:	f7ff ff41 	bl	80017e0 <lcd_send_cmd>
	HAL_Delay(1);
 800195e:	2001      	movs	r0, #1
 8001960:	f000 ffea 	bl	8002938 <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 8001964:	2001      	movs	r0, #1
 8001966:	f7ff ff3b 	bl	80017e0 <lcd_send_cmd>
	HAL_Delay(1);
 800196a:	2001      	movs	r0, #1
 800196c:	f000 ffe4 	bl	8002938 <HAL_Delay>
	HAL_Delay(1);
 8001970:	2001      	movs	r0, #1
 8001972:	f000 ffe1 	bl	8002938 <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 8001976:	2006      	movs	r0, #6
 8001978:	f7ff ff32 	bl	80017e0 <lcd_send_cmd>
	HAL_Delay(1);
 800197c:	2001      	movs	r0, #1
 800197e:	f000 ffdb 	bl	8002938 <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 8001982:	200c      	movs	r0, #12
 8001984:	f7ff ff2c 	bl	80017e0 <lcd_send_cmd>
}
 8001988:	bf00      	nop
 800198a:	bd80      	pop	{r7, pc}

0800198c <lcd_send_string>:

void lcd_send_string (char *str)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b082      	sub	sp, #8
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
	while (*str)
 8001994:	e006      	b.n	80019a4 <lcd_send_string+0x18>
	{
		lcd_send_data (*str++);
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	1c5a      	adds	r2, r3, #1
 800199a:	607a      	str	r2, [r7, #4]
 800199c:	781b      	ldrb	r3, [r3, #0]
 800199e:	4618      	mov	r0, r3
 80019a0:	f7ff ff4e 	bl	8001840 <lcd_send_data>
	while (*str)
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	781b      	ldrb	r3, [r3, #0]
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d1f4      	bne.n	8001996 <lcd_send_string+0xa>
	}
}
 80019ac:	bf00      	nop
 80019ae:	bf00      	nop
 80019b0:	3708      	adds	r7, #8
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bd80      	pop	{r7, pc}
	...

080019b8 <pid_controller>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
float pid_controller(pid_params* pid, float y_ref, float y_measured){
 80019b8:	b5b0      	push	{r4, r5, r7, lr}
 80019ba:	b08e      	sub	sp, #56	; 0x38
 80019bc:	af00      	add	r7, sp, #0
 80019be:	60f8      	str	r0, [r7, #12]
 80019c0:	ed87 0a02 	vstr	s0, [r7, #8]
 80019c4:	edc7 0a01 	vstr	s1, [r7, #4]

	float  P, I, D, error, integral, derivative, u=0,PWM;
 80019c8:	f04f 0300 	mov.w	r3, #0
 80019cc:	633b      	str	r3, [r7, #48]	; 0x30
	uint16_t PWM_sat;

	//wyznaczanie uchybu
	error = y_ref-y_measured;
 80019ce:	ed97 7a02 	vldr	s14, [r7, #8]
 80019d2:	edd7 7a01 	vldr	s15, [r7, #4]
 80019d6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80019da:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c

	//obliczanie części proporcjonalnej
	P = pid->Kp * error;
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	edd3 7a00 	vldr	s15, [r3]
 80019e4:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 80019e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80019ec:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28

	//obliczanie części całkującej
	integral = pid->pre_int + (error + pid->pre_err);
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	ed93 7a05 	vldr	s14, [r3, #20]
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	edd3 6a04 	vldr	s13, [r3, #16]
 80019fc:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001a00:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001a04:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a08:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	pid->pre_int = integral;
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a10:	615a      	str	r2, [r3, #20]
	I = pid->Ki*integral*(pid->dt/2.0);
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	ed93 7a01 	vldr	s14, [r3, #4]
 8001a18:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001a1c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a20:	ee17 0a90 	vmov	r0, s15
 8001a24:	f7fe fdb0 	bl	8000588 <__aeabi_f2d>
 8001a28:	4604      	mov	r4, r0
 8001a2a:	460d      	mov	r5, r1
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	68db      	ldr	r3, [r3, #12]
 8001a30:	4618      	mov	r0, r3
 8001a32:	f7fe fda9 	bl	8000588 <__aeabi_f2d>
 8001a36:	f04f 0200 	mov.w	r2, #0
 8001a3a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001a3e:	f7fe ff25 	bl	800088c <__aeabi_ddiv>
 8001a42:	4602      	mov	r2, r0
 8001a44:	460b      	mov	r3, r1
 8001a46:	4620      	mov	r0, r4
 8001a48:	4629      	mov	r1, r5
 8001a4a:	f7fe fdf5 	bl	8000638 <__aeabi_dmul>
 8001a4e:	4602      	mov	r2, r0
 8001a50:	460b      	mov	r3, r1
 8001a52:	4610      	mov	r0, r2
 8001a54:	4619      	mov	r1, r3
 8001a56:	f7ff f8c7 	bl	8000be8 <__aeabi_d2f>
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	623b      	str	r3, [r7, #32]

	//obliczanie części różniczkującej
	derivative = (error - pid->pre_err)/pid->dt;
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	edd3 7a04 	vldr	s15, [r3, #16]
 8001a64:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8001a68:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	ed93 7a03 	vldr	s14, [r3, #12]
 8001a72:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001a76:	edc7 7a07 	vstr	s15, [r7, #28]
	pid->pre_err = error;
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001a7e:	611a      	str	r2, [r3, #16]

	D = pid->Kd*derivative;
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	edd3 7a02 	vldr	s15, [r3, #8]
 8001a86:	ed97 7a07 	vldr	s14, [r7, #28]
 8001a8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a8e:	edc7 7a06 	vstr	s15, [r7, #24]

	//wyznaczanie sygnału sterującego w postaci PWM z uwzględnieniem nasycenia
	u = P  + I + D;
 8001a92:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8001a96:	edd7 7a08 	vldr	s15, [r7, #32]
 8001a9a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a9e:	ed97 7a06 	vldr	s14, [r7, #24]
 8001aa2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001aa6:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
	PWM=u*999.0;
 8001aaa:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8001aae:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8001b0c <pid_controller+0x154>
 8001ab2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001ab6:	edc7 7a05 	vstr	s15, [r7, #20]
	if(PWM>999.0)
 8001aba:	edd7 7a05 	vldr	s15, [r7, #20]
 8001abe:	ed9f 7a13 	vldr	s14, [pc, #76]	; 8001b0c <pid_controller+0x154>
 8001ac2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001ac6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001aca:	dd03      	ble.n	8001ad4 <pid_controller+0x11c>
	{
		PWM_sat=999;
 8001acc:	f240 33e7 	movw	r3, #999	; 0x3e7
 8001ad0:	86fb      	strh	r3, [r7, #54]	; 0x36
 8001ad2:	e010      	b.n	8001af6 <pid_controller+0x13e>
	}
	else if(PWM<0.0)
 8001ad4:	edd7 7a05 	vldr	s15, [r7, #20]
 8001ad8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001adc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ae0:	d502      	bpl.n	8001ae8 <pid_controller+0x130>
	{
		PWM_sat=0;
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	86fb      	strh	r3, [r7, #54]	; 0x36
 8001ae6:	e006      	b.n	8001af6 <pid_controller+0x13e>
	}
	else
	{
		PWM_sat=(uint16_t)PWM;
 8001ae8:	edd7 7a05 	vldr	s15, [r7, #20]
 8001aec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001af0:	ee17 3a90 	vmov	r3, s15
 8001af4:	86fb      	strh	r3, [r7, #54]	; 0x36
	}
	return PWM_sat;
 8001af6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001af8:	ee07 3a90 	vmov	s15, r3
 8001afc:	eef8 7a67 	vcvt.f32.u32	s15, s15
}
 8001b00:	eeb0 0a67 	vmov.f32	s0, s15
 8001b04:	3738      	adds	r7, #56	; 0x38
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bdb0      	pop	{r4, r5, r7, pc}
 8001b0a:	bf00      	nop
 8001b0c:	4479c000 	.word	0x4479c000

08001b10 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001b10:	b5b0      	push	{r4, r5, r7, lr}
 8001b12:	b084      	sub	sp, #16
 8001b14:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001b16:	f000 feb2 	bl	800287e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001b1a:	f000 f8c9 	bl	8001cb0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001b1e:	f000 faa5 	bl	800206c <MX_GPIO_Init>
  MX_I2C1_Init();
 8001b22:	f000 f921 	bl	8001d68 <MX_I2C1_Init>
  MX_TIM3_Init();
 8001b26:	f000 f9f9 	bl	8001f1c <MX_TIM3_Init>
  MX_I2C4_Init();
 8001b2a:	f000 f95d 	bl	8001de8 <MX_I2C4_Init>
  MX_USART3_UART_Init();
 8001b2e:	f000 fa6d 	bl	800200c <MX_USART3_UART_Init>
  MX_TIM1_Init();
 8001b32:	f000 f999 	bl	8001e68 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  BMP280_Init(&hi2c1, BMP280_TEMPERATURE_16BIT, BMP280_STANDARD, BMP280_FORCEDMODE);
 8001b36:	2301      	movs	r3, #1
 8001b38:	2203      	movs	r2, #3
 8001b3a:	2101      	movs	r1, #1
 8001b3c:	484c      	ldr	r0, [pc, #304]	; (8001c70 <main+0x160>)
 8001b3e:	f7ff fb07 	bl	8001150 <BMP280_Init>
  HAL_TIM_PWM_Start (&htim3, TIM_CHANNEL_1);
 8001b42:	2100      	movs	r1, #0
 8001b44:	484b      	ldr	r0, [pc, #300]	; (8001c74 <main+0x164>)
 8001b46:	f003 fa05 	bl	8004f54 <HAL_TIM_PWM_Start>
  lcd_init ();
 8001b4a:	f7ff fee2 	bl	8001912 <lcd_init>
  HAL_TIM_Encoder_Start(&htim1,TIM_CHANNEL_ALL);
 8001b4e:	213c      	movs	r1, #60	; 0x3c
 8001b50:	4849      	ldr	r0, [pc, #292]	; (8001c78 <main+0x168>)
 8001b52:	f003 fb9f 	bl	8005294 <HAL_TIM_Encoder_Start>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  //pobieranie wartości zadanej z enkodera
	  impulsy = __HAL_TIM_GET_COUNTER(&htim1);
 8001b56:	4b48      	ldr	r3, [pc, #288]	; (8001c78 <main+0x168>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b5c:	ee07 3a90 	vmov	s15, r3
 8001b60:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001b64:	4b45      	ldr	r3, [pc, #276]	; (8001c7c <main+0x16c>)
 8001b66:	edc3 7a00 	vstr	s15, [r3]
	  y_ref=y_offset+(impulsy/4);
 8001b6a:	4b44      	ldr	r3, [pc, #272]	; (8001c7c <main+0x16c>)
 8001b6c:	edd3 7a00 	vldr	s15, [r3]
 8001b70:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 8001b74:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001b78:	4b41      	ldr	r3, [pc, #260]	; (8001c80 <main+0x170>)
 8001b7a:	edd3 7a00 	vldr	s15, [r3]
 8001b7e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b82:	4b40      	ldr	r3, [pc, #256]	; (8001c84 <main+0x174>)
 8001b84:	edc3 7a00 	vstr	s15, [r3]

	  //pobieranie aktualnej temperatury
	  BMP280_ReadTemperatureAndPressure(&temperature, &pressure);
 8001b88:	493f      	ldr	r1, [pc, #252]	; (8001c88 <main+0x178>)
 8001b8a:	4840      	ldr	r0, [pc, #256]	; (8001c8c <main+0x17c>)
 8001b8c:	f7ff fc2a 	bl	80013e4 <BMP280_ReadTemperatureAndPressure>

	  //wyznaczanie sygnału sterującego oraz podanie go w formie PWM
	  u_ster=pid_controller(&pid1, y_ref, temperature);
 8001b90:	4b3c      	ldr	r3, [pc, #240]	; (8001c84 <main+0x174>)
 8001b92:	edd3 7a00 	vldr	s15, [r3]
 8001b96:	4b3d      	ldr	r3, [pc, #244]	; (8001c8c <main+0x17c>)
 8001b98:	ed93 7a00 	vldr	s14, [r3]
 8001b9c:	eef0 0a47 	vmov.f32	s1, s14
 8001ba0:	eeb0 0a67 	vmov.f32	s0, s15
 8001ba4:	483a      	ldr	r0, [pc, #232]	; (8001c90 <main+0x180>)
 8001ba6:	f7ff ff07 	bl	80019b8 <pid_controller>
 8001baa:	eef0 7a40 	vmov.f32	s15, s0
 8001bae:	4b39      	ldr	r3, [pc, #228]	; (8001c94 <main+0x184>)
 8001bb0:	edc3 7a00 	vstr	s15, [r3]
	  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, u_ster);
 8001bb4:	4b37      	ldr	r3, [pc, #220]	; (8001c94 <main+0x184>)
 8001bb6:	edd3 7a00 	vldr	s15, [r3]
 8001bba:	4b2e      	ldr	r3, [pc, #184]	; (8001c74 <main+0x164>)
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001bc2:	ee17 2a90 	vmov	r2, s15
 8001bc6:	635a      	str	r2, [r3, #52]	; 0x34

	  //obsługa wyświetlacza LCD
	  sprintf((char*)text, "%.2f, ", temperature);
 8001bc8:	4b30      	ldr	r3, [pc, #192]	; (8001c8c <main+0x17c>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	4618      	mov	r0, r3
 8001bce:	f7fe fcdb 	bl	8000588 <__aeabi_f2d>
 8001bd2:	4602      	mov	r2, r0
 8001bd4:	460b      	mov	r3, r1
 8001bd6:	4930      	ldr	r1, [pc, #192]	; (8001c98 <main+0x188>)
 8001bd8:	4830      	ldr	r0, [pc, #192]	; (8001c9c <main+0x18c>)
 8001bda:	f005 fb8d 	bl	80072f8 <siprintf>
	  lcd_clear ();
 8001bde:	f7ff fe5f 	bl	80018a0 <lcd_clear>
	  lcd_put_cur(0, 0);
 8001be2:	2100      	movs	r1, #0
 8001be4:	2000      	movs	r0, #0
 8001be6:	f7ff fe75 	bl	80018d4 <lcd_put_cur>
	  sprintf((char*)text, "Temp akt: %.2fC", temperature);
 8001bea:	4b28      	ldr	r3, [pc, #160]	; (8001c8c <main+0x17c>)
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	4618      	mov	r0, r3
 8001bf0:	f7fe fcca 	bl	8000588 <__aeabi_f2d>
 8001bf4:	4602      	mov	r2, r0
 8001bf6:	460b      	mov	r3, r1
 8001bf8:	4929      	ldr	r1, [pc, #164]	; (8001ca0 <main+0x190>)
 8001bfa:	4828      	ldr	r0, [pc, #160]	; (8001c9c <main+0x18c>)
 8001bfc:	f005 fb7c 	bl	80072f8 <siprintf>
	  lcd_send_string(text);
 8001c00:	4826      	ldr	r0, [pc, #152]	; (8001c9c <main+0x18c>)
 8001c02:	f7ff fec3 	bl	800198c <lcd_send_string>
	  lcd_put_cur(1, 0);
 8001c06:	2100      	movs	r1, #0
 8001c08:	2001      	movs	r0, #1
 8001c0a:	f7ff fe63 	bl	80018d4 <lcd_put_cur>
	  sprintf((char*)text, "Zadana: %.2fC", y_ref);
 8001c0e:	4b1d      	ldr	r3, [pc, #116]	; (8001c84 <main+0x174>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	4618      	mov	r0, r3
 8001c14:	f7fe fcb8 	bl	8000588 <__aeabi_f2d>
 8001c18:	4602      	mov	r2, r0
 8001c1a:	460b      	mov	r3, r1
 8001c1c:	4921      	ldr	r1, [pc, #132]	; (8001ca4 <main+0x194>)
 8001c1e:	481f      	ldr	r0, [pc, #124]	; (8001c9c <main+0x18c>)
 8001c20:	f005 fb6a 	bl	80072f8 <siprintf>
	  lcd_send_string(text);
 8001c24:	481d      	ldr	r0, [pc, #116]	; (8001c9c <main+0x18c>)
 8001c26:	f7ff feb1 	bl	800198c <lcd_send_string>

	  //obsługa wysyłania danych przez port szeregowy
	  uint16_t len = sprintf((char*)text,"%.2f,%.2f\n\r",temperature,u_ster);
 8001c2a:	4b18      	ldr	r3, [pc, #96]	; (8001c8c <main+0x17c>)
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	4618      	mov	r0, r3
 8001c30:	f7fe fcaa 	bl	8000588 <__aeabi_f2d>
 8001c34:	4604      	mov	r4, r0
 8001c36:	460d      	mov	r5, r1
 8001c38:	4b16      	ldr	r3, [pc, #88]	; (8001c94 <main+0x184>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	f7fe fca3 	bl	8000588 <__aeabi_f2d>
 8001c42:	4602      	mov	r2, r0
 8001c44:	460b      	mov	r3, r1
 8001c46:	e9cd 2300 	strd	r2, r3, [sp]
 8001c4a:	4622      	mov	r2, r4
 8001c4c:	462b      	mov	r3, r5
 8001c4e:	4916      	ldr	r1, [pc, #88]	; (8001ca8 <main+0x198>)
 8001c50:	4812      	ldr	r0, [pc, #72]	; (8001c9c <main+0x18c>)
 8001c52:	f005 fb51 	bl	80072f8 <siprintf>
 8001c56:	4603      	mov	r3, r0
 8001c58:	80fb      	strh	r3, [r7, #6]
	  HAL_UART_Transmit(&huart3, (uint8_t*)text,len,50);
 8001c5a:	88fa      	ldrh	r2, [r7, #6]
 8001c5c:	2332      	movs	r3, #50	; 0x32
 8001c5e:	490f      	ldr	r1, [pc, #60]	; (8001c9c <main+0x18c>)
 8001c60:	4812      	ldr	r0, [pc, #72]	; (8001cac <main+0x19c>)
 8001c62:	f004 fa1d 	bl	80060a0 <HAL_UART_Transmit>
	  HAL_Delay(10);
 8001c66:	200a      	movs	r0, #10
 8001c68:	f000 fe66 	bl	8002938 <HAL_Delay>
  {
 8001c6c:	e773      	b.n	8001b56 <main+0x46>
 8001c6e:	bf00      	nop
 8001c70:	20000320 	.word	0x20000320
 8001c74:	20000370 	.word	0x20000370
 8001c78:	200003f4 	.word	0x200003f4
 8001c7c:	20000218 	.word	0x20000218
 8001c80:	20000018 	.word	0x20000018
 8001c84:	20000440 	.word	0x20000440
 8001c88:	200003bc 	.word	0x200003bc
 8001c8c:	2000036c 	.word	0x2000036c
 8001c90:	20000000 	.word	0x20000000
 8001c94:	20000214 	.word	0x20000214
 8001c98:	08009768 	.word	0x08009768
 8001c9c:	200003c0 	.word	0x200003c0
 8001ca0:	08009770 	.word	0x08009770
 8001ca4:	08009780 	.word	0x08009780
 8001ca8:	08009790 	.word	0x08009790
 8001cac:	2000029c 	.word	0x2000029c

08001cb0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b094      	sub	sp, #80	; 0x50
 8001cb4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001cb6:	f107 0320 	add.w	r3, r7, #32
 8001cba:	2230      	movs	r2, #48	; 0x30
 8001cbc:	2100      	movs	r1, #0
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	f004 fea8 	bl	8006a14 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001cc4:	f107 030c 	add.w	r3, r7, #12
 8001cc8:	2200      	movs	r2, #0
 8001cca:	601a      	str	r2, [r3, #0]
 8001ccc:	605a      	str	r2, [r3, #4]
 8001cce:	609a      	str	r2, [r3, #8]
 8001cd0:	60da      	str	r2, [r3, #12]
 8001cd2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001cd4:	4b22      	ldr	r3, [pc, #136]	; (8001d60 <SystemClock_Config+0xb0>)
 8001cd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cd8:	4a21      	ldr	r2, [pc, #132]	; (8001d60 <SystemClock_Config+0xb0>)
 8001cda:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cde:	6413      	str	r3, [r2, #64]	; 0x40
 8001ce0:	4b1f      	ldr	r3, [pc, #124]	; (8001d60 <SystemClock_Config+0xb0>)
 8001ce2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ce4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ce8:	60bb      	str	r3, [r7, #8]
 8001cea:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001cec:	4b1d      	ldr	r3, [pc, #116]	; (8001d64 <SystemClock_Config+0xb4>)
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001cf4:	4a1b      	ldr	r2, [pc, #108]	; (8001d64 <SystemClock_Config+0xb4>)
 8001cf6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001cfa:	6013      	str	r3, [r2, #0]
 8001cfc:	4b19      	ldr	r3, [pc, #100]	; (8001d64 <SystemClock_Config+0xb4>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001d04:	607b      	str	r3, [r7, #4]
 8001d06:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001d08:	2302      	movs	r3, #2
 8001d0a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001d0c:	2301      	movs	r3, #1
 8001d0e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001d10:	2310      	movs	r3, #16
 8001d12:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001d14:	2300      	movs	r3, #0
 8001d16:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001d18:	f107 0320 	add.w	r3, r7, #32
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	f001 ffcb 	bl	8003cb8 <HAL_RCC_OscConfig>
 8001d22:	4603      	mov	r3, r0
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d001      	beq.n	8001d2c <SystemClock_Config+0x7c>
  {
    Error_Handler();
 8001d28:	f000 fab0 	bl	800228c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001d2c:	230f      	movs	r3, #15
 8001d2e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001d30:	2300      	movs	r3, #0
 8001d32:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001d34:	2300      	movs	r3, #0
 8001d36:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001d38:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d3c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001d3e:	2300      	movs	r3, #0
 8001d40:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001d42:	f107 030c 	add.w	r3, r7, #12
 8001d46:	2100      	movs	r1, #0
 8001d48:	4618      	mov	r0, r3
 8001d4a:	f002 fa59 	bl	8004200 <HAL_RCC_ClockConfig>
 8001d4e:	4603      	mov	r3, r0
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d001      	beq.n	8001d58 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 8001d54:	f000 fa9a 	bl	800228c <Error_Handler>
  }
}
 8001d58:	bf00      	nop
 8001d5a:	3750      	adds	r7, #80	; 0x50
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	bd80      	pop	{r7, pc}
 8001d60:	40023800 	.word	0x40023800
 8001d64:	40007000 	.word	0x40007000

08001d68 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001d6c:	4b1b      	ldr	r3, [pc, #108]	; (8001ddc <MX_I2C1_Init+0x74>)
 8001d6e:	4a1c      	ldr	r2, [pc, #112]	; (8001de0 <MX_I2C1_Init+0x78>)
 8001d70:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 8001d72:	4b1a      	ldr	r3, [pc, #104]	; (8001ddc <MX_I2C1_Init+0x74>)
 8001d74:	4a1b      	ldr	r2, [pc, #108]	; (8001de4 <MX_I2C1_Init+0x7c>)
 8001d76:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001d78:	4b18      	ldr	r3, [pc, #96]	; (8001ddc <MX_I2C1_Init+0x74>)
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001d7e:	4b17      	ldr	r3, [pc, #92]	; (8001ddc <MX_I2C1_Init+0x74>)
 8001d80:	2201      	movs	r2, #1
 8001d82:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001d84:	4b15      	ldr	r3, [pc, #84]	; (8001ddc <MX_I2C1_Init+0x74>)
 8001d86:	2200      	movs	r2, #0
 8001d88:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001d8a:	4b14      	ldr	r3, [pc, #80]	; (8001ddc <MX_I2C1_Init+0x74>)
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001d90:	4b12      	ldr	r3, [pc, #72]	; (8001ddc <MX_I2C1_Init+0x74>)
 8001d92:	2200      	movs	r2, #0
 8001d94:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001d96:	4b11      	ldr	r3, [pc, #68]	; (8001ddc <MX_I2C1_Init+0x74>)
 8001d98:	2200      	movs	r2, #0
 8001d9a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001d9c:	4b0f      	ldr	r3, [pc, #60]	; (8001ddc <MX_I2C1_Init+0x74>)
 8001d9e:	2200      	movs	r2, #0
 8001da0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001da2:	480e      	ldr	r0, [pc, #56]	; (8001ddc <MX_I2C1_Init+0x74>)
 8001da4:	f001 f898 	bl	8002ed8 <HAL_I2C_Init>
 8001da8:	4603      	mov	r3, r0
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d001      	beq.n	8001db2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001dae:	f000 fa6d 	bl	800228c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001db2:	2100      	movs	r1, #0
 8001db4:	4809      	ldr	r0, [pc, #36]	; (8001ddc <MX_I2C1_Init+0x74>)
 8001db6:	f001 fee7 	bl	8003b88 <HAL_I2CEx_ConfigAnalogFilter>
 8001dba:	4603      	mov	r3, r0
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d001      	beq.n	8001dc4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001dc0:	f000 fa64 	bl	800228c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001dc4:	2100      	movs	r1, #0
 8001dc6:	4805      	ldr	r0, [pc, #20]	; (8001ddc <MX_I2C1_Init+0x74>)
 8001dc8:	f001 ff29 	bl	8003c1e <HAL_I2CEx_ConfigDigitalFilter>
 8001dcc:	4603      	mov	r3, r0
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d001      	beq.n	8001dd6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001dd2:	f000 fa5b 	bl	800228c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001dd6:	bf00      	nop
 8001dd8:	bd80      	pop	{r7, pc}
 8001dda:	bf00      	nop
 8001ddc:	20000320 	.word	0x20000320
 8001de0:	40005400 	.word	0x40005400
 8001de4:	2000090e 	.word	0x2000090e

08001de8 <MX_I2C4_Init>:
  * @brief I2C4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C4_Init(void)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 8001dec:	4b1b      	ldr	r3, [pc, #108]	; (8001e5c <MX_I2C4_Init+0x74>)
 8001dee:	4a1c      	ldr	r2, [pc, #112]	; (8001e60 <MX_I2C4_Init+0x78>)
 8001df0:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x2000090E;
 8001df2:	4b1a      	ldr	r3, [pc, #104]	; (8001e5c <MX_I2C4_Init+0x74>)
 8001df4:	4a1b      	ldr	r2, [pc, #108]	; (8001e64 <MX_I2C4_Init+0x7c>)
 8001df6:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 8001df8:	4b18      	ldr	r3, [pc, #96]	; (8001e5c <MX_I2C4_Init+0x74>)
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001dfe:	4b17      	ldr	r3, [pc, #92]	; (8001e5c <MX_I2C4_Init+0x74>)
 8001e00:	2201      	movs	r2, #1
 8001e02:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001e04:	4b15      	ldr	r3, [pc, #84]	; (8001e5c <MX_I2C4_Init+0x74>)
 8001e06:	2200      	movs	r2, #0
 8001e08:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 8001e0a:	4b14      	ldr	r3, [pc, #80]	; (8001e5c <MX_I2C4_Init+0x74>)
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001e10:	4b12      	ldr	r3, [pc, #72]	; (8001e5c <MX_I2C4_Init+0x74>)
 8001e12:	2200      	movs	r2, #0
 8001e14:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001e16:	4b11      	ldr	r3, [pc, #68]	; (8001e5c <MX_I2C4_Init+0x74>)
 8001e18:	2200      	movs	r2, #0
 8001e1a:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001e1c:	4b0f      	ldr	r3, [pc, #60]	; (8001e5c <MX_I2C4_Init+0x74>)
 8001e1e:	2200      	movs	r2, #0
 8001e20:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 8001e22:	480e      	ldr	r0, [pc, #56]	; (8001e5c <MX_I2C4_Init+0x74>)
 8001e24:	f001 f858 	bl	8002ed8 <HAL_I2C_Init>
 8001e28:	4603      	mov	r3, r0
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d001      	beq.n	8001e32 <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 8001e2e:	f000 fa2d 	bl	800228c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001e32:	2100      	movs	r1, #0
 8001e34:	4809      	ldr	r0, [pc, #36]	; (8001e5c <MX_I2C4_Init+0x74>)
 8001e36:	f001 fea7 	bl	8003b88 <HAL_I2CEx_ConfigAnalogFilter>
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d001      	beq.n	8001e44 <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 8001e40:	f000 fa24 	bl	800228c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8001e44:	2100      	movs	r1, #0
 8001e46:	4805      	ldr	r0, [pc, #20]	; (8001e5c <MX_I2C4_Init+0x74>)
 8001e48:	f001 fee9 	bl	8003c1e <HAL_I2CEx_ConfigDigitalFilter>
 8001e4c:	4603      	mov	r3, r0
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d001      	beq.n	8001e56 <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 8001e52:	f000 fa1b 	bl	800228c <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 8001e56:	bf00      	nop
 8001e58:	bd80      	pop	{r7, pc}
 8001e5a:	bf00      	nop
 8001e5c:	20000250 	.word	0x20000250
 8001e60:	40006000 	.word	0x40006000
 8001e64:	2000090e 	.word	0x2000090e

08001e68 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b08c      	sub	sp, #48	; 0x30
 8001e6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001e6e:	f107 030c 	add.w	r3, r7, #12
 8001e72:	2224      	movs	r2, #36	; 0x24
 8001e74:	2100      	movs	r1, #0
 8001e76:	4618      	mov	r0, r3
 8001e78:	f004 fdcc 	bl	8006a14 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e7c:	463b      	mov	r3, r7
 8001e7e:	2200      	movs	r2, #0
 8001e80:	601a      	str	r2, [r3, #0]
 8001e82:	605a      	str	r2, [r3, #4]
 8001e84:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001e86:	4b23      	ldr	r3, [pc, #140]	; (8001f14 <MX_TIM1_Init+0xac>)
 8001e88:	4a23      	ldr	r2, [pc, #140]	; (8001f18 <MX_TIM1_Init+0xb0>)
 8001e8a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001e8c:	4b21      	ldr	r3, [pc, #132]	; (8001f14 <MX_TIM1_Init+0xac>)
 8001e8e:	2200      	movs	r2, #0
 8001e90:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e92:	4b20      	ldr	r3, [pc, #128]	; (8001f14 <MX_TIM1_Init+0xac>)
 8001e94:	2200      	movs	r2, #0
 8001e96:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 19;
 8001e98:	4b1e      	ldr	r3, [pc, #120]	; (8001f14 <MX_TIM1_Init+0xac>)
 8001e9a:	2213      	movs	r2, #19
 8001e9c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e9e:	4b1d      	ldr	r3, [pc, #116]	; (8001f14 <MX_TIM1_Init+0xac>)
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001ea4:	4b1b      	ldr	r3, [pc, #108]	; (8001f14 <MX_TIM1_Init+0xac>)
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001eaa:	4b1a      	ldr	r3, [pc, #104]	; (8001f14 <MX_TIM1_Init+0xac>)
 8001eac:	2200      	movs	r2, #0
 8001eae:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001eb0:	2301      	movs	r3, #1
 8001eb2:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001eb8:	2301      	movs	r3, #1
 8001eba:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001ec8:	2301      	movs	r3, #1
 8001eca:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001ecc:	2300      	movs	r3, #0
 8001ece:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8001ed4:	f107 030c 	add.w	r3, r7, #12
 8001ed8:	4619      	mov	r1, r3
 8001eda:	480e      	ldr	r0, [pc, #56]	; (8001f14 <MX_TIM1_Init+0xac>)
 8001edc:	f003 f934 	bl	8005148 <HAL_TIM_Encoder_Init>
 8001ee0:	4603      	mov	r3, r0
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d001      	beq.n	8001eea <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 8001ee6:	f000 f9d1 	bl	800228c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001eea:	2300      	movs	r3, #0
 8001eec:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001eee:	2300      	movs	r3, #0
 8001ef0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001ef6:	463b      	mov	r3, r7
 8001ef8:	4619      	mov	r1, r3
 8001efa:	4806      	ldr	r0, [pc, #24]	; (8001f14 <MX_TIM1_Init+0xac>)
 8001efc:	f003 fff4 	bl	8005ee8 <HAL_TIMEx_MasterConfigSynchronization>
 8001f00:	4603      	mov	r3, r0
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d001      	beq.n	8001f0a <MX_TIM1_Init+0xa2>
  {
    Error_Handler();
 8001f06:	f000 f9c1 	bl	800228c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001f0a:	bf00      	nop
 8001f0c:	3730      	adds	r7, #48	; 0x30
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bd80      	pop	{r7, pc}
 8001f12:	bf00      	nop
 8001f14:	200003f4 	.word	0x200003f4
 8001f18:	40010000 	.word	0x40010000

08001f1c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b08e      	sub	sp, #56	; 0x38
 8001f20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001f22:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001f26:	2200      	movs	r2, #0
 8001f28:	601a      	str	r2, [r3, #0]
 8001f2a:	605a      	str	r2, [r3, #4]
 8001f2c:	609a      	str	r2, [r3, #8]
 8001f2e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f30:	f107 031c 	add.w	r3, r7, #28
 8001f34:	2200      	movs	r2, #0
 8001f36:	601a      	str	r2, [r3, #0]
 8001f38:	605a      	str	r2, [r3, #4]
 8001f3a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001f3c:	463b      	mov	r3, r7
 8001f3e:	2200      	movs	r2, #0
 8001f40:	601a      	str	r2, [r3, #0]
 8001f42:	605a      	str	r2, [r3, #4]
 8001f44:	609a      	str	r2, [r3, #8]
 8001f46:	60da      	str	r2, [r3, #12]
 8001f48:	611a      	str	r2, [r3, #16]
 8001f4a:	615a      	str	r2, [r3, #20]
 8001f4c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001f4e:	4b2d      	ldr	r3, [pc, #180]	; (8002004 <MX_TIM3_Init+0xe8>)
 8001f50:	4a2d      	ldr	r2, [pc, #180]	; (8002008 <MX_TIM3_Init+0xec>)
 8001f52:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 71;
 8001f54:	4b2b      	ldr	r3, [pc, #172]	; (8002004 <MX_TIM3_Init+0xe8>)
 8001f56:	2247      	movs	r2, #71	; 0x47
 8001f58:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f5a:	4b2a      	ldr	r3, [pc, #168]	; (8002004 <MX_TIM3_Init+0xe8>)
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8001f60:	4b28      	ldr	r3, [pc, #160]	; (8002004 <MX_TIM3_Init+0xe8>)
 8001f62:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001f66:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f68:	4b26      	ldr	r3, [pc, #152]	; (8002004 <MX_TIM3_Init+0xe8>)
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001f6e:	4b25      	ldr	r3, [pc, #148]	; (8002004 <MX_TIM3_Init+0xe8>)
 8001f70:	2280      	movs	r2, #128	; 0x80
 8001f72:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001f74:	4823      	ldr	r0, [pc, #140]	; (8002004 <MX_TIM3_Init+0xe8>)
 8001f76:	f002 ff35 	bl	8004de4 <HAL_TIM_Base_Init>
 8001f7a:	4603      	mov	r3, r0
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d001      	beq.n	8001f84 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8001f80:	f000 f984 	bl	800228c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001f84:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f88:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001f8a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001f8e:	4619      	mov	r1, r3
 8001f90:	481c      	ldr	r0, [pc, #112]	; (8002004 <MX_TIM3_Init+0xe8>)
 8001f92:	f003 fb21 	bl	80055d8 <HAL_TIM_ConfigClockSource>
 8001f96:	4603      	mov	r3, r0
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d001      	beq.n	8001fa0 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8001f9c:	f000 f976 	bl	800228c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001fa0:	4818      	ldr	r0, [pc, #96]	; (8002004 <MX_TIM3_Init+0xe8>)
 8001fa2:	f002 ff76 	bl	8004e92 <HAL_TIM_PWM_Init>
 8001fa6:	4603      	mov	r3, r0
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d001      	beq.n	8001fb0 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8001fac:	f000 f96e 	bl	800228c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001fb8:	f107 031c 	add.w	r3, r7, #28
 8001fbc:	4619      	mov	r1, r3
 8001fbe:	4811      	ldr	r0, [pc, #68]	; (8002004 <MX_TIM3_Init+0xe8>)
 8001fc0:	f003 ff92 	bl	8005ee8 <HAL_TIMEx_MasterConfigSynchronization>
 8001fc4:	4603      	mov	r3, r0
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d001      	beq.n	8001fce <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8001fca:	f000 f95f 	bl	800228c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001fce:	2360      	movs	r3, #96	; 0x60
 8001fd0:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001fda:	2300      	movs	r3, #0
 8001fdc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001fde:	463b      	mov	r3, r7
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	4619      	mov	r1, r3
 8001fe4:	4807      	ldr	r0, [pc, #28]	; (8002004 <MX_TIM3_Init+0xe8>)
 8001fe6:	f003 f9e3 	bl	80053b0 <HAL_TIM_PWM_ConfigChannel>
 8001fea:	4603      	mov	r3, r0
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d001      	beq.n	8001ff4 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8001ff0:	f000 f94c 	bl	800228c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001ff4:	4803      	ldr	r0, [pc, #12]	; (8002004 <MX_TIM3_Init+0xe8>)
 8001ff6:	f000 fa7f 	bl	80024f8 <HAL_TIM_MspPostInit>

}
 8001ffa:	bf00      	nop
 8001ffc:	3738      	adds	r7, #56	; 0x38
 8001ffe:	46bd      	mov	sp, r7
 8002000:	bd80      	pop	{r7, pc}
 8002002:	bf00      	nop
 8002004:	20000370 	.word	0x20000370
 8002008:	40000400 	.word	0x40000400

0800200c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002010:	4b14      	ldr	r3, [pc, #80]	; (8002064 <MX_USART3_UART_Init+0x58>)
 8002012:	4a15      	ldr	r2, [pc, #84]	; (8002068 <MX_USART3_UART_Init+0x5c>)
 8002014:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8002016:	4b13      	ldr	r3, [pc, #76]	; (8002064 <MX_USART3_UART_Init+0x58>)
 8002018:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800201c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800201e:	4b11      	ldr	r3, [pc, #68]	; (8002064 <MX_USART3_UART_Init+0x58>)
 8002020:	2200      	movs	r2, #0
 8002022:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002024:	4b0f      	ldr	r3, [pc, #60]	; (8002064 <MX_USART3_UART_Init+0x58>)
 8002026:	2200      	movs	r2, #0
 8002028:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800202a:	4b0e      	ldr	r3, [pc, #56]	; (8002064 <MX_USART3_UART_Init+0x58>)
 800202c:	2200      	movs	r2, #0
 800202e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002030:	4b0c      	ldr	r3, [pc, #48]	; (8002064 <MX_USART3_UART_Init+0x58>)
 8002032:	220c      	movs	r2, #12
 8002034:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002036:	4b0b      	ldr	r3, [pc, #44]	; (8002064 <MX_USART3_UART_Init+0x58>)
 8002038:	2200      	movs	r2, #0
 800203a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800203c:	4b09      	ldr	r3, [pc, #36]	; (8002064 <MX_USART3_UART_Init+0x58>)
 800203e:	2200      	movs	r2, #0
 8002040:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002042:	4b08      	ldr	r3, [pc, #32]	; (8002064 <MX_USART3_UART_Init+0x58>)
 8002044:	2200      	movs	r2, #0
 8002046:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002048:	4b06      	ldr	r3, [pc, #24]	; (8002064 <MX_USART3_UART_Init+0x58>)
 800204a:	2200      	movs	r2, #0
 800204c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800204e:	4805      	ldr	r0, [pc, #20]	; (8002064 <MX_USART3_UART_Init+0x58>)
 8002050:	f003 ffd8 	bl	8006004 <HAL_UART_Init>
 8002054:	4603      	mov	r3, r0
 8002056:	2b00      	cmp	r3, #0
 8002058:	d001      	beq.n	800205e <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800205a:	f000 f917 	bl	800228c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800205e:	bf00      	nop
 8002060:	bd80      	pop	{r7, pc}
 8002062:	bf00      	nop
 8002064:	2000029c 	.word	0x2000029c
 8002068:	40004800 	.word	0x40004800

0800206c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	b08c      	sub	sp, #48	; 0x30
 8002070:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002072:	f107 031c 	add.w	r3, r7, #28
 8002076:	2200      	movs	r2, #0
 8002078:	601a      	str	r2, [r3, #0]
 800207a:	605a      	str	r2, [r3, #4]
 800207c:	609a      	str	r2, [r3, #8]
 800207e:	60da      	str	r2, [r3, #12]
 8002080:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002082:	4b7d      	ldr	r3, [pc, #500]	; (8002278 <MX_GPIO_Init+0x20c>)
 8002084:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002086:	4a7c      	ldr	r2, [pc, #496]	; (8002278 <MX_GPIO_Init+0x20c>)
 8002088:	f043 0304 	orr.w	r3, r3, #4
 800208c:	6313      	str	r3, [r2, #48]	; 0x30
 800208e:	4b7a      	ldr	r3, [pc, #488]	; (8002278 <MX_GPIO_Init+0x20c>)
 8002090:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002092:	f003 0304 	and.w	r3, r3, #4
 8002096:	61bb      	str	r3, [r7, #24]
 8002098:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800209a:	4b77      	ldr	r3, [pc, #476]	; (8002278 <MX_GPIO_Init+0x20c>)
 800209c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800209e:	4a76      	ldr	r2, [pc, #472]	; (8002278 <MX_GPIO_Init+0x20c>)
 80020a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80020a4:	6313      	str	r3, [r2, #48]	; 0x30
 80020a6:	4b74      	ldr	r3, [pc, #464]	; (8002278 <MX_GPIO_Init+0x20c>)
 80020a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020ae:	617b      	str	r3, [r7, #20]
 80020b0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80020b2:	4b71      	ldr	r3, [pc, #452]	; (8002278 <MX_GPIO_Init+0x20c>)
 80020b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020b6:	4a70      	ldr	r2, [pc, #448]	; (8002278 <MX_GPIO_Init+0x20c>)
 80020b8:	f043 0301 	orr.w	r3, r3, #1
 80020bc:	6313      	str	r3, [r2, #48]	; 0x30
 80020be:	4b6e      	ldr	r3, [pc, #440]	; (8002278 <MX_GPIO_Init+0x20c>)
 80020c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020c2:	f003 0301 	and.w	r3, r3, #1
 80020c6:	613b      	str	r3, [r7, #16]
 80020c8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80020ca:	4b6b      	ldr	r3, [pc, #428]	; (8002278 <MX_GPIO_Init+0x20c>)
 80020cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ce:	4a6a      	ldr	r2, [pc, #424]	; (8002278 <MX_GPIO_Init+0x20c>)
 80020d0:	f043 0302 	orr.w	r3, r3, #2
 80020d4:	6313      	str	r3, [r2, #48]	; 0x30
 80020d6:	4b68      	ldr	r3, [pc, #416]	; (8002278 <MX_GPIO_Init+0x20c>)
 80020d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020da:	f003 0302 	and.w	r3, r3, #2
 80020de:	60fb      	str	r3, [r7, #12]
 80020e0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80020e2:	4b65      	ldr	r3, [pc, #404]	; (8002278 <MX_GPIO_Init+0x20c>)
 80020e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020e6:	4a64      	ldr	r2, [pc, #400]	; (8002278 <MX_GPIO_Init+0x20c>)
 80020e8:	f043 0310 	orr.w	r3, r3, #16
 80020ec:	6313      	str	r3, [r2, #48]	; 0x30
 80020ee:	4b62      	ldr	r3, [pc, #392]	; (8002278 <MX_GPIO_Init+0x20c>)
 80020f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020f2:	f003 0310 	and.w	r3, r3, #16
 80020f6:	60bb      	str	r3, [r7, #8]
 80020f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80020fa:	4b5f      	ldr	r3, [pc, #380]	; (8002278 <MX_GPIO_Init+0x20c>)
 80020fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020fe:	4a5e      	ldr	r2, [pc, #376]	; (8002278 <MX_GPIO_Init+0x20c>)
 8002100:	f043 0308 	orr.w	r3, r3, #8
 8002104:	6313      	str	r3, [r2, #48]	; 0x30
 8002106:	4b5c      	ldr	r3, [pc, #368]	; (8002278 <MX_GPIO_Init+0x20c>)
 8002108:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800210a:	f003 0308 	and.w	r3, r3, #8
 800210e:	607b      	str	r3, [r7, #4]
 8002110:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002112:	4b59      	ldr	r3, [pc, #356]	; (8002278 <MX_GPIO_Init+0x20c>)
 8002114:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002116:	4a58      	ldr	r2, [pc, #352]	; (8002278 <MX_GPIO_Init+0x20c>)
 8002118:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800211c:	6313      	str	r3, [r2, #48]	; 0x30
 800211e:	4b56      	ldr	r3, [pc, #344]	; (8002278 <MX_GPIO_Init+0x20c>)
 8002120:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002122:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002126:	603b      	str	r3, [r7, #0]
 8002128:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800212a:	2200      	movs	r2, #0
 800212c:	f244 0181 	movw	r1, #16513	; 0x4081
 8002130:	4852      	ldr	r0, [pc, #328]	; (800227c <MX_GPIO_Init+0x210>)
 8002132:	f000 feb7 	bl	8002ea4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8002136:	2200      	movs	r2, #0
 8002138:	2140      	movs	r1, #64	; 0x40
 800213a:	4851      	ldr	r0, [pc, #324]	; (8002280 <MX_GPIO_Init+0x214>)
 800213c:	f000 feb2 	bl	8002ea4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8002140:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002144:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002146:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800214a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800214c:	2300      	movs	r3, #0
 800214e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8002150:	f107 031c 	add.w	r3, r7, #28
 8002154:	4619      	mov	r1, r3
 8002156:	484b      	ldr	r0, [pc, #300]	; (8002284 <MX_GPIO_Init+0x218>)
 8002158:	f000 fcf8 	bl	8002b4c <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800215c:	2332      	movs	r3, #50	; 0x32
 800215e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002160:	2302      	movs	r3, #2
 8002162:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002164:	2300      	movs	r3, #0
 8002166:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002168:	2303      	movs	r3, #3
 800216a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800216c:	230b      	movs	r3, #11
 800216e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002170:	f107 031c 	add.w	r3, r7, #28
 8002174:	4619      	mov	r1, r3
 8002176:	4843      	ldr	r0, [pc, #268]	; (8002284 <MX_GPIO_Init+0x218>)
 8002178:	f000 fce8 	bl	8002b4c <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 800217c:	2386      	movs	r3, #134	; 0x86
 800217e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002180:	2302      	movs	r3, #2
 8002182:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002184:	2300      	movs	r3, #0
 8002186:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002188:	2303      	movs	r3, #3
 800218a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800218c:	230b      	movs	r3, #11
 800218e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002190:	f107 031c 	add.w	r3, r7, #28
 8002194:	4619      	mov	r1, r3
 8002196:	483c      	ldr	r0, [pc, #240]	; (8002288 <MX_GPIO_Init+0x21c>)
 8002198:	f000 fcd8 	bl	8002b4c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 800219c:	f244 0381 	movw	r3, #16513	; 0x4081
 80021a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021a2:	2301      	movs	r3, #1
 80021a4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021a6:	2300      	movs	r3, #0
 80021a8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021aa:	2300      	movs	r3, #0
 80021ac:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021ae:	f107 031c 	add.w	r3, r7, #28
 80021b2:	4619      	mov	r1, r3
 80021b4:	4831      	ldr	r0, [pc, #196]	; (800227c <MX_GPIO_Init+0x210>)
 80021b6:	f000 fcc9 	bl	8002b4c <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80021ba:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80021be:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021c0:	2302      	movs	r3, #2
 80021c2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021c4:	2300      	movs	r3, #0
 80021c6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021c8:	2303      	movs	r3, #3
 80021ca:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80021cc:	230b      	movs	r3, #11
 80021ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80021d0:	f107 031c 	add.w	r3, r7, #28
 80021d4:	4619      	mov	r1, r3
 80021d6:	4829      	ldr	r0, [pc, #164]	; (800227c <MX_GPIO_Init+0x210>)
 80021d8:	f000 fcb8 	bl	8002b4c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80021dc:	2340      	movs	r3, #64	; 0x40
 80021de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021e0:	2301      	movs	r3, #1
 80021e2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021e4:	2300      	movs	r3, #0
 80021e6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021e8:	2300      	movs	r3, #0
 80021ea:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80021ec:	f107 031c 	add.w	r3, r7, #28
 80021f0:	4619      	mov	r1, r3
 80021f2:	4823      	ldr	r0, [pc, #140]	; (8002280 <MX_GPIO_Init+0x214>)
 80021f4:	f000 fcaa 	bl	8002b4c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80021f8:	2380      	movs	r3, #128	; 0x80
 80021fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80021fc:	2300      	movs	r3, #0
 80021fe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002200:	2300      	movs	r3, #0
 8002202:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8002204:	f107 031c 	add.w	r3, r7, #28
 8002208:	4619      	mov	r1, r3
 800220a:	481d      	ldr	r0, [pc, #116]	; (8002280 <MX_GPIO_Init+0x214>)
 800220c:	f000 fc9e 	bl	8002b4c <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8002210:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8002214:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002216:	2302      	movs	r3, #2
 8002218:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800221a:	2300      	movs	r3, #0
 800221c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800221e:	2303      	movs	r3, #3
 8002220:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8002222:	230a      	movs	r3, #10
 8002224:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002226:	f107 031c 	add.w	r3, r7, #28
 800222a:	4619      	mov	r1, r3
 800222c:	4816      	ldr	r0, [pc, #88]	; (8002288 <MX_GPIO_Init+0x21c>)
 800222e:	f000 fc8d 	bl	8002b4c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8002232:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002236:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002238:	2300      	movs	r3, #0
 800223a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800223c:	2300      	movs	r3, #0
 800223e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8002240:	f107 031c 	add.w	r3, r7, #28
 8002244:	4619      	mov	r1, r3
 8002246:	4810      	ldr	r0, [pc, #64]	; (8002288 <MX_GPIO_Init+0x21c>)
 8002248:	f000 fc80 	bl	8002b4c <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800224c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8002250:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002252:	2302      	movs	r3, #2
 8002254:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002256:	2300      	movs	r3, #0
 8002258:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800225a:	2303      	movs	r3, #3
 800225c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800225e:	230b      	movs	r3, #11
 8002260:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002262:	f107 031c 	add.w	r3, r7, #28
 8002266:	4619      	mov	r1, r3
 8002268:	4805      	ldr	r0, [pc, #20]	; (8002280 <MX_GPIO_Init+0x214>)
 800226a:	f000 fc6f 	bl	8002b4c <HAL_GPIO_Init>

}
 800226e:	bf00      	nop
 8002270:	3730      	adds	r7, #48	; 0x30
 8002272:	46bd      	mov	sp, r7
 8002274:	bd80      	pop	{r7, pc}
 8002276:	bf00      	nop
 8002278:	40023800 	.word	0x40023800
 800227c:	40020400 	.word	0x40020400
 8002280:	40021800 	.word	0x40021800
 8002284:	40020800 	.word	0x40020800
 8002288:	40020000 	.word	0x40020000

0800228c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800228c:	b480      	push	{r7}
 800228e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002290:	b672      	cpsid	i
}
 8002292:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002294:	e7fe      	b.n	8002294 <Error_Handler+0x8>
	...

08002298 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002298:	b480      	push	{r7}
 800229a:	b083      	sub	sp, #12
 800229c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800229e:	4b0f      	ldr	r3, [pc, #60]	; (80022dc <HAL_MspInit+0x44>)
 80022a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022a2:	4a0e      	ldr	r2, [pc, #56]	; (80022dc <HAL_MspInit+0x44>)
 80022a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022a8:	6413      	str	r3, [r2, #64]	; 0x40
 80022aa:	4b0c      	ldr	r3, [pc, #48]	; (80022dc <HAL_MspInit+0x44>)
 80022ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022b2:	607b      	str	r3, [r7, #4]
 80022b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022b6:	4b09      	ldr	r3, [pc, #36]	; (80022dc <HAL_MspInit+0x44>)
 80022b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022ba:	4a08      	ldr	r2, [pc, #32]	; (80022dc <HAL_MspInit+0x44>)
 80022bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80022c0:	6453      	str	r3, [r2, #68]	; 0x44
 80022c2:	4b06      	ldr	r3, [pc, #24]	; (80022dc <HAL_MspInit+0x44>)
 80022c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80022ca:	603b      	str	r3, [r7, #0]
 80022cc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80022ce:	bf00      	nop
 80022d0:	370c      	adds	r7, #12
 80022d2:	46bd      	mov	sp, r7
 80022d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d8:	4770      	bx	lr
 80022da:	bf00      	nop
 80022dc:	40023800 	.word	0x40023800

080022e0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b0ac      	sub	sp, #176	; 0xb0
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022e8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80022ec:	2200      	movs	r2, #0
 80022ee:	601a      	str	r2, [r3, #0]
 80022f0:	605a      	str	r2, [r3, #4]
 80022f2:	609a      	str	r2, [r3, #8]
 80022f4:	60da      	str	r2, [r3, #12]
 80022f6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80022f8:	f107 0318 	add.w	r3, r7, #24
 80022fc:	2284      	movs	r2, #132	; 0x84
 80022fe:	2100      	movs	r1, #0
 8002300:	4618      	mov	r0, r3
 8002302:	f004 fb87 	bl	8006a14 <memset>
  if(hi2c->Instance==I2C1)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	4a44      	ldr	r2, [pc, #272]	; (800241c <HAL_I2C_MspInit+0x13c>)
 800230c:	4293      	cmp	r3, r2
 800230e:	d13d      	bne.n	800238c <HAL_I2C_MspInit+0xac>
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002310:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002314:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8002316:	2300      	movs	r3, #0
 8002318:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800231a:	f107 0318 	add.w	r3, r7, #24
 800231e:	4618      	mov	r0, r3
 8002320:	f002 f970 	bl	8004604 <HAL_RCCEx_PeriphCLKConfig>
 8002324:	4603      	mov	r3, r0
 8002326:	2b00      	cmp	r3, #0
 8002328:	d001      	beq.n	800232e <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 800232a:	f7ff ffaf 	bl	800228c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800232e:	4b3c      	ldr	r3, [pc, #240]	; (8002420 <HAL_I2C_MspInit+0x140>)
 8002330:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002332:	4a3b      	ldr	r2, [pc, #236]	; (8002420 <HAL_I2C_MspInit+0x140>)
 8002334:	f043 0302 	orr.w	r3, r3, #2
 8002338:	6313      	str	r3, [r2, #48]	; 0x30
 800233a:	4b39      	ldr	r3, [pc, #228]	; (8002420 <HAL_I2C_MspInit+0x140>)
 800233c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800233e:	f003 0302 	and.w	r3, r3, #2
 8002342:	617b      	str	r3, [r7, #20]
 8002344:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 8002346:	f44f 7310 	mov.w	r3, #576	; 0x240
 800234a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800234e:	2312      	movs	r3, #18
 8002350:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002354:	2300      	movs	r3, #0
 8002356:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800235a:	2303      	movs	r3, #3
 800235c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002360:	2304      	movs	r3, #4
 8002362:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002366:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800236a:	4619      	mov	r1, r3
 800236c:	482d      	ldr	r0, [pc, #180]	; (8002424 <HAL_I2C_MspInit+0x144>)
 800236e:	f000 fbed 	bl	8002b4c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002372:	4b2b      	ldr	r3, [pc, #172]	; (8002420 <HAL_I2C_MspInit+0x140>)
 8002374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002376:	4a2a      	ldr	r2, [pc, #168]	; (8002420 <HAL_I2C_MspInit+0x140>)
 8002378:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800237c:	6413      	str	r3, [r2, #64]	; 0x40
 800237e:	4b28      	ldr	r3, [pc, #160]	; (8002420 <HAL_I2C_MspInit+0x140>)
 8002380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002382:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002386:	613b      	str	r3, [r7, #16]
 8002388:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }

}
 800238a:	e042      	b.n	8002412 <HAL_I2C_MspInit+0x132>
  else if(hi2c->Instance==I2C4)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	4a25      	ldr	r2, [pc, #148]	; (8002428 <HAL_I2C_MspInit+0x148>)
 8002392:	4293      	cmp	r3, r2
 8002394:	d13d      	bne.n	8002412 <HAL_I2C_MspInit+0x132>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 8002396:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800239a:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_PCLK1;
 800239c:	2300      	movs	r3, #0
 800239e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80023a2:	f107 0318 	add.w	r3, r7, #24
 80023a6:	4618      	mov	r0, r3
 80023a8:	f002 f92c 	bl	8004604 <HAL_RCCEx_PeriphCLKConfig>
 80023ac:	4603      	mov	r3, r0
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d001      	beq.n	80023b6 <HAL_I2C_MspInit+0xd6>
      Error_Handler();
 80023b2:	f7ff ff6b 	bl	800228c <Error_Handler>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80023b6:	4b1a      	ldr	r3, [pc, #104]	; (8002420 <HAL_I2C_MspInit+0x140>)
 80023b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ba:	4a19      	ldr	r2, [pc, #100]	; (8002420 <HAL_I2C_MspInit+0x140>)
 80023bc:	f043 0308 	orr.w	r3, r3, #8
 80023c0:	6313      	str	r3, [r2, #48]	; 0x30
 80023c2:	4b17      	ldr	r3, [pc, #92]	; (8002420 <HAL_I2C_MspInit+0x140>)
 80023c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023c6:	f003 0308 	and.w	r3, r3, #8
 80023ca:	60fb      	str	r3, [r7, #12]
 80023cc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 80023ce:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80023d2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80023d6:	2312      	movs	r3, #18
 80023d8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023dc:	2300      	movs	r3, #0
 80023de:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023e2:	2303      	movs	r3, #3
 80023e4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 80023e8:	2304      	movs	r3, #4
 80023ea:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80023ee:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80023f2:	4619      	mov	r1, r3
 80023f4:	480d      	ldr	r0, [pc, #52]	; (800242c <HAL_I2C_MspInit+0x14c>)
 80023f6:	f000 fba9 	bl	8002b4c <HAL_GPIO_Init>
    __HAL_RCC_I2C4_CLK_ENABLE();
 80023fa:	4b09      	ldr	r3, [pc, #36]	; (8002420 <HAL_I2C_MspInit+0x140>)
 80023fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023fe:	4a08      	ldr	r2, [pc, #32]	; (8002420 <HAL_I2C_MspInit+0x140>)
 8002400:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002404:	6413      	str	r3, [r2, #64]	; 0x40
 8002406:	4b06      	ldr	r3, [pc, #24]	; (8002420 <HAL_I2C_MspInit+0x140>)
 8002408:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800240a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800240e:	60bb      	str	r3, [r7, #8]
 8002410:	68bb      	ldr	r3, [r7, #8]
}
 8002412:	bf00      	nop
 8002414:	37b0      	adds	r7, #176	; 0xb0
 8002416:	46bd      	mov	sp, r7
 8002418:	bd80      	pop	{r7, pc}
 800241a:	bf00      	nop
 800241c:	40005400 	.word	0x40005400
 8002420:	40023800 	.word	0x40023800
 8002424:	40020400 	.word	0x40020400
 8002428:	40006000 	.word	0x40006000
 800242c:	40020c00 	.word	0x40020c00

08002430 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	b08a      	sub	sp, #40	; 0x28
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002438:	f107 0314 	add.w	r3, r7, #20
 800243c:	2200      	movs	r2, #0
 800243e:	601a      	str	r2, [r3, #0]
 8002440:	605a      	str	r2, [r3, #4]
 8002442:	609a      	str	r2, [r3, #8]
 8002444:	60da      	str	r2, [r3, #12]
 8002446:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	4a17      	ldr	r2, [pc, #92]	; (80024ac <HAL_TIM_Encoder_MspInit+0x7c>)
 800244e:	4293      	cmp	r3, r2
 8002450:	d128      	bne.n	80024a4 <HAL_TIM_Encoder_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002452:	4b17      	ldr	r3, [pc, #92]	; (80024b0 <HAL_TIM_Encoder_MspInit+0x80>)
 8002454:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002456:	4a16      	ldr	r2, [pc, #88]	; (80024b0 <HAL_TIM_Encoder_MspInit+0x80>)
 8002458:	f043 0301 	orr.w	r3, r3, #1
 800245c:	6453      	str	r3, [r2, #68]	; 0x44
 800245e:	4b14      	ldr	r3, [pc, #80]	; (80024b0 <HAL_TIM_Encoder_MspInit+0x80>)
 8002460:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002462:	f003 0301 	and.w	r3, r3, #1
 8002466:	613b      	str	r3, [r7, #16]
 8002468:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800246a:	4b11      	ldr	r3, [pc, #68]	; (80024b0 <HAL_TIM_Encoder_MspInit+0x80>)
 800246c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800246e:	4a10      	ldr	r2, [pc, #64]	; (80024b0 <HAL_TIM_Encoder_MspInit+0x80>)
 8002470:	f043 0310 	orr.w	r3, r3, #16
 8002474:	6313      	str	r3, [r2, #48]	; 0x30
 8002476:	4b0e      	ldr	r3, [pc, #56]	; (80024b0 <HAL_TIM_Encoder_MspInit+0x80>)
 8002478:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800247a:	f003 0310 	and.w	r3, r3, #16
 800247e:	60fb      	str	r3, [r7, #12]
 8002480:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 8002482:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8002486:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002488:	2302      	movs	r3, #2
 800248a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800248c:	2300      	movs	r3, #0
 800248e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002490:	2300      	movs	r3, #0
 8002492:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002494:	2301      	movs	r3, #1
 8002496:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002498:	f107 0314 	add.w	r3, r7, #20
 800249c:	4619      	mov	r1, r3
 800249e:	4805      	ldr	r0, [pc, #20]	; (80024b4 <HAL_TIM_Encoder_MspInit+0x84>)
 80024a0:	f000 fb54 	bl	8002b4c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80024a4:	bf00      	nop
 80024a6:	3728      	adds	r7, #40	; 0x28
 80024a8:	46bd      	mov	sp, r7
 80024aa:	bd80      	pop	{r7, pc}
 80024ac:	40010000 	.word	0x40010000
 80024b0:	40023800 	.word	0x40023800
 80024b4:	40021000 	.word	0x40021000

080024b8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80024b8:	b480      	push	{r7}
 80024ba:	b085      	sub	sp, #20
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	4a0a      	ldr	r2, [pc, #40]	; (80024f0 <HAL_TIM_Base_MspInit+0x38>)
 80024c6:	4293      	cmp	r3, r2
 80024c8:	d10b      	bne.n	80024e2 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80024ca:	4b0a      	ldr	r3, [pc, #40]	; (80024f4 <HAL_TIM_Base_MspInit+0x3c>)
 80024cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ce:	4a09      	ldr	r2, [pc, #36]	; (80024f4 <HAL_TIM_Base_MspInit+0x3c>)
 80024d0:	f043 0302 	orr.w	r3, r3, #2
 80024d4:	6413      	str	r3, [r2, #64]	; 0x40
 80024d6:	4b07      	ldr	r3, [pc, #28]	; (80024f4 <HAL_TIM_Base_MspInit+0x3c>)
 80024d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024da:	f003 0302 	and.w	r3, r3, #2
 80024de:	60fb      	str	r3, [r7, #12]
 80024e0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80024e2:	bf00      	nop
 80024e4:	3714      	adds	r7, #20
 80024e6:	46bd      	mov	sp, r7
 80024e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ec:	4770      	bx	lr
 80024ee:	bf00      	nop
 80024f0:	40000400 	.word	0x40000400
 80024f4:	40023800 	.word	0x40023800

080024f8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b088      	sub	sp, #32
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002500:	f107 030c 	add.w	r3, r7, #12
 8002504:	2200      	movs	r2, #0
 8002506:	601a      	str	r2, [r3, #0]
 8002508:	605a      	str	r2, [r3, #4]
 800250a:	609a      	str	r2, [r3, #8]
 800250c:	60da      	str	r2, [r3, #12]
 800250e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	4a11      	ldr	r2, [pc, #68]	; (800255c <HAL_TIM_MspPostInit+0x64>)
 8002516:	4293      	cmp	r3, r2
 8002518:	d11b      	bne.n	8002552 <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800251a:	4b11      	ldr	r3, [pc, #68]	; (8002560 <HAL_TIM_MspPostInit+0x68>)
 800251c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800251e:	4a10      	ldr	r2, [pc, #64]	; (8002560 <HAL_TIM_MspPostInit+0x68>)
 8002520:	f043 0301 	orr.w	r3, r3, #1
 8002524:	6313      	str	r3, [r2, #48]	; 0x30
 8002526:	4b0e      	ldr	r3, [pc, #56]	; (8002560 <HAL_TIM_MspPostInit+0x68>)
 8002528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800252a:	f003 0301 	and.w	r3, r3, #1
 800252e:	60bb      	str	r3, [r7, #8]
 8002530:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002532:	2340      	movs	r3, #64	; 0x40
 8002534:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002536:	2302      	movs	r3, #2
 8002538:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800253a:	2300      	movs	r3, #0
 800253c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800253e:	2300      	movs	r3, #0
 8002540:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002542:	2302      	movs	r3, #2
 8002544:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002546:	f107 030c 	add.w	r3, r7, #12
 800254a:	4619      	mov	r1, r3
 800254c:	4805      	ldr	r0, [pc, #20]	; (8002564 <HAL_TIM_MspPostInit+0x6c>)
 800254e:	f000 fafd 	bl	8002b4c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002552:	bf00      	nop
 8002554:	3720      	adds	r7, #32
 8002556:	46bd      	mov	sp, r7
 8002558:	bd80      	pop	{r7, pc}
 800255a:	bf00      	nop
 800255c:	40000400 	.word	0x40000400
 8002560:	40023800 	.word	0x40023800
 8002564:	40020000 	.word	0x40020000

08002568 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	b0aa      	sub	sp, #168	; 0xa8
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002570:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002574:	2200      	movs	r2, #0
 8002576:	601a      	str	r2, [r3, #0]
 8002578:	605a      	str	r2, [r3, #4]
 800257a:	609a      	str	r2, [r3, #8]
 800257c:	60da      	str	r2, [r3, #12]
 800257e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002580:	f107 0310 	add.w	r3, r7, #16
 8002584:	2284      	movs	r2, #132	; 0x84
 8002586:	2100      	movs	r1, #0
 8002588:	4618      	mov	r0, r3
 800258a:	f004 fa43 	bl	8006a14 <memset>
  if(huart->Instance==USART3)
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	4a22      	ldr	r2, [pc, #136]	; (800261c <HAL_UART_MspInit+0xb4>)
 8002594:	4293      	cmp	r3, r2
 8002596:	d13c      	bne.n	8002612 <HAL_UART_MspInit+0xaa>
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002598:	f44f 7380 	mov.w	r3, #256	; 0x100
 800259c:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800259e:	2300      	movs	r3, #0
 80025a0:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80025a2:	f107 0310 	add.w	r3, r7, #16
 80025a6:	4618      	mov	r0, r3
 80025a8:	f002 f82c 	bl	8004604 <HAL_RCCEx_PeriphCLKConfig>
 80025ac:	4603      	mov	r3, r0
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d001      	beq.n	80025b6 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80025b2:	f7ff fe6b 	bl	800228c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80025b6:	4b1a      	ldr	r3, [pc, #104]	; (8002620 <HAL_UART_MspInit+0xb8>)
 80025b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ba:	4a19      	ldr	r2, [pc, #100]	; (8002620 <HAL_UART_MspInit+0xb8>)
 80025bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80025c0:	6413      	str	r3, [r2, #64]	; 0x40
 80025c2:	4b17      	ldr	r3, [pc, #92]	; (8002620 <HAL_UART_MspInit+0xb8>)
 80025c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025c6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80025ca:	60fb      	str	r3, [r7, #12]
 80025cc:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80025ce:	4b14      	ldr	r3, [pc, #80]	; (8002620 <HAL_UART_MspInit+0xb8>)
 80025d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025d2:	4a13      	ldr	r2, [pc, #76]	; (8002620 <HAL_UART_MspInit+0xb8>)
 80025d4:	f043 0308 	orr.w	r3, r3, #8
 80025d8:	6313      	str	r3, [r2, #48]	; 0x30
 80025da:	4b11      	ldr	r3, [pc, #68]	; (8002620 <HAL_UART_MspInit+0xb8>)
 80025dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025de:	f003 0308 	and.w	r3, r3, #8
 80025e2:	60bb      	str	r3, [r7, #8]
 80025e4:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80025e6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80025ea:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025ee:	2302      	movs	r3, #2
 80025f0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025f4:	2300      	movs	r3, #0
 80025f6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025fa:	2303      	movs	r3, #3
 80025fc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002600:	2307      	movs	r3, #7
 8002602:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002606:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800260a:	4619      	mov	r1, r3
 800260c:	4805      	ldr	r0, [pc, #20]	; (8002624 <HAL_UART_MspInit+0xbc>)
 800260e:	f000 fa9d 	bl	8002b4c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002612:	bf00      	nop
 8002614:	37a8      	adds	r7, #168	; 0xa8
 8002616:	46bd      	mov	sp, r7
 8002618:	bd80      	pop	{r7, pc}
 800261a:	bf00      	nop
 800261c:	40004800 	.word	0x40004800
 8002620:	40023800 	.word	0x40023800
 8002624:	40020c00 	.word	0x40020c00

08002628 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002628:	b480      	push	{r7}
 800262a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800262c:	e7fe      	b.n	800262c <NMI_Handler+0x4>

0800262e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800262e:	b480      	push	{r7}
 8002630:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002632:	e7fe      	b.n	8002632 <HardFault_Handler+0x4>

08002634 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002634:	b480      	push	{r7}
 8002636:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002638:	e7fe      	b.n	8002638 <MemManage_Handler+0x4>

0800263a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800263a:	b480      	push	{r7}
 800263c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800263e:	e7fe      	b.n	800263e <BusFault_Handler+0x4>

08002640 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002640:	b480      	push	{r7}
 8002642:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002644:	e7fe      	b.n	8002644 <UsageFault_Handler+0x4>

08002646 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002646:	b480      	push	{r7}
 8002648:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800264a:	bf00      	nop
 800264c:	46bd      	mov	sp, r7
 800264e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002652:	4770      	bx	lr

08002654 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002654:	b480      	push	{r7}
 8002656:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002658:	bf00      	nop
 800265a:	46bd      	mov	sp, r7
 800265c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002660:	4770      	bx	lr

08002662 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002662:	b480      	push	{r7}
 8002664:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002666:	bf00      	nop
 8002668:	46bd      	mov	sp, r7
 800266a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266e:	4770      	bx	lr

08002670 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002674:	f000 f940 	bl	80028f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002678:	bf00      	nop
 800267a:	bd80      	pop	{r7, pc}

0800267c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800267c:	b480      	push	{r7}
 800267e:	af00      	add	r7, sp, #0
	return 1;
 8002680:	2301      	movs	r3, #1
}
 8002682:	4618      	mov	r0, r3
 8002684:	46bd      	mov	sp, r7
 8002686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268a:	4770      	bx	lr

0800268c <_kill>:

int _kill(int pid, int sig)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	b082      	sub	sp, #8
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
 8002694:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002696:	f004 f993 	bl	80069c0 <__errno>
 800269a:	4603      	mov	r3, r0
 800269c:	2216      	movs	r2, #22
 800269e:	601a      	str	r2, [r3, #0]
	return -1;
 80026a0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80026a4:	4618      	mov	r0, r3
 80026a6:	3708      	adds	r7, #8
 80026a8:	46bd      	mov	sp, r7
 80026aa:	bd80      	pop	{r7, pc}

080026ac <_exit>:

void _exit (int status)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b082      	sub	sp, #8
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80026b4:	f04f 31ff 	mov.w	r1, #4294967295
 80026b8:	6878      	ldr	r0, [r7, #4]
 80026ba:	f7ff ffe7 	bl	800268c <_kill>
	while (1) {}		/* Make sure we hang here */
 80026be:	e7fe      	b.n	80026be <_exit+0x12>

080026c0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b086      	sub	sp, #24
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	60f8      	str	r0, [r7, #12]
 80026c8:	60b9      	str	r1, [r7, #8]
 80026ca:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80026cc:	2300      	movs	r3, #0
 80026ce:	617b      	str	r3, [r7, #20]
 80026d0:	e00a      	b.n	80026e8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80026d2:	f3af 8000 	nop.w
 80026d6:	4601      	mov	r1, r0
 80026d8:	68bb      	ldr	r3, [r7, #8]
 80026da:	1c5a      	adds	r2, r3, #1
 80026dc:	60ba      	str	r2, [r7, #8]
 80026de:	b2ca      	uxtb	r2, r1
 80026e0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80026e2:	697b      	ldr	r3, [r7, #20]
 80026e4:	3301      	adds	r3, #1
 80026e6:	617b      	str	r3, [r7, #20]
 80026e8:	697a      	ldr	r2, [r7, #20]
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	429a      	cmp	r2, r3
 80026ee:	dbf0      	blt.n	80026d2 <_read+0x12>
	}

return len;
 80026f0:	687b      	ldr	r3, [r7, #4]
}
 80026f2:	4618      	mov	r0, r3
 80026f4:	3718      	adds	r7, #24
 80026f6:	46bd      	mov	sp, r7
 80026f8:	bd80      	pop	{r7, pc}

080026fa <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80026fa:	b580      	push	{r7, lr}
 80026fc:	b086      	sub	sp, #24
 80026fe:	af00      	add	r7, sp, #0
 8002700:	60f8      	str	r0, [r7, #12]
 8002702:	60b9      	str	r1, [r7, #8]
 8002704:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002706:	2300      	movs	r3, #0
 8002708:	617b      	str	r3, [r7, #20]
 800270a:	e009      	b.n	8002720 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800270c:	68bb      	ldr	r3, [r7, #8]
 800270e:	1c5a      	adds	r2, r3, #1
 8002710:	60ba      	str	r2, [r7, #8]
 8002712:	781b      	ldrb	r3, [r3, #0]
 8002714:	4618      	mov	r0, r3
 8002716:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800271a:	697b      	ldr	r3, [r7, #20]
 800271c:	3301      	adds	r3, #1
 800271e:	617b      	str	r3, [r7, #20]
 8002720:	697a      	ldr	r2, [r7, #20]
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	429a      	cmp	r2, r3
 8002726:	dbf1      	blt.n	800270c <_write+0x12>
	}
	return len;
 8002728:	687b      	ldr	r3, [r7, #4]
}
 800272a:	4618      	mov	r0, r3
 800272c:	3718      	adds	r7, #24
 800272e:	46bd      	mov	sp, r7
 8002730:	bd80      	pop	{r7, pc}

08002732 <_close>:

int _close(int file)
{
 8002732:	b480      	push	{r7}
 8002734:	b083      	sub	sp, #12
 8002736:	af00      	add	r7, sp, #0
 8002738:	6078      	str	r0, [r7, #4]
	return -1;
 800273a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800273e:	4618      	mov	r0, r3
 8002740:	370c      	adds	r7, #12
 8002742:	46bd      	mov	sp, r7
 8002744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002748:	4770      	bx	lr

0800274a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800274a:	b480      	push	{r7}
 800274c:	b083      	sub	sp, #12
 800274e:	af00      	add	r7, sp, #0
 8002750:	6078      	str	r0, [r7, #4]
 8002752:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002754:	683b      	ldr	r3, [r7, #0]
 8002756:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800275a:	605a      	str	r2, [r3, #4]
	return 0;
 800275c:	2300      	movs	r3, #0
}
 800275e:	4618      	mov	r0, r3
 8002760:	370c      	adds	r7, #12
 8002762:	46bd      	mov	sp, r7
 8002764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002768:	4770      	bx	lr

0800276a <_isatty>:

int _isatty(int file)
{
 800276a:	b480      	push	{r7}
 800276c:	b083      	sub	sp, #12
 800276e:	af00      	add	r7, sp, #0
 8002770:	6078      	str	r0, [r7, #4]
	return 1;
 8002772:	2301      	movs	r3, #1
}
 8002774:	4618      	mov	r0, r3
 8002776:	370c      	adds	r7, #12
 8002778:	46bd      	mov	sp, r7
 800277a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277e:	4770      	bx	lr

08002780 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002780:	b480      	push	{r7}
 8002782:	b085      	sub	sp, #20
 8002784:	af00      	add	r7, sp, #0
 8002786:	60f8      	str	r0, [r7, #12]
 8002788:	60b9      	str	r1, [r7, #8]
 800278a:	607a      	str	r2, [r7, #4]
	return 0;
 800278c:	2300      	movs	r3, #0
}
 800278e:	4618      	mov	r0, r3
 8002790:	3714      	adds	r7, #20
 8002792:	46bd      	mov	sp, r7
 8002794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002798:	4770      	bx	lr
	...

0800279c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800279c:	b580      	push	{r7, lr}
 800279e:	b086      	sub	sp, #24
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80027a4:	4a14      	ldr	r2, [pc, #80]	; (80027f8 <_sbrk+0x5c>)
 80027a6:	4b15      	ldr	r3, [pc, #84]	; (80027fc <_sbrk+0x60>)
 80027a8:	1ad3      	subs	r3, r2, r3
 80027aa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80027ac:	697b      	ldr	r3, [r7, #20]
 80027ae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80027b0:	4b13      	ldr	r3, [pc, #76]	; (8002800 <_sbrk+0x64>)
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d102      	bne.n	80027be <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80027b8:	4b11      	ldr	r3, [pc, #68]	; (8002800 <_sbrk+0x64>)
 80027ba:	4a12      	ldr	r2, [pc, #72]	; (8002804 <_sbrk+0x68>)
 80027bc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80027be:	4b10      	ldr	r3, [pc, #64]	; (8002800 <_sbrk+0x64>)
 80027c0:	681a      	ldr	r2, [r3, #0]
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	4413      	add	r3, r2
 80027c6:	693a      	ldr	r2, [r7, #16]
 80027c8:	429a      	cmp	r2, r3
 80027ca:	d207      	bcs.n	80027dc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80027cc:	f004 f8f8 	bl	80069c0 <__errno>
 80027d0:	4603      	mov	r3, r0
 80027d2:	220c      	movs	r2, #12
 80027d4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80027d6:	f04f 33ff 	mov.w	r3, #4294967295
 80027da:	e009      	b.n	80027f0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80027dc:	4b08      	ldr	r3, [pc, #32]	; (8002800 <_sbrk+0x64>)
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80027e2:	4b07      	ldr	r3, [pc, #28]	; (8002800 <_sbrk+0x64>)
 80027e4:	681a      	ldr	r2, [r3, #0]
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	4413      	add	r3, r2
 80027ea:	4a05      	ldr	r2, [pc, #20]	; (8002800 <_sbrk+0x64>)
 80027ec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80027ee:	68fb      	ldr	r3, [r7, #12]
}
 80027f0:	4618      	mov	r0, r3
 80027f2:	3718      	adds	r7, #24
 80027f4:	46bd      	mov	sp, r7
 80027f6:	bd80      	pop	{r7, pc}
 80027f8:	20050000 	.word	0x20050000
 80027fc:	00000400 	.word	0x00000400
 8002800:	2000021c 	.word	0x2000021c
 8002804:	20000458 	.word	0x20000458

08002808 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002808:	b480      	push	{r7}
 800280a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800280c:	4b06      	ldr	r3, [pc, #24]	; (8002828 <SystemInit+0x20>)
 800280e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002812:	4a05      	ldr	r2, [pc, #20]	; (8002828 <SystemInit+0x20>)
 8002814:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002818:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800281c:	bf00      	nop
 800281e:	46bd      	mov	sp, r7
 8002820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002824:	4770      	bx	lr
 8002826:	bf00      	nop
 8002828:	e000ed00 	.word	0xe000ed00

0800282c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800282c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002864 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002830:	480d      	ldr	r0, [pc, #52]	; (8002868 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002832:	490e      	ldr	r1, [pc, #56]	; (800286c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002834:	4a0e      	ldr	r2, [pc, #56]	; (8002870 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002836:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002838:	e002      	b.n	8002840 <LoopCopyDataInit>

0800283a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800283a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800283c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800283e:	3304      	adds	r3, #4

08002840 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002840:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002842:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002844:	d3f9      	bcc.n	800283a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002846:	4a0b      	ldr	r2, [pc, #44]	; (8002874 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002848:	4c0b      	ldr	r4, [pc, #44]	; (8002878 <LoopFillZerobss+0x26>)
  movs r3, #0
 800284a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800284c:	e001      	b.n	8002852 <LoopFillZerobss>

0800284e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800284e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002850:	3204      	adds	r2, #4

08002852 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002852:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002854:	d3fb      	bcc.n	800284e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002856:	f7ff ffd7 	bl	8002808 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800285a:	f004 f8b7 	bl	80069cc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800285e:	f7ff f957 	bl	8001b10 <main>
  bx  lr    
 8002862:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002864:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8002868:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800286c:	200001f8 	.word	0x200001f8
  ldr r2, =_sidata
 8002870:	08009ba4 	.word	0x08009ba4
  ldr r2, =_sbss
 8002874:	200001f8 	.word	0x200001f8
  ldr r4, =_ebss
 8002878:	20000458 	.word	0x20000458

0800287c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800287c:	e7fe      	b.n	800287c <ADC_IRQHandler>

0800287e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800287e:	b580      	push	{r7, lr}
 8002880:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002882:	2003      	movs	r0, #3
 8002884:	f000 f92e 	bl	8002ae4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002888:	2000      	movs	r0, #0
 800288a:	f000 f805 	bl	8002898 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800288e:	f7ff fd03 	bl	8002298 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002892:	2300      	movs	r3, #0
}
 8002894:	4618      	mov	r0, r3
 8002896:	bd80      	pop	{r7, pc}

08002898 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002898:	b580      	push	{r7, lr}
 800289a:	b082      	sub	sp, #8
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80028a0:	4b12      	ldr	r3, [pc, #72]	; (80028ec <HAL_InitTick+0x54>)
 80028a2:	681a      	ldr	r2, [r3, #0]
 80028a4:	4b12      	ldr	r3, [pc, #72]	; (80028f0 <HAL_InitTick+0x58>)
 80028a6:	781b      	ldrb	r3, [r3, #0]
 80028a8:	4619      	mov	r1, r3
 80028aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80028ae:	fbb3 f3f1 	udiv	r3, r3, r1
 80028b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80028b6:	4618      	mov	r0, r3
 80028b8:	f000 f93b 	bl	8002b32 <HAL_SYSTICK_Config>
 80028bc:	4603      	mov	r3, r0
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d001      	beq.n	80028c6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80028c2:	2301      	movs	r3, #1
 80028c4:	e00e      	b.n	80028e4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	2b0f      	cmp	r3, #15
 80028ca:	d80a      	bhi.n	80028e2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80028cc:	2200      	movs	r2, #0
 80028ce:	6879      	ldr	r1, [r7, #4]
 80028d0:	f04f 30ff 	mov.w	r0, #4294967295
 80028d4:	f000 f911 	bl	8002afa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80028d8:	4a06      	ldr	r2, [pc, #24]	; (80028f4 <HAL_InitTick+0x5c>)
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80028de:	2300      	movs	r3, #0
 80028e0:	e000      	b.n	80028e4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80028e2:	2301      	movs	r3, #1
}
 80028e4:	4618      	mov	r0, r3
 80028e6:	3708      	adds	r7, #8
 80028e8:	46bd      	mov	sp, r7
 80028ea:	bd80      	pop	{r7, pc}
 80028ec:	2000001c 	.word	0x2000001c
 80028f0:	20000024 	.word	0x20000024
 80028f4:	20000020 	.word	0x20000020

080028f8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80028f8:	b480      	push	{r7}
 80028fa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80028fc:	4b06      	ldr	r3, [pc, #24]	; (8002918 <HAL_IncTick+0x20>)
 80028fe:	781b      	ldrb	r3, [r3, #0]
 8002900:	461a      	mov	r2, r3
 8002902:	4b06      	ldr	r3, [pc, #24]	; (800291c <HAL_IncTick+0x24>)
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	4413      	add	r3, r2
 8002908:	4a04      	ldr	r2, [pc, #16]	; (800291c <HAL_IncTick+0x24>)
 800290a:	6013      	str	r3, [r2, #0]
}
 800290c:	bf00      	nop
 800290e:	46bd      	mov	sp, r7
 8002910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002914:	4770      	bx	lr
 8002916:	bf00      	nop
 8002918:	20000024 	.word	0x20000024
 800291c:	20000444 	.word	0x20000444

08002920 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002920:	b480      	push	{r7}
 8002922:	af00      	add	r7, sp, #0
  return uwTick;
 8002924:	4b03      	ldr	r3, [pc, #12]	; (8002934 <HAL_GetTick+0x14>)
 8002926:	681b      	ldr	r3, [r3, #0]
}
 8002928:	4618      	mov	r0, r3
 800292a:	46bd      	mov	sp, r7
 800292c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002930:	4770      	bx	lr
 8002932:	bf00      	nop
 8002934:	20000444 	.word	0x20000444

08002938 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	b084      	sub	sp, #16
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002940:	f7ff ffee 	bl	8002920 <HAL_GetTick>
 8002944:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002950:	d005      	beq.n	800295e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002952:	4b0a      	ldr	r3, [pc, #40]	; (800297c <HAL_Delay+0x44>)
 8002954:	781b      	ldrb	r3, [r3, #0]
 8002956:	461a      	mov	r2, r3
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	4413      	add	r3, r2
 800295c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800295e:	bf00      	nop
 8002960:	f7ff ffde 	bl	8002920 <HAL_GetTick>
 8002964:	4602      	mov	r2, r0
 8002966:	68bb      	ldr	r3, [r7, #8]
 8002968:	1ad3      	subs	r3, r2, r3
 800296a:	68fa      	ldr	r2, [r7, #12]
 800296c:	429a      	cmp	r2, r3
 800296e:	d8f7      	bhi.n	8002960 <HAL_Delay+0x28>
  {
  }
}
 8002970:	bf00      	nop
 8002972:	bf00      	nop
 8002974:	3710      	adds	r7, #16
 8002976:	46bd      	mov	sp, r7
 8002978:	bd80      	pop	{r7, pc}
 800297a:	bf00      	nop
 800297c:	20000024 	.word	0x20000024

08002980 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002980:	b480      	push	{r7}
 8002982:	b085      	sub	sp, #20
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	f003 0307 	and.w	r3, r3, #7
 800298e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002990:	4b0b      	ldr	r3, [pc, #44]	; (80029c0 <__NVIC_SetPriorityGrouping+0x40>)
 8002992:	68db      	ldr	r3, [r3, #12]
 8002994:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002996:	68ba      	ldr	r2, [r7, #8]
 8002998:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800299c:	4013      	ands	r3, r2
 800299e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80029a4:	68bb      	ldr	r3, [r7, #8]
 80029a6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80029a8:	4b06      	ldr	r3, [pc, #24]	; (80029c4 <__NVIC_SetPriorityGrouping+0x44>)
 80029aa:	4313      	orrs	r3, r2
 80029ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80029ae:	4a04      	ldr	r2, [pc, #16]	; (80029c0 <__NVIC_SetPriorityGrouping+0x40>)
 80029b0:	68bb      	ldr	r3, [r7, #8]
 80029b2:	60d3      	str	r3, [r2, #12]
}
 80029b4:	bf00      	nop
 80029b6:	3714      	adds	r7, #20
 80029b8:	46bd      	mov	sp, r7
 80029ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029be:	4770      	bx	lr
 80029c0:	e000ed00 	.word	0xe000ed00
 80029c4:	05fa0000 	.word	0x05fa0000

080029c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80029c8:	b480      	push	{r7}
 80029ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80029cc:	4b04      	ldr	r3, [pc, #16]	; (80029e0 <__NVIC_GetPriorityGrouping+0x18>)
 80029ce:	68db      	ldr	r3, [r3, #12]
 80029d0:	0a1b      	lsrs	r3, r3, #8
 80029d2:	f003 0307 	and.w	r3, r3, #7
}
 80029d6:	4618      	mov	r0, r3
 80029d8:	46bd      	mov	sp, r7
 80029da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029de:	4770      	bx	lr
 80029e0:	e000ed00 	.word	0xe000ed00

080029e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80029e4:	b480      	push	{r7}
 80029e6:	b083      	sub	sp, #12
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	4603      	mov	r3, r0
 80029ec:	6039      	str	r1, [r7, #0]
 80029ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80029f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	db0a      	blt.n	8002a0e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029f8:	683b      	ldr	r3, [r7, #0]
 80029fa:	b2da      	uxtb	r2, r3
 80029fc:	490c      	ldr	r1, [pc, #48]	; (8002a30 <__NVIC_SetPriority+0x4c>)
 80029fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a02:	0112      	lsls	r2, r2, #4
 8002a04:	b2d2      	uxtb	r2, r2
 8002a06:	440b      	add	r3, r1
 8002a08:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002a0c:	e00a      	b.n	8002a24 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a0e:	683b      	ldr	r3, [r7, #0]
 8002a10:	b2da      	uxtb	r2, r3
 8002a12:	4908      	ldr	r1, [pc, #32]	; (8002a34 <__NVIC_SetPriority+0x50>)
 8002a14:	79fb      	ldrb	r3, [r7, #7]
 8002a16:	f003 030f 	and.w	r3, r3, #15
 8002a1a:	3b04      	subs	r3, #4
 8002a1c:	0112      	lsls	r2, r2, #4
 8002a1e:	b2d2      	uxtb	r2, r2
 8002a20:	440b      	add	r3, r1
 8002a22:	761a      	strb	r2, [r3, #24]
}
 8002a24:	bf00      	nop
 8002a26:	370c      	adds	r7, #12
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2e:	4770      	bx	lr
 8002a30:	e000e100 	.word	0xe000e100
 8002a34:	e000ed00 	.word	0xe000ed00

08002a38 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a38:	b480      	push	{r7}
 8002a3a:	b089      	sub	sp, #36	; 0x24
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	60f8      	str	r0, [r7, #12]
 8002a40:	60b9      	str	r1, [r7, #8]
 8002a42:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	f003 0307 	and.w	r3, r3, #7
 8002a4a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002a4c:	69fb      	ldr	r3, [r7, #28]
 8002a4e:	f1c3 0307 	rsb	r3, r3, #7
 8002a52:	2b04      	cmp	r3, #4
 8002a54:	bf28      	it	cs
 8002a56:	2304      	movcs	r3, #4
 8002a58:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002a5a:	69fb      	ldr	r3, [r7, #28]
 8002a5c:	3304      	adds	r3, #4
 8002a5e:	2b06      	cmp	r3, #6
 8002a60:	d902      	bls.n	8002a68 <NVIC_EncodePriority+0x30>
 8002a62:	69fb      	ldr	r3, [r7, #28]
 8002a64:	3b03      	subs	r3, #3
 8002a66:	e000      	b.n	8002a6a <NVIC_EncodePriority+0x32>
 8002a68:	2300      	movs	r3, #0
 8002a6a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a6c:	f04f 32ff 	mov.w	r2, #4294967295
 8002a70:	69bb      	ldr	r3, [r7, #24]
 8002a72:	fa02 f303 	lsl.w	r3, r2, r3
 8002a76:	43da      	mvns	r2, r3
 8002a78:	68bb      	ldr	r3, [r7, #8]
 8002a7a:	401a      	ands	r2, r3
 8002a7c:	697b      	ldr	r3, [r7, #20]
 8002a7e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002a80:	f04f 31ff 	mov.w	r1, #4294967295
 8002a84:	697b      	ldr	r3, [r7, #20]
 8002a86:	fa01 f303 	lsl.w	r3, r1, r3
 8002a8a:	43d9      	mvns	r1, r3
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a90:	4313      	orrs	r3, r2
         );
}
 8002a92:	4618      	mov	r0, r3
 8002a94:	3724      	adds	r7, #36	; 0x24
 8002a96:	46bd      	mov	sp, r7
 8002a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9c:	4770      	bx	lr
	...

08002aa0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b082      	sub	sp, #8
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	3b01      	subs	r3, #1
 8002aac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002ab0:	d301      	bcc.n	8002ab6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002ab2:	2301      	movs	r3, #1
 8002ab4:	e00f      	b.n	8002ad6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002ab6:	4a0a      	ldr	r2, [pc, #40]	; (8002ae0 <SysTick_Config+0x40>)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	3b01      	subs	r3, #1
 8002abc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002abe:	210f      	movs	r1, #15
 8002ac0:	f04f 30ff 	mov.w	r0, #4294967295
 8002ac4:	f7ff ff8e 	bl	80029e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002ac8:	4b05      	ldr	r3, [pc, #20]	; (8002ae0 <SysTick_Config+0x40>)
 8002aca:	2200      	movs	r2, #0
 8002acc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002ace:	4b04      	ldr	r3, [pc, #16]	; (8002ae0 <SysTick_Config+0x40>)
 8002ad0:	2207      	movs	r2, #7
 8002ad2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002ad4:	2300      	movs	r3, #0
}
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	3708      	adds	r7, #8
 8002ada:	46bd      	mov	sp, r7
 8002adc:	bd80      	pop	{r7, pc}
 8002ade:	bf00      	nop
 8002ae0:	e000e010 	.word	0xe000e010

08002ae4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	b082      	sub	sp, #8
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002aec:	6878      	ldr	r0, [r7, #4]
 8002aee:	f7ff ff47 	bl	8002980 <__NVIC_SetPriorityGrouping>
}
 8002af2:	bf00      	nop
 8002af4:	3708      	adds	r7, #8
 8002af6:	46bd      	mov	sp, r7
 8002af8:	bd80      	pop	{r7, pc}

08002afa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002afa:	b580      	push	{r7, lr}
 8002afc:	b086      	sub	sp, #24
 8002afe:	af00      	add	r7, sp, #0
 8002b00:	4603      	mov	r3, r0
 8002b02:	60b9      	str	r1, [r7, #8]
 8002b04:	607a      	str	r2, [r7, #4]
 8002b06:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002b08:	2300      	movs	r3, #0
 8002b0a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002b0c:	f7ff ff5c 	bl	80029c8 <__NVIC_GetPriorityGrouping>
 8002b10:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002b12:	687a      	ldr	r2, [r7, #4]
 8002b14:	68b9      	ldr	r1, [r7, #8]
 8002b16:	6978      	ldr	r0, [r7, #20]
 8002b18:	f7ff ff8e 	bl	8002a38 <NVIC_EncodePriority>
 8002b1c:	4602      	mov	r2, r0
 8002b1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b22:	4611      	mov	r1, r2
 8002b24:	4618      	mov	r0, r3
 8002b26:	f7ff ff5d 	bl	80029e4 <__NVIC_SetPriority>
}
 8002b2a:	bf00      	nop
 8002b2c:	3718      	adds	r7, #24
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	bd80      	pop	{r7, pc}

08002b32 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002b32:	b580      	push	{r7, lr}
 8002b34:	b082      	sub	sp, #8
 8002b36:	af00      	add	r7, sp, #0
 8002b38:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002b3a:	6878      	ldr	r0, [r7, #4]
 8002b3c:	f7ff ffb0 	bl	8002aa0 <SysTick_Config>
 8002b40:	4603      	mov	r3, r0
}
 8002b42:	4618      	mov	r0, r3
 8002b44:	3708      	adds	r7, #8
 8002b46:	46bd      	mov	sp, r7
 8002b48:	bd80      	pop	{r7, pc}
	...

08002b4c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002b4c:	b480      	push	{r7}
 8002b4e:	b089      	sub	sp, #36	; 0x24
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
 8002b54:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002b56:	2300      	movs	r3, #0
 8002b58:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002b5e:	2300      	movs	r3, #0
 8002b60:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002b62:	2300      	movs	r3, #0
 8002b64:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002b66:	2300      	movs	r3, #0
 8002b68:	61fb      	str	r3, [r7, #28]
 8002b6a:	e175      	b.n	8002e58 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002b6c:	2201      	movs	r2, #1
 8002b6e:	69fb      	ldr	r3, [r7, #28]
 8002b70:	fa02 f303 	lsl.w	r3, r2, r3
 8002b74:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002b76:	683b      	ldr	r3, [r7, #0]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	697a      	ldr	r2, [r7, #20]
 8002b7c:	4013      	ands	r3, r2
 8002b7e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002b80:	693a      	ldr	r2, [r7, #16]
 8002b82:	697b      	ldr	r3, [r7, #20]
 8002b84:	429a      	cmp	r2, r3
 8002b86:	f040 8164 	bne.w	8002e52 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002b8a:	683b      	ldr	r3, [r7, #0]
 8002b8c:	685b      	ldr	r3, [r3, #4]
 8002b8e:	f003 0303 	and.w	r3, r3, #3
 8002b92:	2b01      	cmp	r3, #1
 8002b94:	d005      	beq.n	8002ba2 <HAL_GPIO_Init+0x56>
 8002b96:	683b      	ldr	r3, [r7, #0]
 8002b98:	685b      	ldr	r3, [r3, #4]
 8002b9a:	f003 0303 	and.w	r3, r3, #3
 8002b9e:	2b02      	cmp	r3, #2
 8002ba0:	d130      	bne.n	8002c04 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	689b      	ldr	r3, [r3, #8]
 8002ba6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002ba8:	69fb      	ldr	r3, [r7, #28]
 8002baa:	005b      	lsls	r3, r3, #1
 8002bac:	2203      	movs	r2, #3
 8002bae:	fa02 f303 	lsl.w	r3, r2, r3
 8002bb2:	43db      	mvns	r3, r3
 8002bb4:	69ba      	ldr	r2, [r7, #24]
 8002bb6:	4013      	ands	r3, r2
 8002bb8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002bba:	683b      	ldr	r3, [r7, #0]
 8002bbc:	68da      	ldr	r2, [r3, #12]
 8002bbe:	69fb      	ldr	r3, [r7, #28]
 8002bc0:	005b      	lsls	r3, r3, #1
 8002bc2:	fa02 f303 	lsl.w	r3, r2, r3
 8002bc6:	69ba      	ldr	r2, [r7, #24]
 8002bc8:	4313      	orrs	r3, r2
 8002bca:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	69ba      	ldr	r2, [r7, #24]
 8002bd0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	685b      	ldr	r3, [r3, #4]
 8002bd6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002bd8:	2201      	movs	r2, #1
 8002bda:	69fb      	ldr	r3, [r7, #28]
 8002bdc:	fa02 f303 	lsl.w	r3, r2, r3
 8002be0:	43db      	mvns	r3, r3
 8002be2:	69ba      	ldr	r2, [r7, #24]
 8002be4:	4013      	ands	r3, r2
 8002be6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002be8:	683b      	ldr	r3, [r7, #0]
 8002bea:	685b      	ldr	r3, [r3, #4]
 8002bec:	091b      	lsrs	r3, r3, #4
 8002bee:	f003 0201 	and.w	r2, r3, #1
 8002bf2:	69fb      	ldr	r3, [r7, #28]
 8002bf4:	fa02 f303 	lsl.w	r3, r2, r3
 8002bf8:	69ba      	ldr	r2, [r7, #24]
 8002bfa:	4313      	orrs	r3, r2
 8002bfc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	69ba      	ldr	r2, [r7, #24]
 8002c02:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002c04:	683b      	ldr	r3, [r7, #0]
 8002c06:	685b      	ldr	r3, [r3, #4]
 8002c08:	f003 0303 	and.w	r3, r3, #3
 8002c0c:	2b03      	cmp	r3, #3
 8002c0e:	d017      	beq.n	8002c40 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	68db      	ldr	r3, [r3, #12]
 8002c14:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002c16:	69fb      	ldr	r3, [r7, #28]
 8002c18:	005b      	lsls	r3, r3, #1
 8002c1a:	2203      	movs	r2, #3
 8002c1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c20:	43db      	mvns	r3, r3
 8002c22:	69ba      	ldr	r2, [r7, #24]
 8002c24:	4013      	ands	r3, r2
 8002c26:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002c28:	683b      	ldr	r3, [r7, #0]
 8002c2a:	689a      	ldr	r2, [r3, #8]
 8002c2c:	69fb      	ldr	r3, [r7, #28]
 8002c2e:	005b      	lsls	r3, r3, #1
 8002c30:	fa02 f303 	lsl.w	r3, r2, r3
 8002c34:	69ba      	ldr	r2, [r7, #24]
 8002c36:	4313      	orrs	r3, r2
 8002c38:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	69ba      	ldr	r2, [r7, #24]
 8002c3e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c40:	683b      	ldr	r3, [r7, #0]
 8002c42:	685b      	ldr	r3, [r3, #4]
 8002c44:	f003 0303 	and.w	r3, r3, #3
 8002c48:	2b02      	cmp	r3, #2
 8002c4a:	d123      	bne.n	8002c94 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002c4c:	69fb      	ldr	r3, [r7, #28]
 8002c4e:	08da      	lsrs	r2, r3, #3
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	3208      	adds	r2, #8
 8002c54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c58:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002c5a:	69fb      	ldr	r3, [r7, #28]
 8002c5c:	f003 0307 	and.w	r3, r3, #7
 8002c60:	009b      	lsls	r3, r3, #2
 8002c62:	220f      	movs	r2, #15
 8002c64:	fa02 f303 	lsl.w	r3, r2, r3
 8002c68:	43db      	mvns	r3, r3
 8002c6a:	69ba      	ldr	r2, [r7, #24]
 8002c6c:	4013      	ands	r3, r2
 8002c6e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002c70:	683b      	ldr	r3, [r7, #0]
 8002c72:	691a      	ldr	r2, [r3, #16]
 8002c74:	69fb      	ldr	r3, [r7, #28]
 8002c76:	f003 0307 	and.w	r3, r3, #7
 8002c7a:	009b      	lsls	r3, r3, #2
 8002c7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c80:	69ba      	ldr	r2, [r7, #24]
 8002c82:	4313      	orrs	r3, r2
 8002c84:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002c86:	69fb      	ldr	r3, [r7, #28]
 8002c88:	08da      	lsrs	r2, r3, #3
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	3208      	adds	r2, #8
 8002c8e:	69b9      	ldr	r1, [r7, #24]
 8002c90:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002c9a:	69fb      	ldr	r3, [r7, #28]
 8002c9c:	005b      	lsls	r3, r3, #1
 8002c9e:	2203      	movs	r2, #3
 8002ca0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ca4:	43db      	mvns	r3, r3
 8002ca6:	69ba      	ldr	r2, [r7, #24]
 8002ca8:	4013      	ands	r3, r2
 8002caa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002cac:	683b      	ldr	r3, [r7, #0]
 8002cae:	685b      	ldr	r3, [r3, #4]
 8002cb0:	f003 0203 	and.w	r2, r3, #3
 8002cb4:	69fb      	ldr	r3, [r7, #28]
 8002cb6:	005b      	lsls	r3, r3, #1
 8002cb8:	fa02 f303 	lsl.w	r3, r2, r3
 8002cbc:	69ba      	ldr	r2, [r7, #24]
 8002cbe:	4313      	orrs	r3, r2
 8002cc0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	69ba      	ldr	r2, [r7, #24]
 8002cc6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002cc8:	683b      	ldr	r3, [r7, #0]
 8002cca:	685b      	ldr	r3, [r3, #4]
 8002ccc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	f000 80be 	beq.w	8002e52 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002cd6:	4b66      	ldr	r3, [pc, #408]	; (8002e70 <HAL_GPIO_Init+0x324>)
 8002cd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cda:	4a65      	ldr	r2, [pc, #404]	; (8002e70 <HAL_GPIO_Init+0x324>)
 8002cdc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002ce0:	6453      	str	r3, [r2, #68]	; 0x44
 8002ce2:	4b63      	ldr	r3, [pc, #396]	; (8002e70 <HAL_GPIO_Init+0x324>)
 8002ce4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ce6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002cea:	60fb      	str	r3, [r7, #12]
 8002cec:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002cee:	4a61      	ldr	r2, [pc, #388]	; (8002e74 <HAL_GPIO_Init+0x328>)
 8002cf0:	69fb      	ldr	r3, [r7, #28]
 8002cf2:	089b      	lsrs	r3, r3, #2
 8002cf4:	3302      	adds	r3, #2
 8002cf6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002cfa:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002cfc:	69fb      	ldr	r3, [r7, #28]
 8002cfe:	f003 0303 	and.w	r3, r3, #3
 8002d02:	009b      	lsls	r3, r3, #2
 8002d04:	220f      	movs	r2, #15
 8002d06:	fa02 f303 	lsl.w	r3, r2, r3
 8002d0a:	43db      	mvns	r3, r3
 8002d0c:	69ba      	ldr	r2, [r7, #24]
 8002d0e:	4013      	ands	r3, r2
 8002d10:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	4a58      	ldr	r2, [pc, #352]	; (8002e78 <HAL_GPIO_Init+0x32c>)
 8002d16:	4293      	cmp	r3, r2
 8002d18:	d037      	beq.n	8002d8a <HAL_GPIO_Init+0x23e>
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	4a57      	ldr	r2, [pc, #348]	; (8002e7c <HAL_GPIO_Init+0x330>)
 8002d1e:	4293      	cmp	r3, r2
 8002d20:	d031      	beq.n	8002d86 <HAL_GPIO_Init+0x23a>
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	4a56      	ldr	r2, [pc, #344]	; (8002e80 <HAL_GPIO_Init+0x334>)
 8002d26:	4293      	cmp	r3, r2
 8002d28:	d02b      	beq.n	8002d82 <HAL_GPIO_Init+0x236>
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	4a55      	ldr	r2, [pc, #340]	; (8002e84 <HAL_GPIO_Init+0x338>)
 8002d2e:	4293      	cmp	r3, r2
 8002d30:	d025      	beq.n	8002d7e <HAL_GPIO_Init+0x232>
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	4a54      	ldr	r2, [pc, #336]	; (8002e88 <HAL_GPIO_Init+0x33c>)
 8002d36:	4293      	cmp	r3, r2
 8002d38:	d01f      	beq.n	8002d7a <HAL_GPIO_Init+0x22e>
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	4a53      	ldr	r2, [pc, #332]	; (8002e8c <HAL_GPIO_Init+0x340>)
 8002d3e:	4293      	cmp	r3, r2
 8002d40:	d019      	beq.n	8002d76 <HAL_GPIO_Init+0x22a>
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	4a52      	ldr	r2, [pc, #328]	; (8002e90 <HAL_GPIO_Init+0x344>)
 8002d46:	4293      	cmp	r3, r2
 8002d48:	d013      	beq.n	8002d72 <HAL_GPIO_Init+0x226>
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	4a51      	ldr	r2, [pc, #324]	; (8002e94 <HAL_GPIO_Init+0x348>)
 8002d4e:	4293      	cmp	r3, r2
 8002d50:	d00d      	beq.n	8002d6e <HAL_GPIO_Init+0x222>
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	4a50      	ldr	r2, [pc, #320]	; (8002e98 <HAL_GPIO_Init+0x34c>)
 8002d56:	4293      	cmp	r3, r2
 8002d58:	d007      	beq.n	8002d6a <HAL_GPIO_Init+0x21e>
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	4a4f      	ldr	r2, [pc, #316]	; (8002e9c <HAL_GPIO_Init+0x350>)
 8002d5e:	4293      	cmp	r3, r2
 8002d60:	d101      	bne.n	8002d66 <HAL_GPIO_Init+0x21a>
 8002d62:	2309      	movs	r3, #9
 8002d64:	e012      	b.n	8002d8c <HAL_GPIO_Init+0x240>
 8002d66:	230a      	movs	r3, #10
 8002d68:	e010      	b.n	8002d8c <HAL_GPIO_Init+0x240>
 8002d6a:	2308      	movs	r3, #8
 8002d6c:	e00e      	b.n	8002d8c <HAL_GPIO_Init+0x240>
 8002d6e:	2307      	movs	r3, #7
 8002d70:	e00c      	b.n	8002d8c <HAL_GPIO_Init+0x240>
 8002d72:	2306      	movs	r3, #6
 8002d74:	e00a      	b.n	8002d8c <HAL_GPIO_Init+0x240>
 8002d76:	2305      	movs	r3, #5
 8002d78:	e008      	b.n	8002d8c <HAL_GPIO_Init+0x240>
 8002d7a:	2304      	movs	r3, #4
 8002d7c:	e006      	b.n	8002d8c <HAL_GPIO_Init+0x240>
 8002d7e:	2303      	movs	r3, #3
 8002d80:	e004      	b.n	8002d8c <HAL_GPIO_Init+0x240>
 8002d82:	2302      	movs	r3, #2
 8002d84:	e002      	b.n	8002d8c <HAL_GPIO_Init+0x240>
 8002d86:	2301      	movs	r3, #1
 8002d88:	e000      	b.n	8002d8c <HAL_GPIO_Init+0x240>
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	69fa      	ldr	r2, [r7, #28]
 8002d8e:	f002 0203 	and.w	r2, r2, #3
 8002d92:	0092      	lsls	r2, r2, #2
 8002d94:	4093      	lsls	r3, r2
 8002d96:	69ba      	ldr	r2, [r7, #24]
 8002d98:	4313      	orrs	r3, r2
 8002d9a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002d9c:	4935      	ldr	r1, [pc, #212]	; (8002e74 <HAL_GPIO_Init+0x328>)
 8002d9e:	69fb      	ldr	r3, [r7, #28]
 8002da0:	089b      	lsrs	r3, r3, #2
 8002da2:	3302      	adds	r3, #2
 8002da4:	69ba      	ldr	r2, [r7, #24]
 8002da6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002daa:	4b3d      	ldr	r3, [pc, #244]	; (8002ea0 <HAL_GPIO_Init+0x354>)
 8002dac:	689b      	ldr	r3, [r3, #8]
 8002dae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002db0:	693b      	ldr	r3, [r7, #16]
 8002db2:	43db      	mvns	r3, r3
 8002db4:	69ba      	ldr	r2, [r7, #24]
 8002db6:	4013      	ands	r3, r2
 8002db8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002dba:	683b      	ldr	r3, [r7, #0]
 8002dbc:	685b      	ldr	r3, [r3, #4]
 8002dbe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d003      	beq.n	8002dce <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002dc6:	69ba      	ldr	r2, [r7, #24]
 8002dc8:	693b      	ldr	r3, [r7, #16]
 8002dca:	4313      	orrs	r3, r2
 8002dcc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002dce:	4a34      	ldr	r2, [pc, #208]	; (8002ea0 <HAL_GPIO_Init+0x354>)
 8002dd0:	69bb      	ldr	r3, [r7, #24]
 8002dd2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002dd4:	4b32      	ldr	r3, [pc, #200]	; (8002ea0 <HAL_GPIO_Init+0x354>)
 8002dd6:	68db      	ldr	r3, [r3, #12]
 8002dd8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002dda:	693b      	ldr	r3, [r7, #16]
 8002ddc:	43db      	mvns	r3, r3
 8002dde:	69ba      	ldr	r2, [r7, #24]
 8002de0:	4013      	ands	r3, r2
 8002de2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002de4:	683b      	ldr	r3, [r7, #0]
 8002de6:	685b      	ldr	r3, [r3, #4]
 8002de8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d003      	beq.n	8002df8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002df0:	69ba      	ldr	r2, [r7, #24]
 8002df2:	693b      	ldr	r3, [r7, #16]
 8002df4:	4313      	orrs	r3, r2
 8002df6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002df8:	4a29      	ldr	r2, [pc, #164]	; (8002ea0 <HAL_GPIO_Init+0x354>)
 8002dfa:	69bb      	ldr	r3, [r7, #24]
 8002dfc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002dfe:	4b28      	ldr	r3, [pc, #160]	; (8002ea0 <HAL_GPIO_Init+0x354>)
 8002e00:	685b      	ldr	r3, [r3, #4]
 8002e02:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e04:	693b      	ldr	r3, [r7, #16]
 8002e06:	43db      	mvns	r3, r3
 8002e08:	69ba      	ldr	r2, [r7, #24]
 8002e0a:	4013      	ands	r3, r2
 8002e0c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002e0e:	683b      	ldr	r3, [r7, #0]
 8002e10:	685b      	ldr	r3, [r3, #4]
 8002e12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d003      	beq.n	8002e22 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002e1a:	69ba      	ldr	r2, [r7, #24]
 8002e1c:	693b      	ldr	r3, [r7, #16]
 8002e1e:	4313      	orrs	r3, r2
 8002e20:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002e22:	4a1f      	ldr	r2, [pc, #124]	; (8002ea0 <HAL_GPIO_Init+0x354>)
 8002e24:	69bb      	ldr	r3, [r7, #24]
 8002e26:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002e28:	4b1d      	ldr	r3, [pc, #116]	; (8002ea0 <HAL_GPIO_Init+0x354>)
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e2e:	693b      	ldr	r3, [r7, #16]
 8002e30:	43db      	mvns	r3, r3
 8002e32:	69ba      	ldr	r2, [r7, #24]
 8002e34:	4013      	ands	r3, r2
 8002e36:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002e38:	683b      	ldr	r3, [r7, #0]
 8002e3a:	685b      	ldr	r3, [r3, #4]
 8002e3c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d003      	beq.n	8002e4c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002e44:	69ba      	ldr	r2, [r7, #24]
 8002e46:	693b      	ldr	r3, [r7, #16]
 8002e48:	4313      	orrs	r3, r2
 8002e4a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002e4c:	4a14      	ldr	r2, [pc, #80]	; (8002ea0 <HAL_GPIO_Init+0x354>)
 8002e4e:	69bb      	ldr	r3, [r7, #24]
 8002e50:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002e52:	69fb      	ldr	r3, [r7, #28]
 8002e54:	3301      	adds	r3, #1
 8002e56:	61fb      	str	r3, [r7, #28]
 8002e58:	69fb      	ldr	r3, [r7, #28]
 8002e5a:	2b0f      	cmp	r3, #15
 8002e5c:	f67f ae86 	bls.w	8002b6c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002e60:	bf00      	nop
 8002e62:	bf00      	nop
 8002e64:	3724      	adds	r7, #36	; 0x24
 8002e66:	46bd      	mov	sp, r7
 8002e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6c:	4770      	bx	lr
 8002e6e:	bf00      	nop
 8002e70:	40023800 	.word	0x40023800
 8002e74:	40013800 	.word	0x40013800
 8002e78:	40020000 	.word	0x40020000
 8002e7c:	40020400 	.word	0x40020400
 8002e80:	40020800 	.word	0x40020800
 8002e84:	40020c00 	.word	0x40020c00
 8002e88:	40021000 	.word	0x40021000
 8002e8c:	40021400 	.word	0x40021400
 8002e90:	40021800 	.word	0x40021800
 8002e94:	40021c00 	.word	0x40021c00
 8002e98:	40022000 	.word	0x40022000
 8002e9c:	40022400 	.word	0x40022400
 8002ea0:	40013c00 	.word	0x40013c00

08002ea4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002ea4:	b480      	push	{r7}
 8002ea6:	b083      	sub	sp, #12
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]
 8002eac:	460b      	mov	r3, r1
 8002eae:	807b      	strh	r3, [r7, #2]
 8002eb0:	4613      	mov	r3, r2
 8002eb2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002eb4:	787b      	ldrb	r3, [r7, #1]
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d003      	beq.n	8002ec2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002eba:	887a      	ldrh	r2, [r7, #2]
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002ec0:	e003      	b.n	8002eca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002ec2:	887b      	ldrh	r3, [r7, #2]
 8002ec4:	041a      	lsls	r2, r3, #16
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	619a      	str	r2, [r3, #24]
}
 8002eca:	bf00      	nop
 8002ecc:	370c      	adds	r7, #12
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed4:	4770      	bx	lr
	...

08002ed8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	b082      	sub	sp, #8
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d101      	bne.n	8002eea <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002ee6:	2301      	movs	r3, #1
 8002ee8:	e07f      	b.n	8002fea <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002ef0:	b2db      	uxtb	r3, r3
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d106      	bne.n	8002f04 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	2200      	movs	r2, #0
 8002efa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002efe:	6878      	ldr	r0, [r7, #4]
 8002f00:	f7ff f9ee 	bl	80022e0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2224      	movs	r2, #36	; 0x24
 8002f08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	681a      	ldr	r2, [r3, #0]
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f022 0201 	bic.w	r2, r2, #1
 8002f1a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	685a      	ldr	r2, [r3, #4]
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002f28:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	689a      	ldr	r2, [r3, #8]
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002f38:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	68db      	ldr	r3, [r3, #12]
 8002f3e:	2b01      	cmp	r3, #1
 8002f40:	d107      	bne.n	8002f52 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	689a      	ldr	r2, [r3, #8]
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002f4e:	609a      	str	r2, [r3, #8]
 8002f50:	e006      	b.n	8002f60 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	689a      	ldr	r2, [r3, #8]
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002f5e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	68db      	ldr	r3, [r3, #12]
 8002f64:	2b02      	cmp	r3, #2
 8002f66:	d104      	bne.n	8002f72 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002f70:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	6859      	ldr	r1, [r3, #4]
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681a      	ldr	r2, [r3, #0]
 8002f7c:	4b1d      	ldr	r3, [pc, #116]	; (8002ff4 <HAL_I2C_Init+0x11c>)
 8002f7e:	430b      	orrs	r3, r1
 8002f80:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	68da      	ldr	r2, [r3, #12]
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002f90:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	691a      	ldr	r2, [r3, #16]
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	695b      	ldr	r3, [r3, #20]
 8002f9a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	699b      	ldr	r3, [r3, #24]
 8002fa2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	430a      	orrs	r2, r1
 8002faa:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	69d9      	ldr	r1, [r3, #28]
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	6a1a      	ldr	r2, [r3, #32]
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	430a      	orrs	r2, r1
 8002fba:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	681a      	ldr	r2, [r3, #0]
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f042 0201 	orr.w	r2, r2, #1
 8002fca:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	2200      	movs	r2, #0
 8002fd0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	2220      	movs	r2, #32
 8002fd6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	2200      	movs	r2, #0
 8002fde:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002fe8:	2300      	movs	r3, #0
}
 8002fea:	4618      	mov	r0, r3
 8002fec:	3708      	adds	r7, #8
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	bd80      	pop	{r7, pc}
 8002ff2:	bf00      	nop
 8002ff4:	02008000 	.word	0x02008000

08002ff8 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b088      	sub	sp, #32
 8002ffc:	af02      	add	r7, sp, #8
 8002ffe:	60f8      	str	r0, [r7, #12]
 8003000:	607a      	str	r2, [r7, #4]
 8003002:	461a      	mov	r2, r3
 8003004:	460b      	mov	r3, r1
 8003006:	817b      	strh	r3, [r7, #10]
 8003008:	4613      	mov	r3, r2
 800300a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003012:	b2db      	uxtb	r3, r3
 8003014:	2b20      	cmp	r3, #32
 8003016:	f040 80da 	bne.w	80031ce <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003020:	2b01      	cmp	r3, #1
 8003022:	d101      	bne.n	8003028 <HAL_I2C_Master_Transmit+0x30>
 8003024:	2302      	movs	r3, #2
 8003026:	e0d3      	b.n	80031d0 <HAL_I2C_Master_Transmit+0x1d8>
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	2201      	movs	r2, #1
 800302c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003030:	f7ff fc76 	bl	8002920 <HAL_GetTick>
 8003034:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003036:	697b      	ldr	r3, [r7, #20]
 8003038:	9300      	str	r3, [sp, #0]
 800303a:	2319      	movs	r3, #25
 800303c:	2201      	movs	r2, #1
 800303e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003042:	68f8      	ldr	r0, [r7, #12]
 8003044:	f000 fbc6 	bl	80037d4 <I2C_WaitOnFlagUntilTimeout>
 8003048:	4603      	mov	r3, r0
 800304a:	2b00      	cmp	r3, #0
 800304c:	d001      	beq.n	8003052 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800304e:	2301      	movs	r3, #1
 8003050:	e0be      	b.n	80031d0 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	2221      	movs	r2, #33	; 0x21
 8003056:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	2210      	movs	r2, #16
 800305e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	2200      	movs	r2, #0
 8003066:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	687a      	ldr	r2, [r7, #4]
 800306c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	893a      	ldrh	r2, [r7, #8]
 8003072:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	2200      	movs	r2, #0
 8003078:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800307e:	b29b      	uxth	r3, r3
 8003080:	2bff      	cmp	r3, #255	; 0xff
 8003082:	d90e      	bls.n	80030a2 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	22ff      	movs	r2, #255	; 0xff
 8003088:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800308e:	b2da      	uxtb	r2, r3
 8003090:	8979      	ldrh	r1, [r7, #10]
 8003092:	4b51      	ldr	r3, [pc, #324]	; (80031d8 <HAL_I2C_Master_Transmit+0x1e0>)
 8003094:	9300      	str	r3, [sp, #0]
 8003096:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800309a:	68f8      	ldr	r0, [r7, #12]
 800309c:	f000 fd42 	bl	8003b24 <I2C_TransferConfig>
 80030a0:	e06c      	b.n	800317c <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030a6:	b29a      	uxth	r2, r3
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030b0:	b2da      	uxtb	r2, r3
 80030b2:	8979      	ldrh	r1, [r7, #10]
 80030b4:	4b48      	ldr	r3, [pc, #288]	; (80031d8 <HAL_I2C_Master_Transmit+0x1e0>)
 80030b6:	9300      	str	r3, [sp, #0]
 80030b8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80030bc:	68f8      	ldr	r0, [r7, #12]
 80030be:	f000 fd31 	bl	8003b24 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80030c2:	e05b      	b.n	800317c <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80030c4:	697a      	ldr	r2, [r7, #20]
 80030c6:	6a39      	ldr	r1, [r7, #32]
 80030c8:	68f8      	ldr	r0, [r7, #12]
 80030ca:	f000 fbc3 	bl	8003854 <I2C_WaitOnTXISFlagUntilTimeout>
 80030ce:	4603      	mov	r3, r0
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d001      	beq.n	80030d8 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 80030d4:	2301      	movs	r3, #1
 80030d6:	e07b      	b.n	80031d0 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030dc:	781a      	ldrb	r2, [r3, #0]
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030e8:	1c5a      	adds	r2, r3, #1
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030f2:	b29b      	uxth	r3, r3
 80030f4:	3b01      	subs	r3, #1
 80030f6:	b29a      	uxth	r2, r3
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003100:	3b01      	subs	r3, #1
 8003102:	b29a      	uxth	r2, r3
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800310c:	b29b      	uxth	r3, r3
 800310e:	2b00      	cmp	r3, #0
 8003110:	d034      	beq.n	800317c <HAL_I2C_Master_Transmit+0x184>
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003116:	2b00      	cmp	r3, #0
 8003118:	d130      	bne.n	800317c <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800311a:	697b      	ldr	r3, [r7, #20]
 800311c:	9300      	str	r3, [sp, #0]
 800311e:	6a3b      	ldr	r3, [r7, #32]
 8003120:	2200      	movs	r2, #0
 8003122:	2180      	movs	r1, #128	; 0x80
 8003124:	68f8      	ldr	r0, [r7, #12]
 8003126:	f000 fb55 	bl	80037d4 <I2C_WaitOnFlagUntilTimeout>
 800312a:	4603      	mov	r3, r0
 800312c:	2b00      	cmp	r3, #0
 800312e:	d001      	beq.n	8003134 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8003130:	2301      	movs	r3, #1
 8003132:	e04d      	b.n	80031d0 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003138:	b29b      	uxth	r3, r3
 800313a:	2bff      	cmp	r3, #255	; 0xff
 800313c:	d90e      	bls.n	800315c <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	22ff      	movs	r2, #255	; 0xff
 8003142:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003148:	b2da      	uxtb	r2, r3
 800314a:	8979      	ldrh	r1, [r7, #10]
 800314c:	2300      	movs	r3, #0
 800314e:	9300      	str	r3, [sp, #0]
 8003150:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003154:	68f8      	ldr	r0, [r7, #12]
 8003156:	f000 fce5 	bl	8003b24 <I2C_TransferConfig>
 800315a:	e00f      	b.n	800317c <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003160:	b29a      	uxth	r2, r3
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800316a:	b2da      	uxtb	r2, r3
 800316c:	8979      	ldrh	r1, [r7, #10]
 800316e:	2300      	movs	r3, #0
 8003170:	9300      	str	r3, [sp, #0]
 8003172:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003176:	68f8      	ldr	r0, [r7, #12]
 8003178:	f000 fcd4 	bl	8003b24 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003180:	b29b      	uxth	r3, r3
 8003182:	2b00      	cmp	r3, #0
 8003184:	d19e      	bne.n	80030c4 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003186:	697a      	ldr	r2, [r7, #20]
 8003188:	6a39      	ldr	r1, [r7, #32]
 800318a:	68f8      	ldr	r0, [r7, #12]
 800318c:	f000 fba2 	bl	80038d4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003190:	4603      	mov	r3, r0
 8003192:	2b00      	cmp	r3, #0
 8003194:	d001      	beq.n	800319a <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8003196:	2301      	movs	r3, #1
 8003198:	e01a      	b.n	80031d0 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	2220      	movs	r2, #32
 80031a0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	6859      	ldr	r1, [r3, #4]
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	681a      	ldr	r2, [r3, #0]
 80031ac:	4b0b      	ldr	r3, [pc, #44]	; (80031dc <HAL_I2C_Master_Transmit+0x1e4>)
 80031ae:	400b      	ands	r3, r1
 80031b0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	2220      	movs	r2, #32
 80031b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	2200      	movs	r2, #0
 80031be:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	2200      	movs	r2, #0
 80031c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80031ca:	2300      	movs	r3, #0
 80031cc:	e000      	b.n	80031d0 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 80031ce:	2302      	movs	r3, #2
  }
}
 80031d0:	4618      	mov	r0, r3
 80031d2:	3718      	adds	r7, #24
 80031d4:	46bd      	mov	sp, r7
 80031d6:	bd80      	pop	{r7, pc}
 80031d8:	80002000 	.word	0x80002000
 80031dc:	fe00e800 	.word	0xfe00e800

080031e0 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80031e0:	b580      	push	{r7, lr}
 80031e2:	b088      	sub	sp, #32
 80031e4:	af02      	add	r7, sp, #8
 80031e6:	60f8      	str	r0, [r7, #12]
 80031e8:	4608      	mov	r0, r1
 80031ea:	4611      	mov	r1, r2
 80031ec:	461a      	mov	r2, r3
 80031ee:	4603      	mov	r3, r0
 80031f0:	817b      	strh	r3, [r7, #10]
 80031f2:	460b      	mov	r3, r1
 80031f4:	813b      	strh	r3, [r7, #8]
 80031f6:	4613      	mov	r3, r2
 80031f8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003200:	b2db      	uxtb	r3, r3
 8003202:	2b20      	cmp	r3, #32
 8003204:	f040 80f9 	bne.w	80033fa <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003208:	6a3b      	ldr	r3, [r7, #32]
 800320a:	2b00      	cmp	r3, #0
 800320c:	d002      	beq.n	8003214 <HAL_I2C_Mem_Write+0x34>
 800320e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003210:	2b00      	cmp	r3, #0
 8003212:	d105      	bne.n	8003220 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	f44f 7200 	mov.w	r2, #512	; 0x200
 800321a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800321c:	2301      	movs	r3, #1
 800321e:	e0ed      	b.n	80033fc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003226:	2b01      	cmp	r3, #1
 8003228:	d101      	bne.n	800322e <HAL_I2C_Mem_Write+0x4e>
 800322a:	2302      	movs	r3, #2
 800322c:	e0e6      	b.n	80033fc <HAL_I2C_Mem_Write+0x21c>
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	2201      	movs	r2, #1
 8003232:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003236:	f7ff fb73 	bl	8002920 <HAL_GetTick>
 800323a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800323c:	697b      	ldr	r3, [r7, #20]
 800323e:	9300      	str	r3, [sp, #0]
 8003240:	2319      	movs	r3, #25
 8003242:	2201      	movs	r2, #1
 8003244:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003248:	68f8      	ldr	r0, [r7, #12]
 800324a:	f000 fac3 	bl	80037d4 <I2C_WaitOnFlagUntilTimeout>
 800324e:	4603      	mov	r3, r0
 8003250:	2b00      	cmp	r3, #0
 8003252:	d001      	beq.n	8003258 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8003254:	2301      	movs	r3, #1
 8003256:	e0d1      	b.n	80033fc <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	2221      	movs	r2, #33	; 0x21
 800325c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	2240      	movs	r2, #64	; 0x40
 8003264:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	2200      	movs	r2, #0
 800326c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	6a3a      	ldr	r2, [r7, #32]
 8003272:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003278:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	2200      	movs	r2, #0
 800327e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003280:	88f8      	ldrh	r0, [r7, #6]
 8003282:	893a      	ldrh	r2, [r7, #8]
 8003284:	8979      	ldrh	r1, [r7, #10]
 8003286:	697b      	ldr	r3, [r7, #20]
 8003288:	9301      	str	r3, [sp, #4]
 800328a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800328c:	9300      	str	r3, [sp, #0]
 800328e:	4603      	mov	r3, r0
 8003290:	68f8      	ldr	r0, [r7, #12]
 8003292:	f000 f9d3 	bl	800363c <I2C_RequestMemoryWrite>
 8003296:	4603      	mov	r3, r0
 8003298:	2b00      	cmp	r3, #0
 800329a:	d005      	beq.n	80032a8 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	2200      	movs	r2, #0
 80032a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80032a4:	2301      	movs	r3, #1
 80032a6:	e0a9      	b.n	80033fc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032ac:	b29b      	uxth	r3, r3
 80032ae:	2bff      	cmp	r3, #255	; 0xff
 80032b0:	d90e      	bls.n	80032d0 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	22ff      	movs	r2, #255	; 0xff
 80032b6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032bc:	b2da      	uxtb	r2, r3
 80032be:	8979      	ldrh	r1, [r7, #10]
 80032c0:	2300      	movs	r3, #0
 80032c2:	9300      	str	r3, [sp, #0]
 80032c4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80032c8:	68f8      	ldr	r0, [r7, #12]
 80032ca:	f000 fc2b 	bl	8003b24 <I2C_TransferConfig>
 80032ce:	e00f      	b.n	80032f0 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032d4:	b29a      	uxth	r2, r3
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032de:	b2da      	uxtb	r2, r3
 80032e0:	8979      	ldrh	r1, [r7, #10]
 80032e2:	2300      	movs	r3, #0
 80032e4:	9300      	str	r3, [sp, #0]
 80032e6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80032ea:	68f8      	ldr	r0, [r7, #12]
 80032ec:	f000 fc1a 	bl	8003b24 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80032f0:	697a      	ldr	r2, [r7, #20]
 80032f2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80032f4:	68f8      	ldr	r0, [r7, #12]
 80032f6:	f000 faad 	bl	8003854 <I2C_WaitOnTXISFlagUntilTimeout>
 80032fa:	4603      	mov	r3, r0
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d001      	beq.n	8003304 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8003300:	2301      	movs	r3, #1
 8003302:	e07b      	b.n	80033fc <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003308:	781a      	ldrb	r2, [r3, #0]
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003314:	1c5a      	adds	r2, r3, #1
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800331e:	b29b      	uxth	r3, r3
 8003320:	3b01      	subs	r3, #1
 8003322:	b29a      	uxth	r2, r3
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800332c:	3b01      	subs	r3, #1
 800332e:	b29a      	uxth	r2, r3
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003338:	b29b      	uxth	r3, r3
 800333a:	2b00      	cmp	r3, #0
 800333c:	d034      	beq.n	80033a8 <HAL_I2C_Mem_Write+0x1c8>
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003342:	2b00      	cmp	r3, #0
 8003344:	d130      	bne.n	80033a8 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003346:	697b      	ldr	r3, [r7, #20]
 8003348:	9300      	str	r3, [sp, #0]
 800334a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800334c:	2200      	movs	r2, #0
 800334e:	2180      	movs	r1, #128	; 0x80
 8003350:	68f8      	ldr	r0, [r7, #12]
 8003352:	f000 fa3f 	bl	80037d4 <I2C_WaitOnFlagUntilTimeout>
 8003356:	4603      	mov	r3, r0
 8003358:	2b00      	cmp	r3, #0
 800335a:	d001      	beq.n	8003360 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800335c:	2301      	movs	r3, #1
 800335e:	e04d      	b.n	80033fc <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003364:	b29b      	uxth	r3, r3
 8003366:	2bff      	cmp	r3, #255	; 0xff
 8003368:	d90e      	bls.n	8003388 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	22ff      	movs	r2, #255	; 0xff
 800336e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003374:	b2da      	uxtb	r2, r3
 8003376:	8979      	ldrh	r1, [r7, #10]
 8003378:	2300      	movs	r3, #0
 800337a:	9300      	str	r3, [sp, #0]
 800337c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003380:	68f8      	ldr	r0, [r7, #12]
 8003382:	f000 fbcf 	bl	8003b24 <I2C_TransferConfig>
 8003386:	e00f      	b.n	80033a8 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800338c:	b29a      	uxth	r2, r3
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003396:	b2da      	uxtb	r2, r3
 8003398:	8979      	ldrh	r1, [r7, #10]
 800339a:	2300      	movs	r3, #0
 800339c:	9300      	str	r3, [sp, #0]
 800339e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80033a2:	68f8      	ldr	r0, [r7, #12]
 80033a4:	f000 fbbe 	bl	8003b24 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033ac:	b29b      	uxth	r3, r3
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d19e      	bne.n	80032f0 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80033b2:	697a      	ldr	r2, [r7, #20]
 80033b4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80033b6:	68f8      	ldr	r0, [r7, #12]
 80033b8:	f000 fa8c 	bl	80038d4 <I2C_WaitOnSTOPFlagUntilTimeout>
 80033bc:	4603      	mov	r3, r0
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d001      	beq.n	80033c6 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80033c2:	2301      	movs	r3, #1
 80033c4:	e01a      	b.n	80033fc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	2220      	movs	r2, #32
 80033cc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	6859      	ldr	r1, [r3, #4]
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	681a      	ldr	r2, [r3, #0]
 80033d8:	4b0a      	ldr	r3, [pc, #40]	; (8003404 <HAL_I2C_Mem_Write+0x224>)
 80033da:	400b      	ands	r3, r1
 80033dc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	2220      	movs	r2, #32
 80033e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	2200      	movs	r2, #0
 80033ea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	2200      	movs	r2, #0
 80033f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80033f6:	2300      	movs	r3, #0
 80033f8:	e000      	b.n	80033fc <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80033fa:	2302      	movs	r3, #2
  }
}
 80033fc:	4618      	mov	r0, r3
 80033fe:	3718      	adds	r7, #24
 8003400:	46bd      	mov	sp, r7
 8003402:	bd80      	pop	{r7, pc}
 8003404:	fe00e800 	.word	0xfe00e800

08003408 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003408:	b580      	push	{r7, lr}
 800340a:	b088      	sub	sp, #32
 800340c:	af02      	add	r7, sp, #8
 800340e:	60f8      	str	r0, [r7, #12]
 8003410:	4608      	mov	r0, r1
 8003412:	4611      	mov	r1, r2
 8003414:	461a      	mov	r2, r3
 8003416:	4603      	mov	r3, r0
 8003418:	817b      	strh	r3, [r7, #10]
 800341a:	460b      	mov	r3, r1
 800341c:	813b      	strh	r3, [r7, #8]
 800341e:	4613      	mov	r3, r2
 8003420:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003428:	b2db      	uxtb	r3, r3
 800342a:	2b20      	cmp	r3, #32
 800342c:	f040 80fd 	bne.w	800362a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8003430:	6a3b      	ldr	r3, [r7, #32]
 8003432:	2b00      	cmp	r3, #0
 8003434:	d002      	beq.n	800343c <HAL_I2C_Mem_Read+0x34>
 8003436:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003438:	2b00      	cmp	r3, #0
 800343a:	d105      	bne.n	8003448 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003442:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003444:	2301      	movs	r3, #1
 8003446:	e0f1      	b.n	800362c <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800344e:	2b01      	cmp	r3, #1
 8003450:	d101      	bne.n	8003456 <HAL_I2C_Mem_Read+0x4e>
 8003452:	2302      	movs	r3, #2
 8003454:	e0ea      	b.n	800362c <HAL_I2C_Mem_Read+0x224>
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	2201      	movs	r2, #1
 800345a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800345e:	f7ff fa5f 	bl	8002920 <HAL_GetTick>
 8003462:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003464:	697b      	ldr	r3, [r7, #20]
 8003466:	9300      	str	r3, [sp, #0]
 8003468:	2319      	movs	r3, #25
 800346a:	2201      	movs	r2, #1
 800346c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003470:	68f8      	ldr	r0, [r7, #12]
 8003472:	f000 f9af 	bl	80037d4 <I2C_WaitOnFlagUntilTimeout>
 8003476:	4603      	mov	r3, r0
 8003478:	2b00      	cmp	r3, #0
 800347a:	d001      	beq.n	8003480 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 800347c:	2301      	movs	r3, #1
 800347e:	e0d5      	b.n	800362c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	2222      	movs	r2, #34	; 0x22
 8003484:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	2240      	movs	r2, #64	; 0x40
 800348c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	2200      	movs	r2, #0
 8003494:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	6a3a      	ldr	r2, [r7, #32]
 800349a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80034a0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	2200      	movs	r2, #0
 80034a6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80034a8:	88f8      	ldrh	r0, [r7, #6]
 80034aa:	893a      	ldrh	r2, [r7, #8]
 80034ac:	8979      	ldrh	r1, [r7, #10]
 80034ae:	697b      	ldr	r3, [r7, #20]
 80034b0:	9301      	str	r3, [sp, #4]
 80034b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034b4:	9300      	str	r3, [sp, #0]
 80034b6:	4603      	mov	r3, r0
 80034b8:	68f8      	ldr	r0, [r7, #12]
 80034ba:	f000 f913 	bl	80036e4 <I2C_RequestMemoryRead>
 80034be:	4603      	mov	r3, r0
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d005      	beq.n	80034d0 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	2200      	movs	r2, #0
 80034c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80034cc:	2301      	movs	r3, #1
 80034ce:	e0ad      	b.n	800362c <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034d4:	b29b      	uxth	r3, r3
 80034d6:	2bff      	cmp	r3, #255	; 0xff
 80034d8:	d90e      	bls.n	80034f8 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	22ff      	movs	r2, #255	; 0xff
 80034de:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034e4:	b2da      	uxtb	r2, r3
 80034e6:	8979      	ldrh	r1, [r7, #10]
 80034e8:	4b52      	ldr	r3, [pc, #328]	; (8003634 <HAL_I2C_Mem_Read+0x22c>)
 80034ea:	9300      	str	r3, [sp, #0]
 80034ec:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80034f0:	68f8      	ldr	r0, [r7, #12]
 80034f2:	f000 fb17 	bl	8003b24 <I2C_TransferConfig>
 80034f6:	e00f      	b.n	8003518 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034fc:	b29a      	uxth	r2, r3
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003506:	b2da      	uxtb	r2, r3
 8003508:	8979      	ldrh	r1, [r7, #10]
 800350a:	4b4a      	ldr	r3, [pc, #296]	; (8003634 <HAL_I2C_Mem_Read+0x22c>)
 800350c:	9300      	str	r3, [sp, #0]
 800350e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003512:	68f8      	ldr	r0, [r7, #12]
 8003514:	f000 fb06 	bl	8003b24 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8003518:	697b      	ldr	r3, [r7, #20]
 800351a:	9300      	str	r3, [sp, #0]
 800351c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800351e:	2200      	movs	r2, #0
 8003520:	2104      	movs	r1, #4
 8003522:	68f8      	ldr	r0, [r7, #12]
 8003524:	f000 f956 	bl	80037d4 <I2C_WaitOnFlagUntilTimeout>
 8003528:	4603      	mov	r3, r0
 800352a:	2b00      	cmp	r3, #0
 800352c:	d001      	beq.n	8003532 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800352e:	2301      	movs	r3, #1
 8003530:	e07c      	b.n	800362c <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800353c:	b2d2      	uxtb	r2, r2
 800353e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003544:	1c5a      	adds	r2, r3, #1
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800354e:	3b01      	subs	r3, #1
 8003550:	b29a      	uxth	r2, r3
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800355a:	b29b      	uxth	r3, r3
 800355c:	3b01      	subs	r3, #1
 800355e:	b29a      	uxth	r2, r3
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003568:	b29b      	uxth	r3, r3
 800356a:	2b00      	cmp	r3, #0
 800356c:	d034      	beq.n	80035d8 <HAL_I2C_Mem_Read+0x1d0>
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003572:	2b00      	cmp	r3, #0
 8003574:	d130      	bne.n	80035d8 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003576:	697b      	ldr	r3, [r7, #20]
 8003578:	9300      	str	r3, [sp, #0]
 800357a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800357c:	2200      	movs	r2, #0
 800357e:	2180      	movs	r1, #128	; 0x80
 8003580:	68f8      	ldr	r0, [r7, #12]
 8003582:	f000 f927 	bl	80037d4 <I2C_WaitOnFlagUntilTimeout>
 8003586:	4603      	mov	r3, r0
 8003588:	2b00      	cmp	r3, #0
 800358a:	d001      	beq.n	8003590 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 800358c:	2301      	movs	r3, #1
 800358e:	e04d      	b.n	800362c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003594:	b29b      	uxth	r3, r3
 8003596:	2bff      	cmp	r3, #255	; 0xff
 8003598:	d90e      	bls.n	80035b8 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	22ff      	movs	r2, #255	; 0xff
 800359e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035a4:	b2da      	uxtb	r2, r3
 80035a6:	8979      	ldrh	r1, [r7, #10]
 80035a8:	2300      	movs	r3, #0
 80035aa:	9300      	str	r3, [sp, #0]
 80035ac:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80035b0:	68f8      	ldr	r0, [r7, #12]
 80035b2:	f000 fab7 	bl	8003b24 <I2C_TransferConfig>
 80035b6:	e00f      	b.n	80035d8 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035bc:	b29a      	uxth	r2, r3
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035c6:	b2da      	uxtb	r2, r3
 80035c8:	8979      	ldrh	r1, [r7, #10]
 80035ca:	2300      	movs	r3, #0
 80035cc:	9300      	str	r3, [sp, #0]
 80035ce:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80035d2:	68f8      	ldr	r0, [r7, #12]
 80035d4:	f000 faa6 	bl	8003b24 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035dc:	b29b      	uxth	r3, r3
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d19a      	bne.n	8003518 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80035e2:	697a      	ldr	r2, [r7, #20]
 80035e4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80035e6:	68f8      	ldr	r0, [r7, #12]
 80035e8:	f000 f974 	bl	80038d4 <I2C_WaitOnSTOPFlagUntilTimeout>
 80035ec:	4603      	mov	r3, r0
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d001      	beq.n	80035f6 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80035f2:	2301      	movs	r3, #1
 80035f4:	e01a      	b.n	800362c <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	2220      	movs	r2, #32
 80035fc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	6859      	ldr	r1, [r3, #4]
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	681a      	ldr	r2, [r3, #0]
 8003608:	4b0b      	ldr	r3, [pc, #44]	; (8003638 <HAL_I2C_Mem_Read+0x230>)
 800360a:	400b      	ands	r3, r1
 800360c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	2220      	movs	r2, #32
 8003612:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	2200      	movs	r2, #0
 800361a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	2200      	movs	r2, #0
 8003622:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003626:	2300      	movs	r3, #0
 8003628:	e000      	b.n	800362c <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800362a:	2302      	movs	r3, #2
  }
}
 800362c:	4618      	mov	r0, r3
 800362e:	3718      	adds	r7, #24
 8003630:	46bd      	mov	sp, r7
 8003632:	bd80      	pop	{r7, pc}
 8003634:	80002400 	.word	0x80002400
 8003638:	fe00e800 	.word	0xfe00e800

0800363c <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 800363c:	b580      	push	{r7, lr}
 800363e:	b086      	sub	sp, #24
 8003640:	af02      	add	r7, sp, #8
 8003642:	60f8      	str	r0, [r7, #12]
 8003644:	4608      	mov	r0, r1
 8003646:	4611      	mov	r1, r2
 8003648:	461a      	mov	r2, r3
 800364a:	4603      	mov	r3, r0
 800364c:	817b      	strh	r3, [r7, #10]
 800364e:	460b      	mov	r3, r1
 8003650:	813b      	strh	r3, [r7, #8]
 8003652:	4613      	mov	r3, r2
 8003654:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003656:	88fb      	ldrh	r3, [r7, #6]
 8003658:	b2da      	uxtb	r2, r3
 800365a:	8979      	ldrh	r1, [r7, #10]
 800365c:	4b20      	ldr	r3, [pc, #128]	; (80036e0 <I2C_RequestMemoryWrite+0xa4>)
 800365e:	9300      	str	r3, [sp, #0]
 8003660:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003664:	68f8      	ldr	r0, [r7, #12]
 8003666:	f000 fa5d 	bl	8003b24 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800366a:	69fa      	ldr	r2, [r7, #28]
 800366c:	69b9      	ldr	r1, [r7, #24]
 800366e:	68f8      	ldr	r0, [r7, #12]
 8003670:	f000 f8f0 	bl	8003854 <I2C_WaitOnTXISFlagUntilTimeout>
 8003674:	4603      	mov	r3, r0
 8003676:	2b00      	cmp	r3, #0
 8003678:	d001      	beq.n	800367e <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800367a:	2301      	movs	r3, #1
 800367c:	e02c      	b.n	80036d8 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800367e:	88fb      	ldrh	r3, [r7, #6]
 8003680:	2b01      	cmp	r3, #1
 8003682:	d105      	bne.n	8003690 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003684:	893b      	ldrh	r3, [r7, #8]
 8003686:	b2da      	uxtb	r2, r3
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	629a      	str	r2, [r3, #40]	; 0x28
 800368e:	e015      	b.n	80036bc <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003690:	893b      	ldrh	r3, [r7, #8]
 8003692:	0a1b      	lsrs	r3, r3, #8
 8003694:	b29b      	uxth	r3, r3
 8003696:	b2da      	uxtb	r2, r3
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800369e:	69fa      	ldr	r2, [r7, #28]
 80036a0:	69b9      	ldr	r1, [r7, #24]
 80036a2:	68f8      	ldr	r0, [r7, #12]
 80036a4:	f000 f8d6 	bl	8003854 <I2C_WaitOnTXISFlagUntilTimeout>
 80036a8:	4603      	mov	r3, r0
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d001      	beq.n	80036b2 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80036ae:	2301      	movs	r3, #1
 80036b0:	e012      	b.n	80036d8 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80036b2:	893b      	ldrh	r3, [r7, #8]
 80036b4:	b2da      	uxtb	r2, r3
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80036bc:	69fb      	ldr	r3, [r7, #28]
 80036be:	9300      	str	r3, [sp, #0]
 80036c0:	69bb      	ldr	r3, [r7, #24]
 80036c2:	2200      	movs	r2, #0
 80036c4:	2180      	movs	r1, #128	; 0x80
 80036c6:	68f8      	ldr	r0, [r7, #12]
 80036c8:	f000 f884 	bl	80037d4 <I2C_WaitOnFlagUntilTimeout>
 80036cc:	4603      	mov	r3, r0
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d001      	beq.n	80036d6 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80036d2:	2301      	movs	r3, #1
 80036d4:	e000      	b.n	80036d8 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80036d6:	2300      	movs	r3, #0
}
 80036d8:	4618      	mov	r0, r3
 80036da:	3710      	adds	r7, #16
 80036dc:	46bd      	mov	sp, r7
 80036de:	bd80      	pop	{r7, pc}
 80036e0:	80002000 	.word	0x80002000

080036e4 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80036e4:	b580      	push	{r7, lr}
 80036e6:	b086      	sub	sp, #24
 80036e8:	af02      	add	r7, sp, #8
 80036ea:	60f8      	str	r0, [r7, #12]
 80036ec:	4608      	mov	r0, r1
 80036ee:	4611      	mov	r1, r2
 80036f0:	461a      	mov	r2, r3
 80036f2:	4603      	mov	r3, r0
 80036f4:	817b      	strh	r3, [r7, #10]
 80036f6:	460b      	mov	r3, r1
 80036f8:	813b      	strh	r3, [r7, #8]
 80036fa:	4613      	mov	r3, r2
 80036fc:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80036fe:	88fb      	ldrh	r3, [r7, #6]
 8003700:	b2da      	uxtb	r2, r3
 8003702:	8979      	ldrh	r1, [r7, #10]
 8003704:	4b20      	ldr	r3, [pc, #128]	; (8003788 <I2C_RequestMemoryRead+0xa4>)
 8003706:	9300      	str	r3, [sp, #0]
 8003708:	2300      	movs	r3, #0
 800370a:	68f8      	ldr	r0, [r7, #12]
 800370c:	f000 fa0a 	bl	8003b24 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003710:	69fa      	ldr	r2, [r7, #28]
 8003712:	69b9      	ldr	r1, [r7, #24]
 8003714:	68f8      	ldr	r0, [r7, #12]
 8003716:	f000 f89d 	bl	8003854 <I2C_WaitOnTXISFlagUntilTimeout>
 800371a:	4603      	mov	r3, r0
 800371c:	2b00      	cmp	r3, #0
 800371e:	d001      	beq.n	8003724 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8003720:	2301      	movs	r3, #1
 8003722:	e02c      	b.n	800377e <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003724:	88fb      	ldrh	r3, [r7, #6]
 8003726:	2b01      	cmp	r3, #1
 8003728:	d105      	bne.n	8003736 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800372a:	893b      	ldrh	r3, [r7, #8]
 800372c:	b2da      	uxtb	r2, r3
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	629a      	str	r2, [r3, #40]	; 0x28
 8003734:	e015      	b.n	8003762 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003736:	893b      	ldrh	r3, [r7, #8]
 8003738:	0a1b      	lsrs	r3, r3, #8
 800373a:	b29b      	uxth	r3, r3
 800373c:	b2da      	uxtb	r2, r3
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003744:	69fa      	ldr	r2, [r7, #28]
 8003746:	69b9      	ldr	r1, [r7, #24]
 8003748:	68f8      	ldr	r0, [r7, #12]
 800374a:	f000 f883 	bl	8003854 <I2C_WaitOnTXISFlagUntilTimeout>
 800374e:	4603      	mov	r3, r0
 8003750:	2b00      	cmp	r3, #0
 8003752:	d001      	beq.n	8003758 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8003754:	2301      	movs	r3, #1
 8003756:	e012      	b.n	800377e <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003758:	893b      	ldrh	r3, [r7, #8]
 800375a:	b2da      	uxtb	r2, r3
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8003762:	69fb      	ldr	r3, [r7, #28]
 8003764:	9300      	str	r3, [sp, #0]
 8003766:	69bb      	ldr	r3, [r7, #24]
 8003768:	2200      	movs	r2, #0
 800376a:	2140      	movs	r1, #64	; 0x40
 800376c:	68f8      	ldr	r0, [r7, #12]
 800376e:	f000 f831 	bl	80037d4 <I2C_WaitOnFlagUntilTimeout>
 8003772:	4603      	mov	r3, r0
 8003774:	2b00      	cmp	r3, #0
 8003776:	d001      	beq.n	800377c <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8003778:	2301      	movs	r3, #1
 800377a:	e000      	b.n	800377e <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 800377c:	2300      	movs	r3, #0
}
 800377e:	4618      	mov	r0, r3
 8003780:	3710      	adds	r7, #16
 8003782:	46bd      	mov	sp, r7
 8003784:	bd80      	pop	{r7, pc}
 8003786:	bf00      	nop
 8003788:	80002000 	.word	0x80002000

0800378c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800378c:	b480      	push	{r7}
 800378e:	b083      	sub	sp, #12
 8003790:	af00      	add	r7, sp, #0
 8003792:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	699b      	ldr	r3, [r3, #24]
 800379a:	f003 0302 	and.w	r3, r3, #2
 800379e:	2b02      	cmp	r3, #2
 80037a0:	d103      	bne.n	80037aa <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	2200      	movs	r2, #0
 80037a8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	699b      	ldr	r3, [r3, #24]
 80037b0:	f003 0301 	and.w	r3, r3, #1
 80037b4:	2b01      	cmp	r3, #1
 80037b6:	d007      	beq.n	80037c8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	699a      	ldr	r2, [r3, #24]
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f042 0201 	orr.w	r2, r2, #1
 80037c6:	619a      	str	r2, [r3, #24]
  }
}
 80037c8:	bf00      	nop
 80037ca:	370c      	adds	r7, #12
 80037cc:	46bd      	mov	sp, r7
 80037ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d2:	4770      	bx	lr

080037d4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80037d4:	b580      	push	{r7, lr}
 80037d6:	b084      	sub	sp, #16
 80037d8:	af00      	add	r7, sp, #0
 80037da:	60f8      	str	r0, [r7, #12]
 80037dc:	60b9      	str	r1, [r7, #8]
 80037de:	603b      	str	r3, [r7, #0]
 80037e0:	4613      	mov	r3, r2
 80037e2:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80037e4:	e022      	b.n	800382c <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80037e6:	683b      	ldr	r3, [r7, #0]
 80037e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037ec:	d01e      	beq.n	800382c <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80037ee:	f7ff f897 	bl	8002920 <HAL_GetTick>
 80037f2:	4602      	mov	r2, r0
 80037f4:	69bb      	ldr	r3, [r7, #24]
 80037f6:	1ad3      	subs	r3, r2, r3
 80037f8:	683a      	ldr	r2, [r7, #0]
 80037fa:	429a      	cmp	r2, r3
 80037fc:	d302      	bcc.n	8003804 <I2C_WaitOnFlagUntilTimeout+0x30>
 80037fe:	683b      	ldr	r3, [r7, #0]
 8003800:	2b00      	cmp	r3, #0
 8003802:	d113      	bne.n	800382c <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003808:	f043 0220 	orr.w	r2, r3, #32
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	2220      	movs	r2, #32
 8003814:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	2200      	movs	r2, #0
 800381c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	2200      	movs	r2, #0
 8003824:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8003828:	2301      	movs	r3, #1
 800382a:	e00f      	b.n	800384c <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	699a      	ldr	r2, [r3, #24]
 8003832:	68bb      	ldr	r3, [r7, #8]
 8003834:	4013      	ands	r3, r2
 8003836:	68ba      	ldr	r2, [r7, #8]
 8003838:	429a      	cmp	r2, r3
 800383a:	bf0c      	ite	eq
 800383c:	2301      	moveq	r3, #1
 800383e:	2300      	movne	r3, #0
 8003840:	b2db      	uxtb	r3, r3
 8003842:	461a      	mov	r2, r3
 8003844:	79fb      	ldrb	r3, [r7, #7]
 8003846:	429a      	cmp	r2, r3
 8003848:	d0cd      	beq.n	80037e6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800384a:	2300      	movs	r3, #0
}
 800384c:	4618      	mov	r0, r3
 800384e:	3710      	adds	r7, #16
 8003850:	46bd      	mov	sp, r7
 8003852:	bd80      	pop	{r7, pc}

08003854 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003854:	b580      	push	{r7, lr}
 8003856:	b084      	sub	sp, #16
 8003858:	af00      	add	r7, sp, #0
 800385a:	60f8      	str	r0, [r7, #12]
 800385c:	60b9      	str	r1, [r7, #8]
 800385e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003860:	e02c      	b.n	80038bc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003862:	687a      	ldr	r2, [r7, #4]
 8003864:	68b9      	ldr	r1, [r7, #8]
 8003866:	68f8      	ldr	r0, [r7, #12]
 8003868:	f000 f870 	bl	800394c <I2C_IsErrorOccurred>
 800386c:	4603      	mov	r3, r0
 800386e:	2b00      	cmp	r3, #0
 8003870:	d001      	beq.n	8003876 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003872:	2301      	movs	r3, #1
 8003874:	e02a      	b.n	80038cc <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003876:	68bb      	ldr	r3, [r7, #8]
 8003878:	f1b3 3fff 	cmp.w	r3, #4294967295
 800387c:	d01e      	beq.n	80038bc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800387e:	f7ff f84f 	bl	8002920 <HAL_GetTick>
 8003882:	4602      	mov	r2, r0
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	1ad3      	subs	r3, r2, r3
 8003888:	68ba      	ldr	r2, [r7, #8]
 800388a:	429a      	cmp	r2, r3
 800388c:	d302      	bcc.n	8003894 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800388e:	68bb      	ldr	r3, [r7, #8]
 8003890:	2b00      	cmp	r3, #0
 8003892:	d113      	bne.n	80038bc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003898:	f043 0220 	orr.w	r2, r3, #32
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	2220      	movs	r2, #32
 80038a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	2200      	movs	r2, #0
 80038ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	2200      	movs	r2, #0
 80038b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80038b8:	2301      	movs	r3, #1
 80038ba:	e007      	b.n	80038cc <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	699b      	ldr	r3, [r3, #24]
 80038c2:	f003 0302 	and.w	r3, r3, #2
 80038c6:	2b02      	cmp	r3, #2
 80038c8:	d1cb      	bne.n	8003862 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80038ca:	2300      	movs	r3, #0
}
 80038cc:	4618      	mov	r0, r3
 80038ce:	3710      	adds	r7, #16
 80038d0:	46bd      	mov	sp, r7
 80038d2:	bd80      	pop	{r7, pc}

080038d4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80038d4:	b580      	push	{r7, lr}
 80038d6:	b084      	sub	sp, #16
 80038d8:	af00      	add	r7, sp, #0
 80038da:	60f8      	str	r0, [r7, #12]
 80038dc:	60b9      	str	r1, [r7, #8]
 80038de:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80038e0:	e028      	b.n	8003934 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80038e2:	687a      	ldr	r2, [r7, #4]
 80038e4:	68b9      	ldr	r1, [r7, #8]
 80038e6:	68f8      	ldr	r0, [r7, #12]
 80038e8:	f000 f830 	bl	800394c <I2C_IsErrorOccurred>
 80038ec:	4603      	mov	r3, r0
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d001      	beq.n	80038f6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80038f2:	2301      	movs	r3, #1
 80038f4:	e026      	b.n	8003944 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80038f6:	f7ff f813 	bl	8002920 <HAL_GetTick>
 80038fa:	4602      	mov	r2, r0
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	1ad3      	subs	r3, r2, r3
 8003900:	68ba      	ldr	r2, [r7, #8]
 8003902:	429a      	cmp	r2, r3
 8003904:	d302      	bcc.n	800390c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003906:	68bb      	ldr	r3, [r7, #8]
 8003908:	2b00      	cmp	r3, #0
 800390a:	d113      	bne.n	8003934 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003910:	f043 0220 	orr.w	r2, r3, #32
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	2220      	movs	r2, #32
 800391c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	2200      	movs	r2, #0
 8003924:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	2200      	movs	r2, #0
 800392c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003930:	2301      	movs	r3, #1
 8003932:	e007      	b.n	8003944 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	699b      	ldr	r3, [r3, #24]
 800393a:	f003 0320 	and.w	r3, r3, #32
 800393e:	2b20      	cmp	r3, #32
 8003940:	d1cf      	bne.n	80038e2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003942:	2300      	movs	r3, #0
}
 8003944:	4618      	mov	r0, r3
 8003946:	3710      	adds	r7, #16
 8003948:	46bd      	mov	sp, r7
 800394a:	bd80      	pop	{r7, pc}

0800394c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800394c:	b580      	push	{r7, lr}
 800394e:	b08a      	sub	sp, #40	; 0x28
 8003950:	af00      	add	r7, sp, #0
 8003952:	60f8      	str	r0, [r7, #12]
 8003954:	60b9      	str	r1, [r7, #8]
 8003956:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003958:	2300      	movs	r3, #0
 800395a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	699b      	ldr	r3, [r3, #24]
 8003964:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003966:	2300      	movs	r3, #0
 8003968:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800396e:	69bb      	ldr	r3, [r7, #24]
 8003970:	f003 0310 	and.w	r3, r3, #16
 8003974:	2b00      	cmp	r3, #0
 8003976:	d075      	beq.n	8003a64 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	2210      	movs	r2, #16
 800397e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003980:	e056      	b.n	8003a30 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003982:	68bb      	ldr	r3, [r7, #8]
 8003984:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003988:	d052      	beq.n	8003a30 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800398a:	f7fe ffc9 	bl	8002920 <HAL_GetTick>
 800398e:	4602      	mov	r2, r0
 8003990:	69fb      	ldr	r3, [r7, #28]
 8003992:	1ad3      	subs	r3, r2, r3
 8003994:	68ba      	ldr	r2, [r7, #8]
 8003996:	429a      	cmp	r2, r3
 8003998:	d302      	bcc.n	80039a0 <I2C_IsErrorOccurred+0x54>
 800399a:	68bb      	ldr	r3, [r7, #8]
 800399c:	2b00      	cmp	r3, #0
 800399e:	d147      	bne.n	8003a30 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	685b      	ldr	r3, [r3, #4]
 80039a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80039aa:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80039b2:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	699b      	ldr	r3, [r3, #24]
 80039ba:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80039be:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80039c2:	d12e      	bne.n	8003a22 <I2C_IsErrorOccurred+0xd6>
 80039c4:	697b      	ldr	r3, [r7, #20]
 80039c6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80039ca:	d02a      	beq.n	8003a22 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 80039cc:	7cfb      	ldrb	r3, [r7, #19]
 80039ce:	2b20      	cmp	r3, #32
 80039d0:	d027      	beq.n	8003a22 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	685a      	ldr	r2, [r3, #4]
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80039e0:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80039e2:	f7fe ff9d 	bl	8002920 <HAL_GetTick>
 80039e6:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80039e8:	e01b      	b.n	8003a22 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80039ea:	f7fe ff99 	bl	8002920 <HAL_GetTick>
 80039ee:	4602      	mov	r2, r0
 80039f0:	69fb      	ldr	r3, [r7, #28]
 80039f2:	1ad3      	subs	r3, r2, r3
 80039f4:	2b19      	cmp	r3, #25
 80039f6:	d914      	bls.n	8003a22 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039fc:	f043 0220 	orr.w	r2, r3, #32
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	2220      	movs	r2, #32
 8003a08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	2200      	movs	r2, #0
 8003a10:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	2200      	movs	r2, #0
 8003a18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 8003a1c:	2301      	movs	r3, #1
 8003a1e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	699b      	ldr	r3, [r3, #24]
 8003a28:	f003 0320 	and.w	r3, r3, #32
 8003a2c:	2b20      	cmp	r3, #32
 8003a2e:	d1dc      	bne.n	80039ea <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	699b      	ldr	r3, [r3, #24]
 8003a36:	f003 0320 	and.w	r3, r3, #32
 8003a3a:	2b20      	cmp	r3, #32
 8003a3c:	d003      	beq.n	8003a46 <I2C_IsErrorOccurred+0xfa>
 8003a3e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d09d      	beq.n	8003982 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003a46:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d103      	bne.n	8003a56 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	2220      	movs	r2, #32
 8003a54:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003a56:	6a3b      	ldr	r3, [r7, #32]
 8003a58:	f043 0304 	orr.w	r3, r3, #4
 8003a5c:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003a5e:	2301      	movs	r3, #1
 8003a60:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	699b      	ldr	r3, [r3, #24]
 8003a6a:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003a6c:	69bb      	ldr	r3, [r7, #24]
 8003a6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d00b      	beq.n	8003a8e <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003a76:	6a3b      	ldr	r3, [r7, #32]
 8003a78:	f043 0301 	orr.w	r3, r3, #1
 8003a7c:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003a86:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003a88:	2301      	movs	r3, #1
 8003a8a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003a8e:	69bb      	ldr	r3, [r7, #24]
 8003a90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d00b      	beq.n	8003ab0 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003a98:	6a3b      	ldr	r3, [r7, #32]
 8003a9a:	f043 0308 	orr.w	r3, r3, #8
 8003a9e:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003aa8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003aaa:	2301      	movs	r3, #1
 8003aac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003ab0:	69bb      	ldr	r3, [r7, #24]
 8003ab2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d00b      	beq.n	8003ad2 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003aba:	6a3b      	ldr	r3, [r7, #32]
 8003abc:	f043 0302 	orr.w	r3, r3, #2
 8003ac0:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003aca:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003acc:	2301      	movs	r3, #1
 8003ace:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8003ad2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d01c      	beq.n	8003b14 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003ada:	68f8      	ldr	r0, [r7, #12]
 8003adc:	f7ff fe56 	bl	800378c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	6859      	ldr	r1, [r3, #4]
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	681a      	ldr	r2, [r3, #0]
 8003aea:	4b0d      	ldr	r3, [pc, #52]	; (8003b20 <I2C_IsErrorOccurred+0x1d4>)
 8003aec:	400b      	ands	r3, r1
 8003aee:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003af4:	6a3b      	ldr	r3, [r7, #32]
 8003af6:	431a      	orrs	r2, r3
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	2220      	movs	r2, #32
 8003b00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	2200      	movs	r2, #0
 8003b08:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	2200      	movs	r2, #0
 8003b10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8003b14:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8003b18:	4618      	mov	r0, r3
 8003b1a:	3728      	adds	r7, #40	; 0x28
 8003b1c:	46bd      	mov	sp, r7
 8003b1e:	bd80      	pop	{r7, pc}
 8003b20:	fe00e800 	.word	0xfe00e800

08003b24 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003b24:	b480      	push	{r7}
 8003b26:	b087      	sub	sp, #28
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	60f8      	str	r0, [r7, #12]
 8003b2c:	607b      	str	r3, [r7, #4]
 8003b2e:	460b      	mov	r3, r1
 8003b30:	817b      	strh	r3, [r7, #10]
 8003b32:	4613      	mov	r3, r2
 8003b34:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003b36:	897b      	ldrh	r3, [r7, #10]
 8003b38:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003b3c:	7a7b      	ldrb	r3, [r7, #9]
 8003b3e:	041b      	lsls	r3, r3, #16
 8003b40:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003b44:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003b4a:	6a3b      	ldr	r3, [r7, #32]
 8003b4c:	4313      	orrs	r3, r2
 8003b4e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003b52:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	685a      	ldr	r2, [r3, #4]
 8003b5a:	6a3b      	ldr	r3, [r7, #32]
 8003b5c:	0d5b      	lsrs	r3, r3, #21
 8003b5e:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8003b62:	4b08      	ldr	r3, [pc, #32]	; (8003b84 <I2C_TransferConfig+0x60>)
 8003b64:	430b      	orrs	r3, r1
 8003b66:	43db      	mvns	r3, r3
 8003b68:	ea02 0103 	and.w	r1, r2, r3
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	697a      	ldr	r2, [r7, #20]
 8003b72:	430a      	orrs	r2, r1
 8003b74:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003b76:	bf00      	nop
 8003b78:	371c      	adds	r7, #28
 8003b7a:	46bd      	mov	sp, r7
 8003b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b80:	4770      	bx	lr
 8003b82:	bf00      	nop
 8003b84:	03ff63ff 	.word	0x03ff63ff

08003b88 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003b88:	b480      	push	{r7}
 8003b8a:	b083      	sub	sp, #12
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	6078      	str	r0, [r7, #4]
 8003b90:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003b98:	b2db      	uxtb	r3, r3
 8003b9a:	2b20      	cmp	r3, #32
 8003b9c:	d138      	bne.n	8003c10 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003ba4:	2b01      	cmp	r3, #1
 8003ba6:	d101      	bne.n	8003bac <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003ba8:	2302      	movs	r3, #2
 8003baa:	e032      	b.n	8003c12 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	2201      	movs	r2, #1
 8003bb0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	2224      	movs	r2, #36	; 0x24
 8003bb8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	681a      	ldr	r2, [r3, #0]
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f022 0201 	bic.w	r2, r2, #1
 8003bca:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	681a      	ldr	r2, [r3, #0]
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003bda:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	6819      	ldr	r1, [r3, #0]
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	683a      	ldr	r2, [r7, #0]
 8003be8:	430a      	orrs	r2, r1
 8003bea:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	681a      	ldr	r2, [r3, #0]
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f042 0201 	orr.w	r2, r2, #1
 8003bfa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	2220      	movs	r2, #32
 8003c00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	2200      	movs	r2, #0
 8003c08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003c0c:	2300      	movs	r3, #0
 8003c0e:	e000      	b.n	8003c12 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003c10:	2302      	movs	r3, #2
  }
}
 8003c12:	4618      	mov	r0, r3
 8003c14:	370c      	adds	r7, #12
 8003c16:	46bd      	mov	sp, r7
 8003c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c1c:	4770      	bx	lr

08003c1e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003c1e:	b480      	push	{r7}
 8003c20:	b085      	sub	sp, #20
 8003c22:	af00      	add	r7, sp, #0
 8003c24:	6078      	str	r0, [r7, #4]
 8003c26:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003c2e:	b2db      	uxtb	r3, r3
 8003c30:	2b20      	cmp	r3, #32
 8003c32:	d139      	bne.n	8003ca8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003c3a:	2b01      	cmp	r3, #1
 8003c3c:	d101      	bne.n	8003c42 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003c3e:	2302      	movs	r3, #2
 8003c40:	e033      	b.n	8003caa <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	2201      	movs	r2, #1
 8003c46:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	2224      	movs	r2, #36	; 0x24
 8003c4e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	681a      	ldr	r2, [r3, #0]
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f022 0201 	bic.w	r2, r2, #1
 8003c60:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003c70:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003c72:	683b      	ldr	r3, [r7, #0]
 8003c74:	021b      	lsls	r3, r3, #8
 8003c76:	68fa      	ldr	r2, [r7, #12]
 8003c78:	4313      	orrs	r3, r2
 8003c7a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	68fa      	ldr	r2, [r7, #12]
 8003c82:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	681a      	ldr	r2, [r3, #0]
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f042 0201 	orr.w	r2, r2, #1
 8003c92:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	2220      	movs	r2, #32
 8003c98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	2200      	movs	r2, #0
 8003ca0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003ca4:	2300      	movs	r3, #0
 8003ca6:	e000      	b.n	8003caa <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003ca8:	2302      	movs	r3, #2
  }
}
 8003caa:	4618      	mov	r0, r3
 8003cac:	3714      	adds	r7, #20
 8003cae:	46bd      	mov	sp, r7
 8003cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb4:	4770      	bx	lr
	...

08003cb8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003cb8:	b580      	push	{r7, lr}
 8003cba:	b086      	sub	sp, #24
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003cc0:	2300      	movs	r3, #0
 8003cc2:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d101      	bne.n	8003cce <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8003cca:	2301      	movs	r3, #1
 8003ccc:	e291      	b.n	80041f2 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f003 0301 	and.w	r3, r3, #1
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	f000 8087 	beq.w	8003dea <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003cdc:	4b96      	ldr	r3, [pc, #600]	; (8003f38 <HAL_RCC_OscConfig+0x280>)
 8003cde:	689b      	ldr	r3, [r3, #8]
 8003ce0:	f003 030c 	and.w	r3, r3, #12
 8003ce4:	2b04      	cmp	r3, #4
 8003ce6:	d00c      	beq.n	8003d02 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003ce8:	4b93      	ldr	r3, [pc, #588]	; (8003f38 <HAL_RCC_OscConfig+0x280>)
 8003cea:	689b      	ldr	r3, [r3, #8]
 8003cec:	f003 030c 	and.w	r3, r3, #12
 8003cf0:	2b08      	cmp	r3, #8
 8003cf2:	d112      	bne.n	8003d1a <HAL_RCC_OscConfig+0x62>
 8003cf4:	4b90      	ldr	r3, [pc, #576]	; (8003f38 <HAL_RCC_OscConfig+0x280>)
 8003cf6:	685b      	ldr	r3, [r3, #4]
 8003cf8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003cfc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003d00:	d10b      	bne.n	8003d1a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d02:	4b8d      	ldr	r3, [pc, #564]	; (8003f38 <HAL_RCC_OscConfig+0x280>)
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d06c      	beq.n	8003de8 <HAL_RCC_OscConfig+0x130>
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	685b      	ldr	r3, [r3, #4]
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d168      	bne.n	8003de8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003d16:	2301      	movs	r3, #1
 8003d18:	e26b      	b.n	80041f2 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	685b      	ldr	r3, [r3, #4]
 8003d1e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d22:	d106      	bne.n	8003d32 <HAL_RCC_OscConfig+0x7a>
 8003d24:	4b84      	ldr	r3, [pc, #528]	; (8003f38 <HAL_RCC_OscConfig+0x280>)
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	4a83      	ldr	r2, [pc, #524]	; (8003f38 <HAL_RCC_OscConfig+0x280>)
 8003d2a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d2e:	6013      	str	r3, [r2, #0]
 8003d30:	e02e      	b.n	8003d90 <HAL_RCC_OscConfig+0xd8>
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	685b      	ldr	r3, [r3, #4]
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d10c      	bne.n	8003d54 <HAL_RCC_OscConfig+0x9c>
 8003d3a:	4b7f      	ldr	r3, [pc, #508]	; (8003f38 <HAL_RCC_OscConfig+0x280>)
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	4a7e      	ldr	r2, [pc, #504]	; (8003f38 <HAL_RCC_OscConfig+0x280>)
 8003d40:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d44:	6013      	str	r3, [r2, #0]
 8003d46:	4b7c      	ldr	r3, [pc, #496]	; (8003f38 <HAL_RCC_OscConfig+0x280>)
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	4a7b      	ldr	r2, [pc, #492]	; (8003f38 <HAL_RCC_OscConfig+0x280>)
 8003d4c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003d50:	6013      	str	r3, [r2, #0]
 8003d52:	e01d      	b.n	8003d90 <HAL_RCC_OscConfig+0xd8>
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	685b      	ldr	r3, [r3, #4]
 8003d58:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003d5c:	d10c      	bne.n	8003d78 <HAL_RCC_OscConfig+0xc0>
 8003d5e:	4b76      	ldr	r3, [pc, #472]	; (8003f38 <HAL_RCC_OscConfig+0x280>)
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	4a75      	ldr	r2, [pc, #468]	; (8003f38 <HAL_RCC_OscConfig+0x280>)
 8003d64:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003d68:	6013      	str	r3, [r2, #0]
 8003d6a:	4b73      	ldr	r3, [pc, #460]	; (8003f38 <HAL_RCC_OscConfig+0x280>)
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	4a72      	ldr	r2, [pc, #456]	; (8003f38 <HAL_RCC_OscConfig+0x280>)
 8003d70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d74:	6013      	str	r3, [r2, #0]
 8003d76:	e00b      	b.n	8003d90 <HAL_RCC_OscConfig+0xd8>
 8003d78:	4b6f      	ldr	r3, [pc, #444]	; (8003f38 <HAL_RCC_OscConfig+0x280>)
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	4a6e      	ldr	r2, [pc, #440]	; (8003f38 <HAL_RCC_OscConfig+0x280>)
 8003d7e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d82:	6013      	str	r3, [r2, #0]
 8003d84:	4b6c      	ldr	r3, [pc, #432]	; (8003f38 <HAL_RCC_OscConfig+0x280>)
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	4a6b      	ldr	r2, [pc, #428]	; (8003f38 <HAL_RCC_OscConfig+0x280>)
 8003d8a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003d8e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	685b      	ldr	r3, [r3, #4]
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d013      	beq.n	8003dc0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d98:	f7fe fdc2 	bl	8002920 <HAL_GetTick>
 8003d9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d9e:	e008      	b.n	8003db2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003da0:	f7fe fdbe 	bl	8002920 <HAL_GetTick>
 8003da4:	4602      	mov	r2, r0
 8003da6:	693b      	ldr	r3, [r7, #16]
 8003da8:	1ad3      	subs	r3, r2, r3
 8003daa:	2b64      	cmp	r3, #100	; 0x64
 8003dac:	d901      	bls.n	8003db2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003dae:	2303      	movs	r3, #3
 8003db0:	e21f      	b.n	80041f2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003db2:	4b61      	ldr	r3, [pc, #388]	; (8003f38 <HAL_RCC_OscConfig+0x280>)
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d0f0      	beq.n	8003da0 <HAL_RCC_OscConfig+0xe8>
 8003dbe:	e014      	b.n	8003dea <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dc0:	f7fe fdae 	bl	8002920 <HAL_GetTick>
 8003dc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003dc6:	e008      	b.n	8003dda <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003dc8:	f7fe fdaa 	bl	8002920 <HAL_GetTick>
 8003dcc:	4602      	mov	r2, r0
 8003dce:	693b      	ldr	r3, [r7, #16]
 8003dd0:	1ad3      	subs	r3, r2, r3
 8003dd2:	2b64      	cmp	r3, #100	; 0x64
 8003dd4:	d901      	bls.n	8003dda <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003dd6:	2303      	movs	r3, #3
 8003dd8:	e20b      	b.n	80041f2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003dda:	4b57      	ldr	r3, [pc, #348]	; (8003f38 <HAL_RCC_OscConfig+0x280>)
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d1f0      	bne.n	8003dc8 <HAL_RCC_OscConfig+0x110>
 8003de6:	e000      	b.n	8003dea <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003de8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f003 0302 	and.w	r3, r3, #2
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d069      	beq.n	8003eca <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003df6:	4b50      	ldr	r3, [pc, #320]	; (8003f38 <HAL_RCC_OscConfig+0x280>)
 8003df8:	689b      	ldr	r3, [r3, #8]
 8003dfa:	f003 030c 	and.w	r3, r3, #12
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d00b      	beq.n	8003e1a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003e02:	4b4d      	ldr	r3, [pc, #308]	; (8003f38 <HAL_RCC_OscConfig+0x280>)
 8003e04:	689b      	ldr	r3, [r3, #8]
 8003e06:	f003 030c 	and.w	r3, r3, #12
 8003e0a:	2b08      	cmp	r3, #8
 8003e0c:	d11c      	bne.n	8003e48 <HAL_RCC_OscConfig+0x190>
 8003e0e:	4b4a      	ldr	r3, [pc, #296]	; (8003f38 <HAL_RCC_OscConfig+0x280>)
 8003e10:	685b      	ldr	r3, [r3, #4]
 8003e12:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d116      	bne.n	8003e48 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e1a:	4b47      	ldr	r3, [pc, #284]	; (8003f38 <HAL_RCC_OscConfig+0x280>)
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f003 0302 	and.w	r3, r3, #2
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d005      	beq.n	8003e32 <HAL_RCC_OscConfig+0x17a>
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	68db      	ldr	r3, [r3, #12]
 8003e2a:	2b01      	cmp	r3, #1
 8003e2c:	d001      	beq.n	8003e32 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003e2e:	2301      	movs	r3, #1
 8003e30:	e1df      	b.n	80041f2 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e32:	4b41      	ldr	r3, [pc, #260]	; (8003f38 <HAL_RCC_OscConfig+0x280>)
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	691b      	ldr	r3, [r3, #16]
 8003e3e:	00db      	lsls	r3, r3, #3
 8003e40:	493d      	ldr	r1, [pc, #244]	; (8003f38 <HAL_RCC_OscConfig+0x280>)
 8003e42:	4313      	orrs	r3, r2
 8003e44:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e46:	e040      	b.n	8003eca <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	68db      	ldr	r3, [r3, #12]
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d023      	beq.n	8003e98 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003e50:	4b39      	ldr	r3, [pc, #228]	; (8003f38 <HAL_RCC_OscConfig+0x280>)
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	4a38      	ldr	r2, [pc, #224]	; (8003f38 <HAL_RCC_OscConfig+0x280>)
 8003e56:	f043 0301 	orr.w	r3, r3, #1
 8003e5a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e5c:	f7fe fd60 	bl	8002920 <HAL_GetTick>
 8003e60:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e62:	e008      	b.n	8003e76 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003e64:	f7fe fd5c 	bl	8002920 <HAL_GetTick>
 8003e68:	4602      	mov	r2, r0
 8003e6a:	693b      	ldr	r3, [r7, #16]
 8003e6c:	1ad3      	subs	r3, r2, r3
 8003e6e:	2b02      	cmp	r3, #2
 8003e70:	d901      	bls.n	8003e76 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003e72:	2303      	movs	r3, #3
 8003e74:	e1bd      	b.n	80041f2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e76:	4b30      	ldr	r3, [pc, #192]	; (8003f38 <HAL_RCC_OscConfig+0x280>)
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f003 0302 	and.w	r3, r3, #2
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d0f0      	beq.n	8003e64 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e82:	4b2d      	ldr	r3, [pc, #180]	; (8003f38 <HAL_RCC_OscConfig+0x280>)
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	691b      	ldr	r3, [r3, #16]
 8003e8e:	00db      	lsls	r3, r3, #3
 8003e90:	4929      	ldr	r1, [pc, #164]	; (8003f38 <HAL_RCC_OscConfig+0x280>)
 8003e92:	4313      	orrs	r3, r2
 8003e94:	600b      	str	r3, [r1, #0]
 8003e96:	e018      	b.n	8003eca <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003e98:	4b27      	ldr	r3, [pc, #156]	; (8003f38 <HAL_RCC_OscConfig+0x280>)
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	4a26      	ldr	r2, [pc, #152]	; (8003f38 <HAL_RCC_OscConfig+0x280>)
 8003e9e:	f023 0301 	bic.w	r3, r3, #1
 8003ea2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ea4:	f7fe fd3c 	bl	8002920 <HAL_GetTick>
 8003ea8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003eaa:	e008      	b.n	8003ebe <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003eac:	f7fe fd38 	bl	8002920 <HAL_GetTick>
 8003eb0:	4602      	mov	r2, r0
 8003eb2:	693b      	ldr	r3, [r7, #16]
 8003eb4:	1ad3      	subs	r3, r2, r3
 8003eb6:	2b02      	cmp	r3, #2
 8003eb8:	d901      	bls.n	8003ebe <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003eba:	2303      	movs	r3, #3
 8003ebc:	e199      	b.n	80041f2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ebe:	4b1e      	ldr	r3, [pc, #120]	; (8003f38 <HAL_RCC_OscConfig+0x280>)
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f003 0302 	and.w	r3, r3, #2
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d1f0      	bne.n	8003eac <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f003 0308 	and.w	r3, r3, #8
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d038      	beq.n	8003f48 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	695b      	ldr	r3, [r3, #20]
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d019      	beq.n	8003f12 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003ede:	4b16      	ldr	r3, [pc, #88]	; (8003f38 <HAL_RCC_OscConfig+0x280>)
 8003ee0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ee2:	4a15      	ldr	r2, [pc, #84]	; (8003f38 <HAL_RCC_OscConfig+0x280>)
 8003ee4:	f043 0301 	orr.w	r3, r3, #1
 8003ee8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003eea:	f7fe fd19 	bl	8002920 <HAL_GetTick>
 8003eee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ef0:	e008      	b.n	8003f04 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003ef2:	f7fe fd15 	bl	8002920 <HAL_GetTick>
 8003ef6:	4602      	mov	r2, r0
 8003ef8:	693b      	ldr	r3, [r7, #16]
 8003efa:	1ad3      	subs	r3, r2, r3
 8003efc:	2b02      	cmp	r3, #2
 8003efe:	d901      	bls.n	8003f04 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003f00:	2303      	movs	r3, #3
 8003f02:	e176      	b.n	80041f2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f04:	4b0c      	ldr	r3, [pc, #48]	; (8003f38 <HAL_RCC_OscConfig+0x280>)
 8003f06:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f08:	f003 0302 	and.w	r3, r3, #2
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d0f0      	beq.n	8003ef2 <HAL_RCC_OscConfig+0x23a>
 8003f10:	e01a      	b.n	8003f48 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003f12:	4b09      	ldr	r3, [pc, #36]	; (8003f38 <HAL_RCC_OscConfig+0x280>)
 8003f14:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f16:	4a08      	ldr	r2, [pc, #32]	; (8003f38 <HAL_RCC_OscConfig+0x280>)
 8003f18:	f023 0301 	bic.w	r3, r3, #1
 8003f1c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f1e:	f7fe fcff 	bl	8002920 <HAL_GetTick>
 8003f22:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f24:	e00a      	b.n	8003f3c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003f26:	f7fe fcfb 	bl	8002920 <HAL_GetTick>
 8003f2a:	4602      	mov	r2, r0
 8003f2c:	693b      	ldr	r3, [r7, #16]
 8003f2e:	1ad3      	subs	r3, r2, r3
 8003f30:	2b02      	cmp	r3, #2
 8003f32:	d903      	bls.n	8003f3c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003f34:	2303      	movs	r3, #3
 8003f36:	e15c      	b.n	80041f2 <HAL_RCC_OscConfig+0x53a>
 8003f38:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f3c:	4b91      	ldr	r3, [pc, #580]	; (8004184 <HAL_RCC_OscConfig+0x4cc>)
 8003f3e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f40:	f003 0302 	and.w	r3, r3, #2
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d1ee      	bne.n	8003f26 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f003 0304 	and.w	r3, r3, #4
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	f000 80a4 	beq.w	800409e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003f56:	4b8b      	ldr	r3, [pc, #556]	; (8004184 <HAL_RCC_OscConfig+0x4cc>)
 8003f58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d10d      	bne.n	8003f7e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f62:	4b88      	ldr	r3, [pc, #544]	; (8004184 <HAL_RCC_OscConfig+0x4cc>)
 8003f64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f66:	4a87      	ldr	r2, [pc, #540]	; (8004184 <HAL_RCC_OscConfig+0x4cc>)
 8003f68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f6c:	6413      	str	r3, [r2, #64]	; 0x40
 8003f6e:	4b85      	ldr	r3, [pc, #532]	; (8004184 <HAL_RCC_OscConfig+0x4cc>)
 8003f70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f76:	60bb      	str	r3, [r7, #8]
 8003f78:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003f7a:	2301      	movs	r3, #1
 8003f7c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003f7e:	4b82      	ldr	r3, [pc, #520]	; (8004188 <HAL_RCC_OscConfig+0x4d0>)
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d118      	bne.n	8003fbc <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003f8a:	4b7f      	ldr	r3, [pc, #508]	; (8004188 <HAL_RCC_OscConfig+0x4d0>)
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	4a7e      	ldr	r2, [pc, #504]	; (8004188 <HAL_RCC_OscConfig+0x4d0>)
 8003f90:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f94:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003f96:	f7fe fcc3 	bl	8002920 <HAL_GetTick>
 8003f9a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003f9c:	e008      	b.n	8003fb0 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f9e:	f7fe fcbf 	bl	8002920 <HAL_GetTick>
 8003fa2:	4602      	mov	r2, r0
 8003fa4:	693b      	ldr	r3, [r7, #16]
 8003fa6:	1ad3      	subs	r3, r2, r3
 8003fa8:	2b64      	cmp	r3, #100	; 0x64
 8003faa:	d901      	bls.n	8003fb0 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003fac:	2303      	movs	r3, #3
 8003fae:	e120      	b.n	80041f2 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003fb0:	4b75      	ldr	r3, [pc, #468]	; (8004188 <HAL_RCC_OscConfig+0x4d0>)
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d0f0      	beq.n	8003f9e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	689b      	ldr	r3, [r3, #8]
 8003fc0:	2b01      	cmp	r3, #1
 8003fc2:	d106      	bne.n	8003fd2 <HAL_RCC_OscConfig+0x31a>
 8003fc4:	4b6f      	ldr	r3, [pc, #444]	; (8004184 <HAL_RCC_OscConfig+0x4cc>)
 8003fc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fc8:	4a6e      	ldr	r2, [pc, #440]	; (8004184 <HAL_RCC_OscConfig+0x4cc>)
 8003fca:	f043 0301 	orr.w	r3, r3, #1
 8003fce:	6713      	str	r3, [r2, #112]	; 0x70
 8003fd0:	e02d      	b.n	800402e <HAL_RCC_OscConfig+0x376>
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	689b      	ldr	r3, [r3, #8]
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d10c      	bne.n	8003ff4 <HAL_RCC_OscConfig+0x33c>
 8003fda:	4b6a      	ldr	r3, [pc, #424]	; (8004184 <HAL_RCC_OscConfig+0x4cc>)
 8003fdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fde:	4a69      	ldr	r2, [pc, #420]	; (8004184 <HAL_RCC_OscConfig+0x4cc>)
 8003fe0:	f023 0301 	bic.w	r3, r3, #1
 8003fe4:	6713      	str	r3, [r2, #112]	; 0x70
 8003fe6:	4b67      	ldr	r3, [pc, #412]	; (8004184 <HAL_RCC_OscConfig+0x4cc>)
 8003fe8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fea:	4a66      	ldr	r2, [pc, #408]	; (8004184 <HAL_RCC_OscConfig+0x4cc>)
 8003fec:	f023 0304 	bic.w	r3, r3, #4
 8003ff0:	6713      	str	r3, [r2, #112]	; 0x70
 8003ff2:	e01c      	b.n	800402e <HAL_RCC_OscConfig+0x376>
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	689b      	ldr	r3, [r3, #8]
 8003ff8:	2b05      	cmp	r3, #5
 8003ffa:	d10c      	bne.n	8004016 <HAL_RCC_OscConfig+0x35e>
 8003ffc:	4b61      	ldr	r3, [pc, #388]	; (8004184 <HAL_RCC_OscConfig+0x4cc>)
 8003ffe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004000:	4a60      	ldr	r2, [pc, #384]	; (8004184 <HAL_RCC_OscConfig+0x4cc>)
 8004002:	f043 0304 	orr.w	r3, r3, #4
 8004006:	6713      	str	r3, [r2, #112]	; 0x70
 8004008:	4b5e      	ldr	r3, [pc, #376]	; (8004184 <HAL_RCC_OscConfig+0x4cc>)
 800400a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800400c:	4a5d      	ldr	r2, [pc, #372]	; (8004184 <HAL_RCC_OscConfig+0x4cc>)
 800400e:	f043 0301 	orr.w	r3, r3, #1
 8004012:	6713      	str	r3, [r2, #112]	; 0x70
 8004014:	e00b      	b.n	800402e <HAL_RCC_OscConfig+0x376>
 8004016:	4b5b      	ldr	r3, [pc, #364]	; (8004184 <HAL_RCC_OscConfig+0x4cc>)
 8004018:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800401a:	4a5a      	ldr	r2, [pc, #360]	; (8004184 <HAL_RCC_OscConfig+0x4cc>)
 800401c:	f023 0301 	bic.w	r3, r3, #1
 8004020:	6713      	str	r3, [r2, #112]	; 0x70
 8004022:	4b58      	ldr	r3, [pc, #352]	; (8004184 <HAL_RCC_OscConfig+0x4cc>)
 8004024:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004026:	4a57      	ldr	r2, [pc, #348]	; (8004184 <HAL_RCC_OscConfig+0x4cc>)
 8004028:	f023 0304 	bic.w	r3, r3, #4
 800402c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	689b      	ldr	r3, [r3, #8]
 8004032:	2b00      	cmp	r3, #0
 8004034:	d015      	beq.n	8004062 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004036:	f7fe fc73 	bl	8002920 <HAL_GetTick>
 800403a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800403c:	e00a      	b.n	8004054 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800403e:	f7fe fc6f 	bl	8002920 <HAL_GetTick>
 8004042:	4602      	mov	r2, r0
 8004044:	693b      	ldr	r3, [r7, #16]
 8004046:	1ad3      	subs	r3, r2, r3
 8004048:	f241 3288 	movw	r2, #5000	; 0x1388
 800404c:	4293      	cmp	r3, r2
 800404e:	d901      	bls.n	8004054 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8004050:	2303      	movs	r3, #3
 8004052:	e0ce      	b.n	80041f2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004054:	4b4b      	ldr	r3, [pc, #300]	; (8004184 <HAL_RCC_OscConfig+0x4cc>)
 8004056:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004058:	f003 0302 	and.w	r3, r3, #2
 800405c:	2b00      	cmp	r3, #0
 800405e:	d0ee      	beq.n	800403e <HAL_RCC_OscConfig+0x386>
 8004060:	e014      	b.n	800408c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004062:	f7fe fc5d 	bl	8002920 <HAL_GetTick>
 8004066:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004068:	e00a      	b.n	8004080 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800406a:	f7fe fc59 	bl	8002920 <HAL_GetTick>
 800406e:	4602      	mov	r2, r0
 8004070:	693b      	ldr	r3, [r7, #16]
 8004072:	1ad3      	subs	r3, r2, r3
 8004074:	f241 3288 	movw	r2, #5000	; 0x1388
 8004078:	4293      	cmp	r3, r2
 800407a:	d901      	bls.n	8004080 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800407c:	2303      	movs	r3, #3
 800407e:	e0b8      	b.n	80041f2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004080:	4b40      	ldr	r3, [pc, #256]	; (8004184 <HAL_RCC_OscConfig+0x4cc>)
 8004082:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004084:	f003 0302 	and.w	r3, r3, #2
 8004088:	2b00      	cmp	r3, #0
 800408a:	d1ee      	bne.n	800406a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800408c:	7dfb      	ldrb	r3, [r7, #23]
 800408e:	2b01      	cmp	r3, #1
 8004090:	d105      	bne.n	800409e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004092:	4b3c      	ldr	r3, [pc, #240]	; (8004184 <HAL_RCC_OscConfig+0x4cc>)
 8004094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004096:	4a3b      	ldr	r2, [pc, #236]	; (8004184 <HAL_RCC_OscConfig+0x4cc>)
 8004098:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800409c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	699b      	ldr	r3, [r3, #24]
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	f000 80a4 	beq.w	80041f0 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80040a8:	4b36      	ldr	r3, [pc, #216]	; (8004184 <HAL_RCC_OscConfig+0x4cc>)
 80040aa:	689b      	ldr	r3, [r3, #8]
 80040ac:	f003 030c 	and.w	r3, r3, #12
 80040b0:	2b08      	cmp	r3, #8
 80040b2:	d06b      	beq.n	800418c <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	699b      	ldr	r3, [r3, #24]
 80040b8:	2b02      	cmp	r3, #2
 80040ba:	d149      	bne.n	8004150 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80040bc:	4b31      	ldr	r3, [pc, #196]	; (8004184 <HAL_RCC_OscConfig+0x4cc>)
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	4a30      	ldr	r2, [pc, #192]	; (8004184 <HAL_RCC_OscConfig+0x4cc>)
 80040c2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80040c6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040c8:	f7fe fc2a 	bl	8002920 <HAL_GetTick>
 80040cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80040ce:	e008      	b.n	80040e2 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80040d0:	f7fe fc26 	bl	8002920 <HAL_GetTick>
 80040d4:	4602      	mov	r2, r0
 80040d6:	693b      	ldr	r3, [r7, #16]
 80040d8:	1ad3      	subs	r3, r2, r3
 80040da:	2b02      	cmp	r3, #2
 80040dc:	d901      	bls.n	80040e2 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80040de:	2303      	movs	r3, #3
 80040e0:	e087      	b.n	80041f2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80040e2:	4b28      	ldr	r3, [pc, #160]	; (8004184 <HAL_RCC_OscConfig+0x4cc>)
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d1f0      	bne.n	80040d0 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	69da      	ldr	r2, [r3, #28]
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	6a1b      	ldr	r3, [r3, #32]
 80040f6:	431a      	orrs	r2, r3
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040fc:	019b      	lsls	r3, r3, #6
 80040fe:	431a      	orrs	r2, r3
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004104:	085b      	lsrs	r3, r3, #1
 8004106:	3b01      	subs	r3, #1
 8004108:	041b      	lsls	r3, r3, #16
 800410a:	431a      	orrs	r2, r3
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004110:	061b      	lsls	r3, r3, #24
 8004112:	4313      	orrs	r3, r2
 8004114:	4a1b      	ldr	r2, [pc, #108]	; (8004184 <HAL_RCC_OscConfig+0x4cc>)
 8004116:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800411a:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800411c:	4b19      	ldr	r3, [pc, #100]	; (8004184 <HAL_RCC_OscConfig+0x4cc>)
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	4a18      	ldr	r2, [pc, #96]	; (8004184 <HAL_RCC_OscConfig+0x4cc>)
 8004122:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004126:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004128:	f7fe fbfa 	bl	8002920 <HAL_GetTick>
 800412c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800412e:	e008      	b.n	8004142 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004130:	f7fe fbf6 	bl	8002920 <HAL_GetTick>
 8004134:	4602      	mov	r2, r0
 8004136:	693b      	ldr	r3, [r7, #16]
 8004138:	1ad3      	subs	r3, r2, r3
 800413a:	2b02      	cmp	r3, #2
 800413c:	d901      	bls.n	8004142 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 800413e:	2303      	movs	r3, #3
 8004140:	e057      	b.n	80041f2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004142:	4b10      	ldr	r3, [pc, #64]	; (8004184 <HAL_RCC_OscConfig+0x4cc>)
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800414a:	2b00      	cmp	r3, #0
 800414c:	d0f0      	beq.n	8004130 <HAL_RCC_OscConfig+0x478>
 800414e:	e04f      	b.n	80041f0 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004150:	4b0c      	ldr	r3, [pc, #48]	; (8004184 <HAL_RCC_OscConfig+0x4cc>)
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	4a0b      	ldr	r2, [pc, #44]	; (8004184 <HAL_RCC_OscConfig+0x4cc>)
 8004156:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800415a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800415c:	f7fe fbe0 	bl	8002920 <HAL_GetTick>
 8004160:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004162:	e008      	b.n	8004176 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004164:	f7fe fbdc 	bl	8002920 <HAL_GetTick>
 8004168:	4602      	mov	r2, r0
 800416a:	693b      	ldr	r3, [r7, #16]
 800416c:	1ad3      	subs	r3, r2, r3
 800416e:	2b02      	cmp	r3, #2
 8004170:	d901      	bls.n	8004176 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8004172:	2303      	movs	r3, #3
 8004174:	e03d      	b.n	80041f2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004176:	4b03      	ldr	r3, [pc, #12]	; (8004184 <HAL_RCC_OscConfig+0x4cc>)
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800417e:	2b00      	cmp	r3, #0
 8004180:	d1f0      	bne.n	8004164 <HAL_RCC_OscConfig+0x4ac>
 8004182:	e035      	b.n	80041f0 <HAL_RCC_OscConfig+0x538>
 8004184:	40023800 	.word	0x40023800
 8004188:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800418c:	4b1b      	ldr	r3, [pc, #108]	; (80041fc <HAL_RCC_OscConfig+0x544>)
 800418e:	685b      	ldr	r3, [r3, #4]
 8004190:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	699b      	ldr	r3, [r3, #24]
 8004196:	2b01      	cmp	r3, #1
 8004198:	d028      	beq.n	80041ec <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80041a4:	429a      	cmp	r2, r3
 80041a6:	d121      	bne.n	80041ec <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80041b2:	429a      	cmp	r2, r3
 80041b4:	d11a      	bne.n	80041ec <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80041b6:	68fa      	ldr	r2, [r7, #12]
 80041b8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80041bc:	4013      	ands	r3, r2
 80041be:	687a      	ldr	r2, [r7, #4]
 80041c0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80041c2:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80041c4:	4293      	cmp	r3, r2
 80041c6:	d111      	bne.n	80041ec <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041d2:	085b      	lsrs	r3, r3, #1
 80041d4:	3b01      	subs	r3, #1
 80041d6:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80041d8:	429a      	cmp	r2, r3
 80041da:	d107      	bne.n	80041ec <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041e6:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80041e8:	429a      	cmp	r2, r3
 80041ea:	d001      	beq.n	80041f0 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 80041ec:	2301      	movs	r3, #1
 80041ee:	e000      	b.n	80041f2 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 80041f0:	2300      	movs	r3, #0
}
 80041f2:	4618      	mov	r0, r3
 80041f4:	3718      	adds	r7, #24
 80041f6:	46bd      	mov	sp, r7
 80041f8:	bd80      	pop	{r7, pc}
 80041fa:	bf00      	nop
 80041fc:	40023800 	.word	0x40023800

08004200 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004200:	b580      	push	{r7, lr}
 8004202:	b084      	sub	sp, #16
 8004204:	af00      	add	r7, sp, #0
 8004206:	6078      	str	r0, [r7, #4]
 8004208:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800420a:	2300      	movs	r3, #0
 800420c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	2b00      	cmp	r3, #0
 8004212:	d101      	bne.n	8004218 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004214:	2301      	movs	r3, #1
 8004216:	e0d0      	b.n	80043ba <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004218:	4b6a      	ldr	r3, [pc, #424]	; (80043c4 <HAL_RCC_ClockConfig+0x1c4>)
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f003 030f 	and.w	r3, r3, #15
 8004220:	683a      	ldr	r2, [r7, #0]
 8004222:	429a      	cmp	r2, r3
 8004224:	d910      	bls.n	8004248 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004226:	4b67      	ldr	r3, [pc, #412]	; (80043c4 <HAL_RCC_ClockConfig+0x1c4>)
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f023 020f 	bic.w	r2, r3, #15
 800422e:	4965      	ldr	r1, [pc, #404]	; (80043c4 <HAL_RCC_ClockConfig+0x1c4>)
 8004230:	683b      	ldr	r3, [r7, #0]
 8004232:	4313      	orrs	r3, r2
 8004234:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004236:	4b63      	ldr	r3, [pc, #396]	; (80043c4 <HAL_RCC_ClockConfig+0x1c4>)
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f003 030f 	and.w	r3, r3, #15
 800423e:	683a      	ldr	r2, [r7, #0]
 8004240:	429a      	cmp	r2, r3
 8004242:	d001      	beq.n	8004248 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004244:	2301      	movs	r3, #1
 8004246:	e0b8      	b.n	80043ba <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f003 0302 	and.w	r3, r3, #2
 8004250:	2b00      	cmp	r3, #0
 8004252:	d020      	beq.n	8004296 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	f003 0304 	and.w	r3, r3, #4
 800425c:	2b00      	cmp	r3, #0
 800425e:	d005      	beq.n	800426c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004260:	4b59      	ldr	r3, [pc, #356]	; (80043c8 <HAL_RCC_ClockConfig+0x1c8>)
 8004262:	689b      	ldr	r3, [r3, #8]
 8004264:	4a58      	ldr	r2, [pc, #352]	; (80043c8 <HAL_RCC_ClockConfig+0x1c8>)
 8004266:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800426a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f003 0308 	and.w	r3, r3, #8
 8004274:	2b00      	cmp	r3, #0
 8004276:	d005      	beq.n	8004284 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004278:	4b53      	ldr	r3, [pc, #332]	; (80043c8 <HAL_RCC_ClockConfig+0x1c8>)
 800427a:	689b      	ldr	r3, [r3, #8]
 800427c:	4a52      	ldr	r2, [pc, #328]	; (80043c8 <HAL_RCC_ClockConfig+0x1c8>)
 800427e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004282:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004284:	4b50      	ldr	r3, [pc, #320]	; (80043c8 <HAL_RCC_ClockConfig+0x1c8>)
 8004286:	689b      	ldr	r3, [r3, #8]
 8004288:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	689b      	ldr	r3, [r3, #8]
 8004290:	494d      	ldr	r1, [pc, #308]	; (80043c8 <HAL_RCC_ClockConfig+0x1c8>)
 8004292:	4313      	orrs	r3, r2
 8004294:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f003 0301 	and.w	r3, r3, #1
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d040      	beq.n	8004324 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	685b      	ldr	r3, [r3, #4]
 80042a6:	2b01      	cmp	r3, #1
 80042a8:	d107      	bne.n	80042ba <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80042aa:	4b47      	ldr	r3, [pc, #284]	; (80043c8 <HAL_RCC_ClockConfig+0x1c8>)
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d115      	bne.n	80042e2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80042b6:	2301      	movs	r3, #1
 80042b8:	e07f      	b.n	80043ba <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	685b      	ldr	r3, [r3, #4]
 80042be:	2b02      	cmp	r3, #2
 80042c0:	d107      	bne.n	80042d2 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80042c2:	4b41      	ldr	r3, [pc, #260]	; (80043c8 <HAL_RCC_ClockConfig+0x1c8>)
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d109      	bne.n	80042e2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80042ce:	2301      	movs	r3, #1
 80042d0:	e073      	b.n	80043ba <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80042d2:	4b3d      	ldr	r3, [pc, #244]	; (80043c8 <HAL_RCC_ClockConfig+0x1c8>)
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f003 0302 	and.w	r3, r3, #2
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d101      	bne.n	80042e2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80042de:	2301      	movs	r3, #1
 80042e0:	e06b      	b.n	80043ba <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80042e2:	4b39      	ldr	r3, [pc, #228]	; (80043c8 <HAL_RCC_ClockConfig+0x1c8>)
 80042e4:	689b      	ldr	r3, [r3, #8]
 80042e6:	f023 0203 	bic.w	r2, r3, #3
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	685b      	ldr	r3, [r3, #4]
 80042ee:	4936      	ldr	r1, [pc, #216]	; (80043c8 <HAL_RCC_ClockConfig+0x1c8>)
 80042f0:	4313      	orrs	r3, r2
 80042f2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80042f4:	f7fe fb14 	bl	8002920 <HAL_GetTick>
 80042f8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042fa:	e00a      	b.n	8004312 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80042fc:	f7fe fb10 	bl	8002920 <HAL_GetTick>
 8004300:	4602      	mov	r2, r0
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	1ad3      	subs	r3, r2, r3
 8004306:	f241 3288 	movw	r2, #5000	; 0x1388
 800430a:	4293      	cmp	r3, r2
 800430c:	d901      	bls.n	8004312 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800430e:	2303      	movs	r3, #3
 8004310:	e053      	b.n	80043ba <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004312:	4b2d      	ldr	r3, [pc, #180]	; (80043c8 <HAL_RCC_ClockConfig+0x1c8>)
 8004314:	689b      	ldr	r3, [r3, #8]
 8004316:	f003 020c 	and.w	r2, r3, #12
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	685b      	ldr	r3, [r3, #4]
 800431e:	009b      	lsls	r3, r3, #2
 8004320:	429a      	cmp	r2, r3
 8004322:	d1eb      	bne.n	80042fc <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004324:	4b27      	ldr	r3, [pc, #156]	; (80043c4 <HAL_RCC_ClockConfig+0x1c4>)
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f003 030f 	and.w	r3, r3, #15
 800432c:	683a      	ldr	r2, [r7, #0]
 800432e:	429a      	cmp	r2, r3
 8004330:	d210      	bcs.n	8004354 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004332:	4b24      	ldr	r3, [pc, #144]	; (80043c4 <HAL_RCC_ClockConfig+0x1c4>)
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f023 020f 	bic.w	r2, r3, #15
 800433a:	4922      	ldr	r1, [pc, #136]	; (80043c4 <HAL_RCC_ClockConfig+0x1c4>)
 800433c:	683b      	ldr	r3, [r7, #0]
 800433e:	4313      	orrs	r3, r2
 8004340:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004342:	4b20      	ldr	r3, [pc, #128]	; (80043c4 <HAL_RCC_ClockConfig+0x1c4>)
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f003 030f 	and.w	r3, r3, #15
 800434a:	683a      	ldr	r2, [r7, #0]
 800434c:	429a      	cmp	r2, r3
 800434e:	d001      	beq.n	8004354 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8004350:	2301      	movs	r3, #1
 8004352:	e032      	b.n	80043ba <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f003 0304 	and.w	r3, r3, #4
 800435c:	2b00      	cmp	r3, #0
 800435e:	d008      	beq.n	8004372 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004360:	4b19      	ldr	r3, [pc, #100]	; (80043c8 <HAL_RCC_ClockConfig+0x1c8>)
 8004362:	689b      	ldr	r3, [r3, #8]
 8004364:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	68db      	ldr	r3, [r3, #12]
 800436c:	4916      	ldr	r1, [pc, #88]	; (80043c8 <HAL_RCC_ClockConfig+0x1c8>)
 800436e:	4313      	orrs	r3, r2
 8004370:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	f003 0308 	and.w	r3, r3, #8
 800437a:	2b00      	cmp	r3, #0
 800437c:	d009      	beq.n	8004392 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800437e:	4b12      	ldr	r3, [pc, #72]	; (80043c8 <HAL_RCC_ClockConfig+0x1c8>)
 8004380:	689b      	ldr	r3, [r3, #8]
 8004382:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	691b      	ldr	r3, [r3, #16]
 800438a:	00db      	lsls	r3, r3, #3
 800438c:	490e      	ldr	r1, [pc, #56]	; (80043c8 <HAL_RCC_ClockConfig+0x1c8>)
 800438e:	4313      	orrs	r3, r2
 8004390:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004392:	f000 f821 	bl	80043d8 <HAL_RCC_GetSysClockFreq>
 8004396:	4602      	mov	r2, r0
 8004398:	4b0b      	ldr	r3, [pc, #44]	; (80043c8 <HAL_RCC_ClockConfig+0x1c8>)
 800439a:	689b      	ldr	r3, [r3, #8]
 800439c:	091b      	lsrs	r3, r3, #4
 800439e:	f003 030f 	and.w	r3, r3, #15
 80043a2:	490a      	ldr	r1, [pc, #40]	; (80043cc <HAL_RCC_ClockConfig+0x1cc>)
 80043a4:	5ccb      	ldrb	r3, [r1, r3]
 80043a6:	fa22 f303 	lsr.w	r3, r2, r3
 80043aa:	4a09      	ldr	r2, [pc, #36]	; (80043d0 <HAL_RCC_ClockConfig+0x1d0>)
 80043ac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80043ae:	4b09      	ldr	r3, [pc, #36]	; (80043d4 <HAL_RCC_ClockConfig+0x1d4>)
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	4618      	mov	r0, r3
 80043b4:	f7fe fa70 	bl	8002898 <HAL_InitTick>

  return HAL_OK;
 80043b8:	2300      	movs	r3, #0
}
 80043ba:	4618      	mov	r0, r3
 80043bc:	3710      	adds	r7, #16
 80043be:	46bd      	mov	sp, r7
 80043c0:	bd80      	pop	{r7, pc}
 80043c2:	bf00      	nop
 80043c4:	40023c00 	.word	0x40023c00
 80043c8:	40023800 	.word	0x40023800
 80043cc:	0800979c 	.word	0x0800979c
 80043d0:	2000001c 	.word	0x2000001c
 80043d4:	20000020 	.word	0x20000020

080043d8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80043d8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80043dc:	b084      	sub	sp, #16
 80043de:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80043e0:	2300      	movs	r3, #0
 80043e2:	607b      	str	r3, [r7, #4]
 80043e4:	2300      	movs	r3, #0
 80043e6:	60fb      	str	r3, [r7, #12]
 80043e8:	2300      	movs	r3, #0
 80043ea:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 80043ec:	2300      	movs	r3, #0
 80043ee:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80043f0:	4b67      	ldr	r3, [pc, #412]	; (8004590 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80043f2:	689b      	ldr	r3, [r3, #8]
 80043f4:	f003 030c 	and.w	r3, r3, #12
 80043f8:	2b08      	cmp	r3, #8
 80043fa:	d00d      	beq.n	8004418 <HAL_RCC_GetSysClockFreq+0x40>
 80043fc:	2b08      	cmp	r3, #8
 80043fe:	f200 80bd 	bhi.w	800457c <HAL_RCC_GetSysClockFreq+0x1a4>
 8004402:	2b00      	cmp	r3, #0
 8004404:	d002      	beq.n	800440c <HAL_RCC_GetSysClockFreq+0x34>
 8004406:	2b04      	cmp	r3, #4
 8004408:	d003      	beq.n	8004412 <HAL_RCC_GetSysClockFreq+0x3a>
 800440a:	e0b7      	b.n	800457c <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800440c:	4b61      	ldr	r3, [pc, #388]	; (8004594 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800440e:	60bb      	str	r3, [r7, #8]
      break;
 8004410:	e0b7      	b.n	8004582 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004412:	4b61      	ldr	r3, [pc, #388]	; (8004598 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8004414:	60bb      	str	r3, [r7, #8]
      break;
 8004416:	e0b4      	b.n	8004582 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004418:	4b5d      	ldr	r3, [pc, #372]	; (8004590 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800441a:	685b      	ldr	r3, [r3, #4]
 800441c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004420:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8004422:	4b5b      	ldr	r3, [pc, #364]	; (8004590 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004424:	685b      	ldr	r3, [r3, #4]
 8004426:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800442a:	2b00      	cmp	r3, #0
 800442c:	d04d      	beq.n	80044ca <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800442e:	4b58      	ldr	r3, [pc, #352]	; (8004590 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004430:	685b      	ldr	r3, [r3, #4]
 8004432:	099b      	lsrs	r3, r3, #6
 8004434:	461a      	mov	r2, r3
 8004436:	f04f 0300 	mov.w	r3, #0
 800443a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800443e:	f04f 0100 	mov.w	r1, #0
 8004442:	ea02 0800 	and.w	r8, r2, r0
 8004446:	ea03 0901 	and.w	r9, r3, r1
 800444a:	4640      	mov	r0, r8
 800444c:	4649      	mov	r1, r9
 800444e:	f04f 0200 	mov.w	r2, #0
 8004452:	f04f 0300 	mov.w	r3, #0
 8004456:	014b      	lsls	r3, r1, #5
 8004458:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800445c:	0142      	lsls	r2, r0, #5
 800445e:	4610      	mov	r0, r2
 8004460:	4619      	mov	r1, r3
 8004462:	ebb0 0008 	subs.w	r0, r0, r8
 8004466:	eb61 0109 	sbc.w	r1, r1, r9
 800446a:	f04f 0200 	mov.w	r2, #0
 800446e:	f04f 0300 	mov.w	r3, #0
 8004472:	018b      	lsls	r3, r1, #6
 8004474:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004478:	0182      	lsls	r2, r0, #6
 800447a:	1a12      	subs	r2, r2, r0
 800447c:	eb63 0301 	sbc.w	r3, r3, r1
 8004480:	f04f 0000 	mov.w	r0, #0
 8004484:	f04f 0100 	mov.w	r1, #0
 8004488:	00d9      	lsls	r1, r3, #3
 800448a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800448e:	00d0      	lsls	r0, r2, #3
 8004490:	4602      	mov	r2, r0
 8004492:	460b      	mov	r3, r1
 8004494:	eb12 0208 	adds.w	r2, r2, r8
 8004498:	eb43 0309 	adc.w	r3, r3, r9
 800449c:	f04f 0000 	mov.w	r0, #0
 80044a0:	f04f 0100 	mov.w	r1, #0
 80044a4:	0259      	lsls	r1, r3, #9
 80044a6:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80044aa:	0250      	lsls	r0, r2, #9
 80044ac:	4602      	mov	r2, r0
 80044ae:	460b      	mov	r3, r1
 80044b0:	4610      	mov	r0, r2
 80044b2:	4619      	mov	r1, r3
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	461a      	mov	r2, r3
 80044b8:	f04f 0300 	mov.w	r3, #0
 80044bc:	f7fc fc34 	bl	8000d28 <__aeabi_uldivmod>
 80044c0:	4602      	mov	r2, r0
 80044c2:	460b      	mov	r3, r1
 80044c4:	4613      	mov	r3, r2
 80044c6:	60fb      	str	r3, [r7, #12]
 80044c8:	e04a      	b.n	8004560 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80044ca:	4b31      	ldr	r3, [pc, #196]	; (8004590 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80044cc:	685b      	ldr	r3, [r3, #4]
 80044ce:	099b      	lsrs	r3, r3, #6
 80044d0:	461a      	mov	r2, r3
 80044d2:	f04f 0300 	mov.w	r3, #0
 80044d6:	f240 10ff 	movw	r0, #511	; 0x1ff
 80044da:	f04f 0100 	mov.w	r1, #0
 80044de:	ea02 0400 	and.w	r4, r2, r0
 80044e2:	ea03 0501 	and.w	r5, r3, r1
 80044e6:	4620      	mov	r0, r4
 80044e8:	4629      	mov	r1, r5
 80044ea:	f04f 0200 	mov.w	r2, #0
 80044ee:	f04f 0300 	mov.w	r3, #0
 80044f2:	014b      	lsls	r3, r1, #5
 80044f4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80044f8:	0142      	lsls	r2, r0, #5
 80044fa:	4610      	mov	r0, r2
 80044fc:	4619      	mov	r1, r3
 80044fe:	1b00      	subs	r0, r0, r4
 8004500:	eb61 0105 	sbc.w	r1, r1, r5
 8004504:	f04f 0200 	mov.w	r2, #0
 8004508:	f04f 0300 	mov.w	r3, #0
 800450c:	018b      	lsls	r3, r1, #6
 800450e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004512:	0182      	lsls	r2, r0, #6
 8004514:	1a12      	subs	r2, r2, r0
 8004516:	eb63 0301 	sbc.w	r3, r3, r1
 800451a:	f04f 0000 	mov.w	r0, #0
 800451e:	f04f 0100 	mov.w	r1, #0
 8004522:	00d9      	lsls	r1, r3, #3
 8004524:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004528:	00d0      	lsls	r0, r2, #3
 800452a:	4602      	mov	r2, r0
 800452c:	460b      	mov	r3, r1
 800452e:	1912      	adds	r2, r2, r4
 8004530:	eb45 0303 	adc.w	r3, r5, r3
 8004534:	f04f 0000 	mov.w	r0, #0
 8004538:	f04f 0100 	mov.w	r1, #0
 800453c:	0299      	lsls	r1, r3, #10
 800453e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8004542:	0290      	lsls	r0, r2, #10
 8004544:	4602      	mov	r2, r0
 8004546:	460b      	mov	r3, r1
 8004548:	4610      	mov	r0, r2
 800454a:	4619      	mov	r1, r3
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	461a      	mov	r2, r3
 8004550:	f04f 0300 	mov.w	r3, #0
 8004554:	f7fc fbe8 	bl	8000d28 <__aeabi_uldivmod>
 8004558:	4602      	mov	r2, r0
 800455a:	460b      	mov	r3, r1
 800455c:	4613      	mov	r3, r2
 800455e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8004560:	4b0b      	ldr	r3, [pc, #44]	; (8004590 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004562:	685b      	ldr	r3, [r3, #4]
 8004564:	0c1b      	lsrs	r3, r3, #16
 8004566:	f003 0303 	and.w	r3, r3, #3
 800456a:	3301      	adds	r3, #1
 800456c:	005b      	lsls	r3, r3, #1
 800456e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8004570:	68fa      	ldr	r2, [r7, #12]
 8004572:	683b      	ldr	r3, [r7, #0]
 8004574:	fbb2 f3f3 	udiv	r3, r2, r3
 8004578:	60bb      	str	r3, [r7, #8]
      break;
 800457a:	e002      	b.n	8004582 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800457c:	4b05      	ldr	r3, [pc, #20]	; (8004594 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800457e:	60bb      	str	r3, [r7, #8]
      break;
 8004580:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004582:	68bb      	ldr	r3, [r7, #8]
}
 8004584:	4618      	mov	r0, r3
 8004586:	3710      	adds	r7, #16
 8004588:	46bd      	mov	sp, r7
 800458a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800458e:	bf00      	nop
 8004590:	40023800 	.word	0x40023800
 8004594:	00f42400 	.word	0x00f42400
 8004598:	007a1200 	.word	0x007a1200

0800459c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800459c:	b480      	push	{r7}
 800459e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80045a0:	4b03      	ldr	r3, [pc, #12]	; (80045b0 <HAL_RCC_GetHCLKFreq+0x14>)
 80045a2:	681b      	ldr	r3, [r3, #0]
}
 80045a4:	4618      	mov	r0, r3
 80045a6:	46bd      	mov	sp, r7
 80045a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ac:	4770      	bx	lr
 80045ae:	bf00      	nop
 80045b0:	2000001c 	.word	0x2000001c

080045b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80045b4:	b580      	push	{r7, lr}
 80045b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80045b8:	f7ff fff0 	bl	800459c <HAL_RCC_GetHCLKFreq>
 80045bc:	4602      	mov	r2, r0
 80045be:	4b05      	ldr	r3, [pc, #20]	; (80045d4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80045c0:	689b      	ldr	r3, [r3, #8]
 80045c2:	0a9b      	lsrs	r3, r3, #10
 80045c4:	f003 0307 	and.w	r3, r3, #7
 80045c8:	4903      	ldr	r1, [pc, #12]	; (80045d8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80045ca:	5ccb      	ldrb	r3, [r1, r3]
 80045cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80045d0:	4618      	mov	r0, r3
 80045d2:	bd80      	pop	{r7, pc}
 80045d4:	40023800 	.word	0x40023800
 80045d8:	080097ac 	.word	0x080097ac

080045dc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80045dc:	b580      	push	{r7, lr}
 80045de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80045e0:	f7ff ffdc 	bl	800459c <HAL_RCC_GetHCLKFreq>
 80045e4:	4602      	mov	r2, r0
 80045e6:	4b05      	ldr	r3, [pc, #20]	; (80045fc <HAL_RCC_GetPCLK2Freq+0x20>)
 80045e8:	689b      	ldr	r3, [r3, #8]
 80045ea:	0b5b      	lsrs	r3, r3, #13
 80045ec:	f003 0307 	and.w	r3, r3, #7
 80045f0:	4903      	ldr	r1, [pc, #12]	; (8004600 <HAL_RCC_GetPCLK2Freq+0x24>)
 80045f2:	5ccb      	ldrb	r3, [r1, r3]
 80045f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80045f8:	4618      	mov	r0, r3
 80045fa:	bd80      	pop	{r7, pc}
 80045fc:	40023800 	.word	0x40023800
 8004600:	080097ac 	.word	0x080097ac

08004604 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004604:	b580      	push	{r7, lr}
 8004606:	b088      	sub	sp, #32
 8004608:	af00      	add	r7, sp, #0
 800460a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800460c:	2300      	movs	r3, #0
 800460e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8004610:	2300      	movs	r3, #0
 8004612:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8004614:	2300      	movs	r3, #0
 8004616:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8004618:	2300      	movs	r3, #0
 800461a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800461c:	2300      	movs	r3, #0
 800461e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	f003 0301 	and.w	r3, r3, #1
 8004628:	2b00      	cmp	r3, #0
 800462a:	d012      	beq.n	8004652 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800462c:	4b69      	ldr	r3, [pc, #420]	; (80047d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800462e:	689b      	ldr	r3, [r3, #8]
 8004630:	4a68      	ldr	r2, [pc, #416]	; (80047d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004632:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8004636:	6093      	str	r3, [r2, #8]
 8004638:	4b66      	ldr	r3, [pc, #408]	; (80047d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800463a:	689a      	ldr	r2, [r3, #8]
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004640:	4964      	ldr	r1, [pc, #400]	; (80047d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004642:	4313      	orrs	r3, r2
 8004644:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800464a:	2b00      	cmp	r3, #0
 800464c:	d101      	bne.n	8004652 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800464e:	2301      	movs	r3, #1
 8004650:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800465a:	2b00      	cmp	r3, #0
 800465c:	d017      	beq.n	800468e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800465e:	4b5d      	ldr	r3, [pc, #372]	; (80047d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004660:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004664:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800466c:	4959      	ldr	r1, [pc, #356]	; (80047d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800466e:	4313      	orrs	r3, r2
 8004670:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004678:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800467c:	d101      	bne.n	8004682 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800467e:	2301      	movs	r3, #1
 8004680:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004686:	2b00      	cmp	r3, #0
 8004688:	d101      	bne.n	800468e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800468a:	2301      	movs	r3, #1
 800468c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004696:	2b00      	cmp	r3, #0
 8004698:	d017      	beq.n	80046ca <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800469a:	4b4e      	ldr	r3, [pc, #312]	; (80047d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800469c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80046a0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046a8:	494a      	ldr	r1, [pc, #296]	; (80047d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80046aa:	4313      	orrs	r3, r2
 80046ac:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046b4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80046b8:	d101      	bne.n	80046be <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80046ba:	2301      	movs	r3, #1
 80046bc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d101      	bne.n	80046ca <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80046c6:	2301      	movs	r3, #1
 80046c8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d001      	beq.n	80046da <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80046d6:	2301      	movs	r3, #1
 80046d8:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f003 0320 	and.w	r3, r3, #32
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	f000 808b 	beq.w	80047fe <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80046e8:	4b3a      	ldr	r3, [pc, #232]	; (80047d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80046ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046ec:	4a39      	ldr	r2, [pc, #228]	; (80047d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80046ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80046f2:	6413      	str	r3, [r2, #64]	; 0x40
 80046f4:	4b37      	ldr	r3, [pc, #220]	; (80047d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80046f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046fc:	60bb      	str	r3, [r7, #8]
 80046fe:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004700:	4b35      	ldr	r3, [pc, #212]	; (80047d8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	4a34      	ldr	r2, [pc, #208]	; (80047d8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004706:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800470a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800470c:	f7fe f908 	bl	8002920 <HAL_GetTick>
 8004710:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004712:	e008      	b.n	8004726 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004714:	f7fe f904 	bl	8002920 <HAL_GetTick>
 8004718:	4602      	mov	r2, r0
 800471a:	697b      	ldr	r3, [r7, #20]
 800471c:	1ad3      	subs	r3, r2, r3
 800471e:	2b64      	cmp	r3, #100	; 0x64
 8004720:	d901      	bls.n	8004726 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8004722:	2303      	movs	r3, #3
 8004724:	e357      	b.n	8004dd6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004726:	4b2c      	ldr	r3, [pc, #176]	; (80047d8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800472e:	2b00      	cmp	r3, #0
 8004730:	d0f0      	beq.n	8004714 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004732:	4b28      	ldr	r3, [pc, #160]	; (80047d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004734:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004736:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800473a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800473c:	693b      	ldr	r3, [r7, #16]
 800473e:	2b00      	cmp	r3, #0
 8004740:	d035      	beq.n	80047ae <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004746:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800474a:	693a      	ldr	r2, [r7, #16]
 800474c:	429a      	cmp	r2, r3
 800474e:	d02e      	beq.n	80047ae <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004750:	4b20      	ldr	r3, [pc, #128]	; (80047d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004752:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004754:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004758:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800475a:	4b1e      	ldr	r3, [pc, #120]	; (80047d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800475c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800475e:	4a1d      	ldr	r2, [pc, #116]	; (80047d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004760:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004764:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004766:	4b1b      	ldr	r3, [pc, #108]	; (80047d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004768:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800476a:	4a1a      	ldr	r2, [pc, #104]	; (80047d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800476c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004770:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8004772:	4a18      	ldr	r2, [pc, #96]	; (80047d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004774:	693b      	ldr	r3, [r7, #16]
 8004776:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004778:	4b16      	ldr	r3, [pc, #88]	; (80047d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800477a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800477c:	f003 0301 	and.w	r3, r3, #1
 8004780:	2b01      	cmp	r3, #1
 8004782:	d114      	bne.n	80047ae <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004784:	f7fe f8cc 	bl	8002920 <HAL_GetTick>
 8004788:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800478a:	e00a      	b.n	80047a2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800478c:	f7fe f8c8 	bl	8002920 <HAL_GetTick>
 8004790:	4602      	mov	r2, r0
 8004792:	697b      	ldr	r3, [r7, #20]
 8004794:	1ad3      	subs	r3, r2, r3
 8004796:	f241 3288 	movw	r2, #5000	; 0x1388
 800479a:	4293      	cmp	r3, r2
 800479c:	d901      	bls.n	80047a2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800479e:	2303      	movs	r3, #3
 80047a0:	e319      	b.n	8004dd6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80047a2:	4b0c      	ldr	r3, [pc, #48]	; (80047d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80047a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047a6:	f003 0302 	and.w	r3, r3, #2
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d0ee      	beq.n	800478c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80047b6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80047ba:	d111      	bne.n	80047e0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80047bc:	4b05      	ldr	r3, [pc, #20]	; (80047d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80047be:	689b      	ldr	r3, [r3, #8]
 80047c0:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80047c8:	4b04      	ldr	r3, [pc, #16]	; (80047dc <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80047ca:	400b      	ands	r3, r1
 80047cc:	4901      	ldr	r1, [pc, #4]	; (80047d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80047ce:	4313      	orrs	r3, r2
 80047d0:	608b      	str	r3, [r1, #8]
 80047d2:	e00b      	b.n	80047ec <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80047d4:	40023800 	.word	0x40023800
 80047d8:	40007000 	.word	0x40007000
 80047dc:	0ffffcff 	.word	0x0ffffcff
 80047e0:	4bb1      	ldr	r3, [pc, #708]	; (8004aa8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80047e2:	689b      	ldr	r3, [r3, #8]
 80047e4:	4ab0      	ldr	r2, [pc, #704]	; (8004aa8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80047e6:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80047ea:	6093      	str	r3, [r2, #8]
 80047ec:	4bae      	ldr	r3, [pc, #696]	; (8004aa8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80047ee:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80047f8:	49ab      	ldr	r1, [pc, #684]	; (8004aa8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80047fa:	4313      	orrs	r3, r2
 80047fc:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	f003 0310 	and.w	r3, r3, #16
 8004806:	2b00      	cmp	r3, #0
 8004808:	d010      	beq.n	800482c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800480a:	4ba7      	ldr	r3, [pc, #668]	; (8004aa8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800480c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004810:	4aa5      	ldr	r2, [pc, #660]	; (8004aa8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004812:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004816:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800481a:	4ba3      	ldr	r3, [pc, #652]	; (8004aa8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800481c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004824:	49a0      	ldr	r1, [pc, #640]	; (8004aa8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004826:	4313      	orrs	r3, r2
 8004828:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004834:	2b00      	cmp	r3, #0
 8004836:	d00a      	beq.n	800484e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004838:	4b9b      	ldr	r3, [pc, #620]	; (8004aa8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800483a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800483e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004846:	4998      	ldr	r1, [pc, #608]	; (8004aa8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004848:	4313      	orrs	r3, r2
 800484a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004856:	2b00      	cmp	r3, #0
 8004858:	d00a      	beq.n	8004870 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800485a:	4b93      	ldr	r3, [pc, #588]	; (8004aa8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800485c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004860:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004868:	498f      	ldr	r1, [pc, #572]	; (8004aa8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800486a:	4313      	orrs	r3, r2
 800486c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004878:	2b00      	cmp	r3, #0
 800487a:	d00a      	beq.n	8004892 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800487c:	4b8a      	ldr	r3, [pc, #552]	; (8004aa8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800487e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004882:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800488a:	4987      	ldr	r1, [pc, #540]	; (8004aa8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800488c:	4313      	orrs	r3, r2
 800488e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800489a:	2b00      	cmp	r3, #0
 800489c:	d00a      	beq.n	80048b4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800489e:	4b82      	ldr	r3, [pc, #520]	; (8004aa8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80048a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048a4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048ac:	497e      	ldr	r1, [pc, #504]	; (8004aa8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80048ae:	4313      	orrs	r3, r2
 80048b0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d00a      	beq.n	80048d6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80048c0:	4b79      	ldr	r3, [pc, #484]	; (8004aa8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80048c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048c6:	f023 0203 	bic.w	r2, r3, #3
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048ce:	4976      	ldr	r1, [pc, #472]	; (8004aa8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80048d0:	4313      	orrs	r3, r2
 80048d2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d00a      	beq.n	80048f8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80048e2:	4b71      	ldr	r3, [pc, #452]	; (8004aa8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80048e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048e8:	f023 020c 	bic.w	r2, r3, #12
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80048f0:	496d      	ldr	r1, [pc, #436]	; (8004aa8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80048f2:	4313      	orrs	r3, r2
 80048f4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004900:	2b00      	cmp	r3, #0
 8004902:	d00a      	beq.n	800491a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004904:	4b68      	ldr	r3, [pc, #416]	; (8004aa8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004906:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800490a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004912:	4965      	ldr	r1, [pc, #404]	; (8004aa8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004914:	4313      	orrs	r3, r2
 8004916:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004922:	2b00      	cmp	r3, #0
 8004924:	d00a      	beq.n	800493c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004926:	4b60      	ldr	r3, [pc, #384]	; (8004aa8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004928:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800492c:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004934:	495c      	ldr	r1, [pc, #368]	; (8004aa8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004936:	4313      	orrs	r3, r2
 8004938:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004944:	2b00      	cmp	r3, #0
 8004946:	d00a      	beq.n	800495e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004948:	4b57      	ldr	r3, [pc, #348]	; (8004aa8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800494a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800494e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004956:	4954      	ldr	r1, [pc, #336]	; (8004aa8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004958:	4313      	orrs	r3, r2
 800495a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004966:	2b00      	cmp	r3, #0
 8004968:	d00a      	beq.n	8004980 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800496a:	4b4f      	ldr	r3, [pc, #316]	; (8004aa8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800496c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004970:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004978:	494b      	ldr	r1, [pc, #300]	; (8004aa8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800497a:	4313      	orrs	r3, r2
 800497c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004988:	2b00      	cmp	r3, #0
 800498a:	d00a      	beq.n	80049a2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800498c:	4b46      	ldr	r3, [pc, #280]	; (8004aa8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800498e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004992:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800499a:	4943      	ldr	r1, [pc, #268]	; (8004aa8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800499c:	4313      	orrs	r3, r2
 800499e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d00a      	beq.n	80049c4 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80049ae:	4b3e      	ldr	r3, [pc, #248]	; (8004aa8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80049b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049b4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80049bc:	493a      	ldr	r1, [pc, #232]	; (8004aa8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80049be:	4313      	orrs	r3, r2
 80049c0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d00a      	beq.n	80049e6 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80049d0:	4b35      	ldr	r3, [pc, #212]	; (8004aa8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80049d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049d6:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80049de:	4932      	ldr	r1, [pc, #200]	; (8004aa8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80049e0:	4313      	orrs	r3, r2
 80049e2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d011      	beq.n	8004a16 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80049f2:	4b2d      	ldr	r3, [pc, #180]	; (8004aa8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80049f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049f8:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004a00:	4929      	ldr	r1, [pc, #164]	; (8004aa8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004a02:	4313      	orrs	r3, r2
 8004a04:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004a0c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004a10:	d101      	bne.n	8004a16 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8004a12:	2301      	movs	r3, #1
 8004a14:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	f003 0308 	and.w	r3, r3, #8
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d001      	beq.n	8004a26 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8004a22:	2301      	movs	r3, #1
 8004a24:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d00a      	beq.n	8004a48 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004a32:	4b1d      	ldr	r3, [pc, #116]	; (8004aa8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004a34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a38:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a40:	4919      	ldr	r1, [pc, #100]	; (8004aa8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004a42:	4313      	orrs	r3, r2
 8004a44:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d00b      	beq.n	8004a6c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004a54:	4b14      	ldr	r3, [pc, #80]	; (8004aa8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004a56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a5a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004a64:	4910      	ldr	r1, [pc, #64]	; (8004aa8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004a66:	4313      	orrs	r3, r2
 8004a68:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004a6c:	69fb      	ldr	r3, [r7, #28]
 8004a6e:	2b01      	cmp	r3, #1
 8004a70:	d006      	beq.n	8004a80 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	f000 80d9 	beq.w	8004c32 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004a80:	4b09      	ldr	r3, [pc, #36]	; (8004aa8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	4a08      	ldr	r2, [pc, #32]	; (8004aa8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004a86:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004a8a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a8c:	f7fd ff48 	bl	8002920 <HAL_GetTick>
 8004a90:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004a92:	e00b      	b.n	8004aac <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004a94:	f7fd ff44 	bl	8002920 <HAL_GetTick>
 8004a98:	4602      	mov	r2, r0
 8004a9a:	697b      	ldr	r3, [r7, #20]
 8004a9c:	1ad3      	subs	r3, r2, r3
 8004a9e:	2b64      	cmp	r3, #100	; 0x64
 8004aa0:	d904      	bls.n	8004aac <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004aa2:	2303      	movs	r3, #3
 8004aa4:	e197      	b.n	8004dd6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8004aa6:	bf00      	nop
 8004aa8:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004aac:	4b6c      	ldr	r3, [pc, #432]	; (8004c60 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d1ed      	bne.n	8004a94 <HAL_RCCEx_PeriphCLKConfig+0x490>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	f003 0301 	and.w	r3, r3, #1
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d021      	beq.n	8004b08 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d11d      	bne.n	8004b08 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004acc:	4b64      	ldr	r3, [pc, #400]	; (8004c60 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004ace:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004ad2:	0c1b      	lsrs	r3, r3, #16
 8004ad4:	f003 0303 	and.w	r3, r3, #3
 8004ad8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004ada:	4b61      	ldr	r3, [pc, #388]	; (8004c60 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004adc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004ae0:	0e1b      	lsrs	r3, r3, #24
 8004ae2:	f003 030f 	and.w	r3, r3, #15
 8004ae6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	685b      	ldr	r3, [r3, #4]
 8004aec:	019a      	lsls	r2, r3, #6
 8004aee:	693b      	ldr	r3, [r7, #16]
 8004af0:	041b      	lsls	r3, r3, #16
 8004af2:	431a      	orrs	r2, r3
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	061b      	lsls	r3, r3, #24
 8004af8:	431a      	orrs	r2, r3
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	689b      	ldr	r3, [r3, #8]
 8004afe:	071b      	lsls	r3, r3, #28
 8004b00:	4957      	ldr	r1, [pc, #348]	; (8004c60 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004b02:	4313      	orrs	r3, r2
 8004b04:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d004      	beq.n	8004b1e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b18:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004b1c:	d00a      	beq.n	8004b34 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d02e      	beq.n	8004b88 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b2e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004b32:	d129      	bne.n	8004b88 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004b34:	4b4a      	ldr	r3, [pc, #296]	; (8004c60 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004b36:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004b3a:	0c1b      	lsrs	r3, r3, #16
 8004b3c:	f003 0303 	and.w	r3, r3, #3
 8004b40:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004b42:	4b47      	ldr	r3, [pc, #284]	; (8004c60 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004b44:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004b48:	0f1b      	lsrs	r3, r3, #28
 8004b4a:	f003 0307 	and.w	r3, r3, #7
 8004b4e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	685b      	ldr	r3, [r3, #4]
 8004b54:	019a      	lsls	r2, r3, #6
 8004b56:	693b      	ldr	r3, [r7, #16]
 8004b58:	041b      	lsls	r3, r3, #16
 8004b5a:	431a      	orrs	r2, r3
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	68db      	ldr	r3, [r3, #12]
 8004b60:	061b      	lsls	r3, r3, #24
 8004b62:	431a      	orrs	r2, r3
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	071b      	lsls	r3, r3, #28
 8004b68:	493d      	ldr	r1, [pc, #244]	; (8004c60 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004b6a:	4313      	orrs	r3, r2
 8004b6c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004b70:	4b3b      	ldr	r3, [pc, #236]	; (8004c60 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004b72:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004b76:	f023 021f 	bic.w	r2, r3, #31
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b7e:	3b01      	subs	r3, #1
 8004b80:	4937      	ldr	r1, [pc, #220]	; (8004c60 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004b82:	4313      	orrs	r3, r2
 8004b84:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d01d      	beq.n	8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004b94:	4b32      	ldr	r3, [pc, #200]	; (8004c60 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004b96:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004b9a:	0e1b      	lsrs	r3, r3, #24
 8004b9c:	f003 030f 	and.w	r3, r3, #15
 8004ba0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004ba2:	4b2f      	ldr	r3, [pc, #188]	; (8004c60 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004ba4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004ba8:	0f1b      	lsrs	r3, r3, #28
 8004baa:	f003 0307 	and.w	r3, r3, #7
 8004bae:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	685b      	ldr	r3, [r3, #4]
 8004bb4:	019a      	lsls	r2, r3, #6
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	691b      	ldr	r3, [r3, #16]
 8004bba:	041b      	lsls	r3, r3, #16
 8004bbc:	431a      	orrs	r2, r3
 8004bbe:	693b      	ldr	r3, [r7, #16]
 8004bc0:	061b      	lsls	r3, r3, #24
 8004bc2:	431a      	orrs	r2, r3
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	071b      	lsls	r3, r3, #28
 8004bc8:	4925      	ldr	r1, [pc, #148]	; (8004c60 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004bca:	4313      	orrs	r3, r2
 8004bcc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d011      	beq.n	8004c00 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	685b      	ldr	r3, [r3, #4]
 8004be0:	019a      	lsls	r2, r3, #6
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	691b      	ldr	r3, [r3, #16]
 8004be6:	041b      	lsls	r3, r3, #16
 8004be8:	431a      	orrs	r2, r3
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	68db      	ldr	r3, [r3, #12]
 8004bee:	061b      	lsls	r3, r3, #24
 8004bf0:	431a      	orrs	r2, r3
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	689b      	ldr	r3, [r3, #8]
 8004bf6:	071b      	lsls	r3, r3, #28
 8004bf8:	4919      	ldr	r1, [pc, #100]	; (8004c60 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004bfa:	4313      	orrs	r3, r2
 8004bfc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004c00:	4b17      	ldr	r3, [pc, #92]	; (8004c60 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	4a16      	ldr	r2, [pc, #88]	; (8004c60 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004c06:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004c0a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c0c:	f7fd fe88 	bl	8002920 <HAL_GetTick>
 8004c10:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004c12:	e008      	b.n	8004c26 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004c14:	f7fd fe84 	bl	8002920 <HAL_GetTick>
 8004c18:	4602      	mov	r2, r0
 8004c1a:	697b      	ldr	r3, [r7, #20]
 8004c1c:	1ad3      	subs	r3, r2, r3
 8004c1e:	2b64      	cmp	r3, #100	; 0x64
 8004c20:	d901      	bls.n	8004c26 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004c22:	2303      	movs	r3, #3
 8004c24:	e0d7      	b.n	8004dd6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004c26:	4b0e      	ldr	r3, [pc, #56]	; (8004c60 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d0f0      	beq.n	8004c14 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004c32:	69bb      	ldr	r3, [r7, #24]
 8004c34:	2b01      	cmp	r3, #1
 8004c36:	f040 80cd 	bne.w	8004dd4 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004c3a:	4b09      	ldr	r3, [pc, #36]	; (8004c60 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	4a08      	ldr	r2, [pc, #32]	; (8004c60 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004c40:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004c44:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c46:	f7fd fe6b 	bl	8002920 <HAL_GetTick>
 8004c4a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004c4c:	e00a      	b.n	8004c64 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004c4e:	f7fd fe67 	bl	8002920 <HAL_GetTick>
 8004c52:	4602      	mov	r2, r0
 8004c54:	697b      	ldr	r3, [r7, #20]
 8004c56:	1ad3      	subs	r3, r2, r3
 8004c58:	2b64      	cmp	r3, #100	; 0x64
 8004c5a:	d903      	bls.n	8004c64 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004c5c:	2303      	movs	r3, #3
 8004c5e:	e0ba      	b.n	8004dd6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8004c60:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004c64:	4b5e      	ldr	r3, [pc, #376]	; (8004de0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004c6c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004c70:	d0ed      	beq.n	8004c4e <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d003      	beq.n	8004c86 <HAL_RCCEx_PeriphCLKConfig+0x682>
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d009      	beq.n	8004c9a <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d02e      	beq.n	8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d12a      	bne.n	8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004c9a:	4b51      	ldr	r3, [pc, #324]	; (8004de0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004c9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ca0:	0c1b      	lsrs	r3, r3, #16
 8004ca2:	f003 0303 	and.w	r3, r3, #3
 8004ca6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004ca8:	4b4d      	ldr	r3, [pc, #308]	; (8004de0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004caa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cae:	0f1b      	lsrs	r3, r3, #28
 8004cb0:	f003 0307 	and.w	r3, r3, #7
 8004cb4:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	695b      	ldr	r3, [r3, #20]
 8004cba:	019a      	lsls	r2, r3, #6
 8004cbc:	693b      	ldr	r3, [r7, #16]
 8004cbe:	041b      	lsls	r3, r3, #16
 8004cc0:	431a      	orrs	r2, r3
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	699b      	ldr	r3, [r3, #24]
 8004cc6:	061b      	lsls	r3, r3, #24
 8004cc8:	431a      	orrs	r2, r3
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	071b      	lsls	r3, r3, #28
 8004cce:	4944      	ldr	r1, [pc, #272]	; (8004de0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004cd0:	4313      	orrs	r3, r2
 8004cd2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004cd6:	4b42      	ldr	r3, [pc, #264]	; (8004de0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004cd8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004cdc:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ce4:	3b01      	subs	r3, #1
 8004ce6:	021b      	lsls	r3, r3, #8
 8004ce8:	493d      	ldr	r1, [pc, #244]	; (8004de0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004cea:	4313      	orrs	r3, r2
 8004cec:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d022      	beq.n	8004d42 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004d00:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004d04:	d11d      	bne.n	8004d42 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004d06:	4b36      	ldr	r3, [pc, #216]	; (8004de0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004d08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d0c:	0e1b      	lsrs	r3, r3, #24
 8004d0e:	f003 030f 	and.w	r3, r3, #15
 8004d12:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004d14:	4b32      	ldr	r3, [pc, #200]	; (8004de0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004d16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d1a:	0f1b      	lsrs	r3, r3, #28
 8004d1c:	f003 0307 	and.w	r3, r3, #7
 8004d20:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	695b      	ldr	r3, [r3, #20]
 8004d26:	019a      	lsls	r2, r3, #6
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	6a1b      	ldr	r3, [r3, #32]
 8004d2c:	041b      	lsls	r3, r3, #16
 8004d2e:	431a      	orrs	r2, r3
 8004d30:	693b      	ldr	r3, [r7, #16]
 8004d32:	061b      	lsls	r3, r3, #24
 8004d34:	431a      	orrs	r2, r3
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	071b      	lsls	r3, r3, #28
 8004d3a:	4929      	ldr	r1, [pc, #164]	; (8004de0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004d3c:	4313      	orrs	r3, r2
 8004d3e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f003 0308 	and.w	r3, r3, #8
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d028      	beq.n	8004da0 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004d4e:	4b24      	ldr	r3, [pc, #144]	; (8004de0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004d50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d54:	0e1b      	lsrs	r3, r3, #24
 8004d56:	f003 030f 	and.w	r3, r3, #15
 8004d5a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004d5c:	4b20      	ldr	r3, [pc, #128]	; (8004de0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004d5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d62:	0c1b      	lsrs	r3, r3, #16
 8004d64:	f003 0303 	and.w	r3, r3, #3
 8004d68:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	695b      	ldr	r3, [r3, #20]
 8004d6e:	019a      	lsls	r2, r3, #6
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	041b      	lsls	r3, r3, #16
 8004d74:	431a      	orrs	r2, r3
 8004d76:	693b      	ldr	r3, [r7, #16]
 8004d78:	061b      	lsls	r3, r3, #24
 8004d7a:	431a      	orrs	r2, r3
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	69db      	ldr	r3, [r3, #28]
 8004d80:	071b      	lsls	r3, r3, #28
 8004d82:	4917      	ldr	r1, [pc, #92]	; (8004de0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004d84:	4313      	orrs	r3, r2
 8004d86:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004d8a:	4b15      	ldr	r3, [pc, #84]	; (8004de0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004d8c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004d90:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d98:	4911      	ldr	r1, [pc, #68]	; (8004de0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004d9a:	4313      	orrs	r3, r2
 8004d9c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004da0:	4b0f      	ldr	r3, [pc, #60]	; (8004de0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	4a0e      	ldr	r2, [pc, #56]	; (8004de0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004da6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004daa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004dac:	f7fd fdb8 	bl	8002920 <HAL_GetTick>
 8004db0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004db2:	e008      	b.n	8004dc6 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004db4:	f7fd fdb4 	bl	8002920 <HAL_GetTick>
 8004db8:	4602      	mov	r2, r0
 8004dba:	697b      	ldr	r3, [r7, #20]
 8004dbc:	1ad3      	subs	r3, r2, r3
 8004dbe:	2b64      	cmp	r3, #100	; 0x64
 8004dc0:	d901      	bls.n	8004dc6 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004dc2:	2303      	movs	r3, #3
 8004dc4:	e007      	b.n	8004dd6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004dc6:	4b06      	ldr	r3, [pc, #24]	; (8004de0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004dce:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004dd2:	d1ef      	bne.n	8004db4 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8004dd4:	2300      	movs	r3, #0
}
 8004dd6:	4618      	mov	r0, r3
 8004dd8:	3720      	adds	r7, #32
 8004dda:	46bd      	mov	sp, r7
 8004ddc:	bd80      	pop	{r7, pc}
 8004dde:	bf00      	nop
 8004de0:	40023800 	.word	0x40023800

08004de4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004de4:	b580      	push	{r7, lr}
 8004de6:	b082      	sub	sp, #8
 8004de8:	af00      	add	r7, sp, #0
 8004dea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d101      	bne.n	8004df6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004df2:	2301      	movs	r3, #1
 8004df4:	e049      	b.n	8004e8a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004dfc:	b2db      	uxtb	r3, r3
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d106      	bne.n	8004e10 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	2200      	movs	r2, #0
 8004e06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004e0a:	6878      	ldr	r0, [r7, #4]
 8004e0c:	f7fd fb54 	bl	80024b8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	2202      	movs	r2, #2
 8004e14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681a      	ldr	r2, [r3, #0]
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	3304      	adds	r3, #4
 8004e20:	4619      	mov	r1, r3
 8004e22:	4610      	mov	r0, r2
 8004e24:	f000 fca2 	bl	800576c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	2201      	movs	r2, #1
 8004e2c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	2201      	movs	r2, #1
 8004e34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	2201      	movs	r2, #1
 8004e3c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	2201      	movs	r2, #1
 8004e44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	2201      	movs	r2, #1
 8004e4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	2201      	movs	r2, #1
 8004e54:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	2201      	movs	r2, #1
 8004e5c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	2201      	movs	r2, #1
 8004e64:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	2201      	movs	r2, #1
 8004e6c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	2201      	movs	r2, #1
 8004e74:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	2201      	movs	r2, #1
 8004e7c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	2201      	movs	r2, #1
 8004e84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004e88:	2300      	movs	r3, #0
}
 8004e8a:	4618      	mov	r0, r3
 8004e8c:	3708      	adds	r7, #8
 8004e8e:	46bd      	mov	sp, r7
 8004e90:	bd80      	pop	{r7, pc}

08004e92 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004e92:	b580      	push	{r7, lr}
 8004e94:	b082      	sub	sp, #8
 8004e96:	af00      	add	r7, sp, #0
 8004e98:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d101      	bne.n	8004ea4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004ea0:	2301      	movs	r3, #1
 8004ea2:	e049      	b.n	8004f38 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004eaa:	b2db      	uxtb	r3, r3
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d106      	bne.n	8004ebe <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	2200      	movs	r2, #0
 8004eb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004eb8:	6878      	ldr	r0, [r7, #4]
 8004eba:	f000 f841 	bl	8004f40 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	2202      	movs	r2, #2
 8004ec2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681a      	ldr	r2, [r3, #0]
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	3304      	adds	r3, #4
 8004ece:	4619      	mov	r1, r3
 8004ed0:	4610      	mov	r0, r2
 8004ed2:	f000 fc4b 	bl	800576c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	2201      	movs	r2, #1
 8004eda:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	2201      	movs	r2, #1
 8004ee2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	2201      	movs	r2, #1
 8004eea:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	2201      	movs	r2, #1
 8004ef2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	2201      	movs	r2, #1
 8004efa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	2201      	movs	r2, #1
 8004f02:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	2201      	movs	r2, #1
 8004f0a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	2201      	movs	r2, #1
 8004f12:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	2201      	movs	r2, #1
 8004f1a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	2201      	movs	r2, #1
 8004f22:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	2201      	movs	r2, #1
 8004f2a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	2201      	movs	r2, #1
 8004f32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004f36:	2300      	movs	r3, #0
}
 8004f38:	4618      	mov	r0, r3
 8004f3a:	3708      	adds	r7, #8
 8004f3c:	46bd      	mov	sp, r7
 8004f3e:	bd80      	pop	{r7, pc}

08004f40 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004f40:	b480      	push	{r7}
 8004f42:	b083      	sub	sp, #12
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004f48:	bf00      	nop
 8004f4a:	370c      	adds	r7, #12
 8004f4c:	46bd      	mov	sp, r7
 8004f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f52:	4770      	bx	lr

08004f54 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004f54:	b580      	push	{r7, lr}
 8004f56:	b084      	sub	sp, #16
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	6078      	str	r0, [r7, #4]
 8004f5c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004f5e:	683b      	ldr	r3, [r7, #0]
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d109      	bne.n	8004f78 <HAL_TIM_PWM_Start+0x24>
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004f6a:	b2db      	uxtb	r3, r3
 8004f6c:	2b01      	cmp	r3, #1
 8004f6e:	bf14      	ite	ne
 8004f70:	2301      	movne	r3, #1
 8004f72:	2300      	moveq	r3, #0
 8004f74:	b2db      	uxtb	r3, r3
 8004f76:	e03c      	b.n	8004ff2 <HAL_TIM_PWM_Start+0x9e>
 8004f78:	683b      	ldr	r3, [r7, #0]
 8004f7a:	2b04      	cmp	r3, #4
 8004f7c:	d109      	bne.n	8004f92 <HAL_TIM_PWM_Start+0x3e>
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004f84:	b2db      	uxtb	r3, r3
 8004f86:	2b01      	cmp	r3, #1
 8004f88:	bf14      	ite	ne
 8004f8a:	2301      	movne	r3, #1
 8004f8c:	2300      	moveq	r3, #0
 8004f8e:	b2db      	uxtb	r3, r3
 8004f90:	e02f      	b.n	8004ff2 <HAL_TIM_PWM_Start+0x9e>
 8004f92:	683b      	ldr	r3, [r7, #0]
 8004f94:	2b08      	cmp	r3, #8
 8004f96:	d109      	bne.n	8004fac <HAL_TIM_PWM_Start+0x58>
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004f9e:	b2db      	uxtb	r3, r3
 8004fa0:	2b01      	cmp	r3, #1
 8004fa2:	bf14      	ite	ne
 8004fa4:	2301      	movne	r3, #1
 8004fa6:	2300      	moveq	r3, #0
 8004fa8:	b2db      	uxtb	r3, r3
 8004faa:	e022      	b.n	8004ff2 <HAL_TIM_PWM_Start+0x9e>
 8004fac:	683b      	ldr	r3, [r7, #0]
 8004fae:	2b0c      	cmp	r3, #12
 8004fb0:	d109      	bne.n	8004fc6 <HAL_TIM_PWM_Start+0x72>
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004fb8:	b2db      	uxtb	r3, r3
 8004fba:	2b01      	cmp	r3, #1
 8004fbc:	bf14      	ite	ne
 8004fbe:	2301      	movne	r3, #1
 8004fc0:	2300      	moveq	r3, #0
 8004fc2:	b2db      	uxtb	r3, r3
 8004fc4:	e015      	b.n	8004ff2 <HAL_TIM_PWM_Start+0x9e>
 8004fc6:	683b      	ldr	r3, [r7, #0]
 8004fc8:	2b10      	cmp	r3, #16
 8004fca:	d109      	bne.n	8004fe0 <HAL_TIM_PWM_Start+0x8c>
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004fd2:	b2db      	uxtb	r3, r3
 8004fd4:	2b01      	cmp	r3, #1
 8004fd6:	bf14      	ite	ne
 8004fd8:	2301      	movne	r3, #1
 8004fda:	2300      	moveq	r3, #0
 8004fdc:	b2db      	uxtb	r3, r3
 8004fde:	e008      	b.n	8004ff2 <HAL_TIM_PWM_Start+0x9e>
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004fe6:	b2db      	uxtb	r3, r3
 8004fe8:	2b01      	cmp	r3, #1
 8004fea:	bf14      	ite	ne
 8004fec:	2301      	movne	r3, #1
 8004fee:	2300      	moveq	r3, #0
 8004ff0:	b2db      	uxtb	r3, r3
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d001      	beq.n	8004ffa <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8004ff6:	2301      	movs	r3, #1
 8004ff8:	e092      	b.n	8005120 <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004ffa:	683b      	ldr	r3, [r7, #0]
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d104      	bne.n	800500a <HAL_TIM_PWM_Start+0xb6>
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	2202      	movs	r2, #2
 8005004:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005008:	e023      	b.n	8005052 <HAL_TIM_PWM_Start+0xfe>
 800500a:	683b      	ldr	r3, [r7, #0]
 800500c:	2b04      	cmp	r3, #4
 800500e:	d104      	bne.n	800501a <HAL_TIM_PWM_Start+0xc6>
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	2202      	movs	r2, #2
 8005014:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005018:	e01b      	b.n	8005052 <HAL_TIM_PWM_Start+0xfe>
 800501a:	683b      	ldr	r3, [r7, #0]
 800501c:	2b08      	cmp	r3, #8
 800501e:	d104      	bne.n	800502a <HAL_TIM_PWM_Start+0xd6>
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	2202      	movs	r2, #2
 8005024:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005028:	e013      	b.n	8005052 <HAL_TIM_PWM_Start+0xfe>
 800502a:	683b      	ldr	r3, [r7, #0]
 800502c:	2b0c      	cmp	r3, #12
 800502e:	d104      	bne.n	800503a <HAL_TIM_PWM_Start+0xe6>
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	2202      	movs	r2, #2
 8005034:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005038:	e00b      	b.n	8005052 <HAL_TIM_PWM_Start+0xfe>
 800503a:	683b      	ldr	r3, [r7, #0]
 800503c:	2b10      	cmp	r3, #16
 800503e:	d104      	bne.n	800504a <HAL_TIM_PWM_Start+0xf6>
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	2202      	movs	r2, #2
 8005044:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005048:	e003      	b.n	8005052 <HAL_TIM_PWM_Start+0xfe>
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	2202      	movs	r2, #2
 800504e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	2201      	movs	r2, #1
 8005058:	6839      	ldr	r1, [r7, #0]
 800505a:	4618      	mov	r0, r3
 800505c:	f000 ff1e 	bl	8005e9c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	4a30      	ldr	r2, [pc, #192]	; (8005128 <HAL_TIM_PWM_Start+0x1d4>)
 8005066:	4293      	cmp	r3, r2
 8005068:	d004      	beq.n	8005074 <HAL_TIM_PWM_Start+0x120>
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	4a2f      	ldr	r2, [pc, #188]	; (800512c <HAL_TIM_PWM_Start+0x1d8>)
 8005070:	4293      	cmp	r3, r2
 8005072:	d101      	bne.n	8005078 <HAL_TIM_PWM_Start+0x124>
 8005074:	2301      	movs	r3, #1
 8005076:	e000      	b.n	800507a <HAL_TIM_PWM_Start+0x126>
 8005078:	2300      	movs	r3, #0
 800507a:	2b00      	cmp	r3, #0
 800507c:	d007      	beq.n	800508e <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800508c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	4a25      	ldr	r2, [pc, #148]	; (8005128 <HAL_TIM_PWM_Start+0x1d4>)
 8005094:	4293      	cmp	r3, r2
 8005096:	d022      	beq.n	80050de <HAL_TIM_PWM_Start+0x18a>
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050a0:	d01d      	beq.n	80050de <HAL_TIM_PWM_Start+0x18a>
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	4a22      	ldr	r2, [pc, #136]	; (8005130 <HAL_TIM_PWM_Start+0x1dc>)
 80050a8:	4293      	cmp	r3, r2
 80050aa:	d018      	beq.n	80050de <HAL_TIM_PWM_Start+0x18a>
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	4a20      	ldr	r2, [pc, #128]	; (8005134 <HAL_TIM_PWM_Start+0x1e0>)
 80050b2:	4293      	cmp	r3, r2
 80050b4:	d013      	beq.n	80050de <HAL_TIM_PWM_Start+0x18a>
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	4a1f      	ldr	r2, [pc, #124]	; (8005138 <HAL_TIM_PWM_Start+0x1e4>)
 80050bc:	4293      	cmp	r3, r2
 80050be:	d00e      	beq.n	80050de <HAL_TIM_PWM_Start+0x18a>
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	4a19      	ldr	r2, [pc, #100]	; (800512c <HAL_TIM_PWM_Start+0x1d8>)
 80050c6:	4293      	cmp	r3, r2
 80050c8:	d009      	beq.n	80050de <HAL_TIM_PWM_Start+0x18a>
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	4a1b      	ldr	r2, [pc, #108]	; (800513c <HAL_TIM_PWM_Start+0x1e8>)
 80050d0:	4293      	cmp	r3, r2
 80050d2:	d004      	beq.n	80050de <HAL_TIM_PWM_Start+0x18a>
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	4a19      	ldr	r2, [pc, #100]	; (8005140 <HAL_TIM_PWM_Start+0x1ec>)
 80050da:	4293      	cmp	r3, r2
 80050dc:	d115      	bne.n	800510a <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	689a      	ldr	r2, [r3, #8]
 80050e4:	4b17      	ldr	r3, [pc, #92]	; (8005144 <HAL_TIM_PWM_Start+0x1f0>)
 80050e6:	4013      	ands	r3, r2
 80050e8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	2b06      	cmp	r3, #6
 80050ee:	d015      	beq.n	800511c <HAL_TIM_PWM_Start+0x1c8>
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80050f6:	d011      	beq.n	800511c <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	681a      	ldr	r2, [r3, #0]
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	f042 0201 	orr.w	r2, r2, #1
 8005106:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005108:	e008      	b.n	800511c <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	681a      	ldr	r2, [r3, #0]
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	f042 0201 	orr.w	r2, r2, #1
 8005118:	601a      	str	r2, [r3, #0]
 800511a:	e000      	b.n	800511e <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800511c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800511e:	2300      	movs	r3, #0
}
 8005120:	4618      	mov	r0, r3
 8005122:	3710      	adds	r7, #16
 8005124:	46bd      	mov	sp, r7
 8005126:	bd80      	pop	{r7, pc}
 8005128:	40010000 	.word	0x40010000
 800512c:	40010400 	.word	0x40010400
 8005130:	40000400 	.word	0x40000400
 8005134:	40000800 	.word	0x40000800
 8005138:	40000c00 	.word	0x40000c00
 800513c:	40014000 	.word	0x40014000
 8005140:	40001800 	.word	0x40001800
 8005144:	00010007 	.word	0x00010007

08005148 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8005148:	b580      	push	{r7, lr}
 800514a:	b086      	sub	sp, #24
 800514c:	af00      	add	r7, sp, #0
 800514e:	6078      	str	r0, [r7, #4]
 8005150:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	2b00      	cmp	r3, #0
 8005156:	d101      	bne.n	800515c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005158:	2301      	movs	r3, #1
 800515a:	e08f      	b.n	800527c <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005162:	b2db      	uxtb	r3, r3
 8005164:	2b00      	cmp	r3, #0
 8005166:	d106      	bne.n	8005176 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	2200      	movs	r2, #0
 800516c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005170:	6878      	ldr	r0, [r7, #4]
 8005172:	f7fd f95d 	bl	8002430 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	2202      	movs	r2, #2
 800517a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	6899      	ldr	r1, [r3, #8]
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681a      	ldr	r2, [r3, #0]
 8005188:	4b3e      	ldr	r3, [pc, #248]	; (8005284 <HAL_TIM_Encoder_Init+0x13c>)
 800518a:	400b      	ands	r3, r1
 800518c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681a      	ldr	r2, [r3, #0]
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	3304      	adds	r3, #4
 8005196:	4619      	mov	r1, r3
 8005198:	4610      	mov	r0, r2
 800519a:	f000 fae7 	bl	800576c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	689b      	ldr	r3, [r3, #8]
 80051a4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	699b      	ldr	r3, [r3, #24]
 80051ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	6a1b      	ldr	r3, [r3, #32]
 80051b4:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80051b6:	683b      	ldr	r3, [r7, #0]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	697a      	ldr	r2, [r7, #20]
 80051bc:	4313      	orrs	r3, r2
 80051be:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80051c0:	693a      	ldr	r2, [r7, #16]
 80051c2:	4b31      	ldr	r3, [pc, #196]	; (8005288 <HAL_TIM_Encoder_Init+0x140>)
 80051c4:	4013      	ands	r3, r2
 80051c6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80051c8:	683b      	ldr	r3, [r7, #0]
 80051ca:	689a      	ldr	r2, [r3, #8]
 80051cc:	683b      	ldr	r3, [r7, #0]
 80051ce:	699b      	ldr	r3, [r3, #24]
 80051d0:	021b      	lsls	r3, r3, #8
 80051d2:	4313      	orrs	r3, r2
 80051d4:	693a      	ldr	r2, [r7, #16]
 80051d6:	4313      	orrs	r3, r2
 80051d8:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80051da:	693a      	ldr	r2, [r7, #16]
 80051dc:	4b2b      	ldr	r3, [pc, #172]	; (800528c <HAL_TIM_Encoder_Init+0x144>)
 80051de:	4013      	ands	r3, r2
 80051e0:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80051e2:	693a      	ldr	r2, [r7, #16]
 80051e4:	4b2a      	ldr	r3, [pc, #168]	; (8005290 <HAL_TIM_Encoder_Init+0x148>)
 80051e6:	4013      	ands	r3, r2
 80051e8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80051ea:	683b      	ldr	r3, [r7, #0]
 80051ec:	68da      	ldr	r2, [r3, #12]
 80051ee:	683b      	ldr	r3, [r7, #0]
 80051f0:	69db      	ldr	r3, [r3, #28]
 80051f2:	021b      	lsls	r3, r3, #8
 80051f4:	4313      	orrs	r3, r2
 80051f6:	693a      	ldr	r2, [r7, #16]
 80051f8:	4313      	orrs	r3, r2
 80051fa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80051fc:	683b      	ldr	r3, [r7, #0]
 80051fe:	691b      	ldr	r3, [r3, #16]
 8005200:	011a      	lsls	r2, r3, #4
 8005202:	683b      	ldr	r3, [r7, #0]
 8005204:	6a1b      	ldr	r3, [r3, #32]
 8005206:	031b      	lsls	r3, r3, #12
 8005208:	4313      	orrs	r3, r2
 800520a:	693a      	ldr	r2, [r7, #16]
 800520c:	4313      	orrs	r3, r2
 800520e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8005216:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800521e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005220:	683b      	ldr	r3, [r7, #0]
 8005222:	685a      	ldr	r2, [r3, #4]
 8005224:	683b      	ldr	r3, [r7, #0]
 8005226:	695b      	ldr	r3, [r3, #20]
 8005228:	011b      	lsls	r3, r3, #4
 800522a:	4313      	orrs	r3, r2
 800522c:	68fa      	ldr	r2, [r7, #12]
 800522e:	4313      	orrs	r3, r2
 8005230:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	697a      	ldr	r2, [r7, #20]
 8005238:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	693a      	ldr	r2, [r7, #16]
 8005240:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	68fa      	ldr	r2, [r7, #12]
 8005248:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	2201      	movs	r2, #1
 800524e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	2201      	movs	r2, #1
 8005256:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	2201      	movs	r2, #1
 800525e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	2201      	movs	r2, #1
 8005266:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	2201      	movs	r2, #1
 800526e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	2201      	movs	r2, #1
 8005276:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800527a:	2300      	movs	r3, #0
}
 800527c:	4618      	mov	r0, r3
 800527e:	3718      	adds	r7, #24
 8005280:	46bd      	mov	sp, r7
 8005282:	bd80      	pop	{r7, pc}
 8005284:	fffebff8 	.word	0xfffebff8
 8005288:	fffffcfc 	.word	0xfffffcfc
 800528c:	fffff3f3 	.word	0xfffff3f3
 8005290:	ffff0f0f 	.word	0xffff0f0f

08005294 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005294:	b580      	push	{r7, lr}
 8005296:	b084      	sub	sp, #16
 8005298:	af00      	add	r7, sp, #0
 800529a:	6078      	str	r0, [r7, #4]
 800529c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80052a4:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80052ac:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80052b4:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80052bc:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80052be:	683b      	ldr	r3, [r7, #0]
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d110      	bne.n	80052e6 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80052c4:	7bfb      	ldrb	r3, [r7, #15]
 80052c6:	2b01      	cmp	r3, #1
 80052c8:	d102      	bne.n	80052d0 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80052ca:	7b7b      	ldrb	r3, [r7, #13]
 80052cc:	2b01      	cmp	r3, #1
 80052ce:	d001      	beq.n	80052d4 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80052d0:	2301      	movs	r3, #1
 80052d2:	e069      	b.n	80053a8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	2202      	movs	r2, #2
 80052d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	2202      	movs	r2, #2
 80052e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80052e4:	e031      	b.n	800534a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80052e6:	683b      	ldr	r3, [r7, #0]
 80052e8:	2b04      	cmp	r3, #4
 80052ea:	d110      	bne.n	800530e <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80052ec:	7bbb      	ldrb	r3, [r7, #14]
 80052ee:	2b01      	cmp	r3, #1
 80052f0:	d102      	bne.n	80052f8 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80052f2:	7b3b      	ldrb	r3, [r7, #12]
 80052f4:	2b01      	cmp	r3, #1
 80052f6:	d001      	beq.n	80052fc <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80052f8:	2301      	movs	r3, #1
 80052fa:	e055      	b.n	80053a8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	2202      	movs	r2, #2
 8005300:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	2202      	movs	r2, #2
 8005308:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800530c:	e01d      	b.n	800534a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800530e:	7bfb      	ldrb	r3, [r7, #15]
 8005310:	2b01      	cmp	r3, #1
 8005312:	d108      	bne.n	8005326 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005314:	7bbb      	ldrb	r3, [r7, #14]
 8005316:	2b01      	cmp	r3, #1
 8005318:	d105      	bne.n	8005326 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800531a:	7b7b      	ldrb	r3, [r7, #13]
 800531c:	2b01      	cmp	r3, #1
 800531e:	d102      	bne.n	8005326 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005320:	7b3b      	ldrb	r3, [r7, #12]
 8005322:	2b01      	cmp	r3, #1
 8005324:	d001      	beq.n	800532a <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8005326:	2301      	movs	r3, #1
 8005328:	e03e      	b.n	80053a8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	2202      	movs	r2, #2
 800532e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	2202      	movs	r2, #2
 8005336:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	2202      	movs	r2, #2
 800533e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	2202      	movs	r2, #2
 8005346:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800534a:	683b      	ldr	r3, [r7, #0]
 800534c:	2b00      	cmp	r3, #0
 800534e:	d003      	beq.n	8005358 <HAL_TIM_Encoder_Start+0xc4>
 8005350:	683b      	ldr	r3, [r7, #0]
 8005352:	2b04      	cmp	r3, #4
 8005354:	d008      	beq.n	8005368 <HAL_TIM_Encoder_Start+0xd4>
 8005356:	e00f      	b.n	8005378 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	2201      	movs	r2, #1
 800535e:	2100      	movs	r1, #0
 8005360:	4618      	mov	r0, r3
 8005362:	f000 fd9b 	bl	8005e9c <TIM_CCxChannelCmd>
      break;
 8005366:	e016      	b.n	8005396 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	2201      	movs	r2, #1
 800536e:	2104      	movs	r1, #4
 8005370:	4618      	mov	r0, r3
 8005372:	f000 fd93 	bl	8005e9c <TIM_CCxChannelCmd>
      break;
 8005376:	e00e      	b.n	8005396 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	2201      	movs	r2, #1
 800537e:	2100      	movs	r1, #0
 8005380:	4618      	mov	r0, r3
 8005382:	f000 fd8b 	bl	8005e9c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	2201      	movs	r2, #1
 800538c:	2104      	movs	r1, #4
 800538e:	4618      	mov	r0, r3
 8005390:	f000 fd84 	bl	8005e9c <TIM_CCxChannelCmd>
      break;
 8005394:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	681a      	ldr	r2, [r3, #0]
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	f042 0201 	orr.w	r2, r2, #1
 80053a4:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80053a6:	2300      	movs	r3, #0
}
 80053a8:	4618      	mov	r0, r3
 80053aa:	3710      	adds	r7, #16
 80053ac:	46bd      	mov	sp, r7
 80053ae:	bd80      	pop	{r7, pc}

080053b0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80053b0:	b580      	push	{r7, lr}
 80053b2:	b086      	sub	sp, #24
 80053b4:	af00      	add	r7, sp, #0
 80053b6:	60f8      	str	r0, [r7, #12]
 80053b8:	60b9      	str	r1, [r7, #8]
 80053ba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80053bc:	2300      	movs	r3, #0
 80053be:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80053c6:	2b01      	cmp	r3, #1
 80053c8:	d101      	bne.n	80053ce <HAL_TIM_PWM_ConfigChannel+0x1e>
 80053ca:	2302      	movs	r3, #2
 80053cc:	e0ff      	b.n	80055ce <HAL_TIM_PWM_ConfigChannel+0x21e>
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	2201      	movs	r2, #1
 80053d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	2b14      	cmp	r3, #20
 80053da:	f200 80f0 	bhi.w	80055be <HAL_TIM_PWM_ConfigChannel+0x20e>
 80053de:	a201      	add	r2, pc, #4	; (adr r2, 80053e4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80053e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053e4:	08005439 	.word	0x08005439
 80053e8:	080055bf 	.word	0x080055bf
 80053ec:	080055bf 	.word	0x080055bf
 80053f0:	080055bf 	.word	0x080055bf
 80053f4:	08005479 	.word	0x08005479
 80053f8:	080055bf 	.word	0x080055bf
 80053fc:	080055bf 	.word	0x080055bf
 8005400:	080055bf 	.word	0x080055bf
 8005404:	080054bb 	.word	0x080054bb
 8005408:	080055bf 	.word	0x080055bf
 800540c:	080055bf 	.word	0x080055bf
 8005410:	080055bf 	.word	0x080055bf
 8005414:	080054fb 	.word	0x080054fb
 8005418:	080055bf 	.word	0x080055bf
 800541c:	080055bf 	.word	0x080055bf
 8005420:	080055bf 	.word	0x080055bf
 8005424:	0800553d 	.word	0x0800553d
 8005428:	080055bf 	.word	0x080055bf
 800542c:	080055bf 	.word	0x080055bf
 8005430:	080055bf 	.word	0x080055bf
 8005434:	0800557d 	.word	0x0800557d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	68b9      	ldr	r1, [r7, #8]
 800543e:	4618      	mov	r0, r3
 8005440:	f000 fa34 	bl	80058ac <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	699a      	ldr	r2, [r3, #24]
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	f042 0208 	orr.w	r2, r2, #8
 8005452:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	699a      	ldr	r2, [r3, #24]
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	f022 0204 	bic.w	r2, r2, #4
 8005462:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	6999      	ldr	r1, [r3, #24]
 800546a:	68bb      	ldr	r3, [r7, #8]
 800546c:	691a      	ldr	r2, [r3, #16]
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	430a      	orrs	r2, r1
 8005474:	619a      	str	r2, [r3, #24]
      break;
 8005476:	e0a5      	b.n	80055c4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	68b9      	ldr	r1, [r7, #8]
 800547e:	4618      	mov	r0, r3
 8005480:	f000 fa86 	bl	8005990 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	699a      	ldr	r2, [r3, #24]
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005492:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	699a      	ldr	r2, [r3, #24]
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80054a2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	6999      	ldr	r1, [r3, #24]
 80054aa:	68bb      	ldr	r3, [r7, #8]
 80054ac:	691b      	ldr	r3, [r3, #16]
 80054ae:	021a      	lsls	r2, r3, #8
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	430a      	orrs	r2, r1
 80054b6:	619a      	str	r2, [r3, #24]
      break;
 80054b8:	e084      	b.n	80055c4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	68b9      	ldr	r1, [r7, #8]
 80054c0:	4618      	mov	r0, r3
 80054c2:	f000 fadd 	bl	8005a80 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	69da      	ldr	r2, [r3, #28]
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	f042 0208 	orr.w	r2, r2, #8
 80054d4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	69da      	ldr	r2, [r3, #28]
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	f022 0204 	bic.w	r2, r2, #4
 80054e4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	69d9      	ldr	r1, [r3, #28]
 80054ec:	68bb      	ldr	r3, [r7, #8]
 80054ee:	691a      	ldr	r2, [r3, #16]
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	430a      	orrs	r2, r1
 80054f6:	61da      	str	r2, [r3, #28]
      break;
 80054f8:	e064      	b.n	80055c4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	68b9      	ldr	r1, [r7, #8]
 8005500:	4618      	mov	r0, r3
 8005502:	f000 fb33 	bl	8005b6c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	69da      	ldr	r2, [r3, #28]
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005514:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	69da      	ldr	r2, [r3, #28]
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005524:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	69d9      	ldr	r1, [r3, #28]
 800552c:	68bb      	ldr	r3, [r7, #8]
 800552e:	691b      	ldr	r3, [r3, #16]
 8005530:	021a      	lsls	r2, r3, #8
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	430a      	orrs	r2, r1
 8005538:	61da      	str	r2, [r3, #28]
      break;
 800553a:	e043      	b.n	80055c4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	68b9      	ldr	r1, [r7, #8]
 8005542:	4618      	mov	r0, r3
 8005544:	f000 fb6a 	bl	8005c1c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	f042 0208 	orr.w	r2, r2, #8
 8005556:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	f022 0204 	bic.w	r2, r2, #4
 8005566:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800556e:	68bb      	ldr	r3, [r7, #8]
 8005570:	691a      	ldr	r2, [r3, #16]
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	430a      	orrs	r2, r1
 8005578:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800557a:	e023      	b.n	80055c4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	68b9      	ldr	r1, [r7, #8]
 8005582:	4618      	mov	r0, r3
 8005584:	f000 fb9c 	bl	8005cc0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005596:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80055a6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80055ae:	68bb      	ldr	r3, [r7, #8]
 80055b0:	691b      	ldr	r3, [r3, #16]
 80055b2:	021a      	lsls	r2, r3, #8
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	430a      	orrs	r2, r1
 80055ba:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80055bc:	e002      	b.n	80055c4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80055be:	2301      	movs	r3, #1
 80055c0:	75fb      	strb	r3, [r7, #23]
      break;
 80055c2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	2200      	movs	r2, #0
 80055c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80055cc:	7dfb      	ldrb	r3, [r7, #23]
}
 80055ce:	4618      	mov	r0, r3
 80055d0:	3718      	adds	r7, #24
 80055d2:	46bd      	mov	sp, r7
 80055d4:	bd80      	pop	{r7, pc}
 80055d6:	bf00      	nop

080055d8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80055d8:	b580      	push	{r7, lr}
 80055da:	b084      	sub	sp, #16
 80055dc:	af00      	add	r7, sp, #0
 80055de:	6078      	str	r0, [r7, #4]
 80055e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80055e2:	2300      	movs	r3, #0
 80055e4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80055ec:	2b01      	cmp	r3, #1
 80055ee:	d101      	bne.n	80055f4 <HAL_TIM_ConfigClockSource+0x1c>
 80055f0:	2302      	movs	r3, #2
 80055f2:	e0b4      	b.n	800575e <HAL_TIM_ConfigClockSource+0x186>
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	2201      	movs	r2, #1
 80055f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	2202      	movs	r2, #2
 8005600:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	689b      	ldr	r3, [r3, #8]
 800560a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800560c:	68ba      	ldr	r2, [r7, #8]
 800560e:	4b56      	ldr	r3, [pc, #344]	; (8005768 <HAL_TIM_ConfigClockSource+0x190>)
 8005610:	4013      	ands	r3, r2
 8005612:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005614:	68bb      	ldr	r3, [r7, #8]
 8005616:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800561a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	68ba      	ldr	r2, [r7, #8]
 8005622:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005624:	683b      	ldr	r3, [r7, #0]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800562c:	d03e      	beq.n	80056ac <HAL_TIM_ConfigClockSource+0xd4>
 800562e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005632:	f200 8087 	bhi.w	8005744 <HAL_TIM_ConfigClockSource+0x16c>
 8005636:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800563a:	f000 8086 	beq.w	800574a <HAL_TIM_ConfigClockSource+0x172>
 800563e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005642:	d87f      	bhi.n	8005744 <HAL_TIM_ConfigClockSource+0x16c>
 8005644:	2b70      	cmp	r3, #112	; 0x70
 8005646:	d01a      	beq.n	800567e <HAL_TIM_ConfigClockSource+0xa6>
 8005648:	2b70      	cmp	r3, #112	; 0x70
 800564a:	d87b      	bhi.n	8005744 <HAL_TIM_ConfigClockSource+0x16c>
 800564c:	2b60      	cmp	r3, #96	; 0x60
 800564e:	d050      	beq.n	80056f2 <HAL_TIM_ConfigClockSource+0x11a>
 8005650:	2b60      	cmp	r3, #96	; 0x60
 8005652:	d877      	bhi.n	8005744 <HAL_TIM_ConfigClockSource+0x16c>
 8005654:	2b50      	cmp	r3, #80	; 0x50
 8005656:	d03c      	beq.n	80056d2 <HAL_TIM_ConfigClockSource+0xfa>
 8005658:	2b50      	cmp	r3, #80	; 0x50
 800565a:	d873      	bhi.n	8005744 <HAL_TIM_ConfigClockSource+0x16c>
 800565c:	2b40      	cmp	r3, #64	; 0x40
 800565e:	d058      	beq.n	8005712 <HAL_TIM_ConfigClockSource+0x13a>
 8005660:	2b40      	cmp	r3, #64	; 0x40
 8005662:	d86f      	bhi.n	8005744 <HAL_TIM_ConfigClockSource+0x16c>
 8005664:	2b30      	cmp	r3, #48	; 0x30
 8005666:	d064      	beq.n	8005732 <HAL_TIM_ConfigClockSource+0x15a>
 8005668:	2b30      	cmp	r3, #48	; 0x30
 800566a:	d86b      	bhi.n	8005744 <HAL_TIM_ConfigClockSource+0x16c>
 800566c:	2b20      	cmp	r3, #32
 800566e:	d060      	beq.n	8005732 <HAL_TIM_ConfigClockSource+0x15a>
 8005670:	2b20      	cmp	r3, #32
 8005672:	d867      	bhi.n	8005744 <HAL_TIM_ConfigClockSource+0x16c>
 8005674:	2b00      	cmp	r3, #0
 8005676:	d05c      	beq.n	8005732 <HAL_TIM_ConfigClockSource+0x15a>
 8005678:	2b10      	cmp	r3, #16
 800567a:	d05a      	beq.n	8005732 <HAL_TIM_ConfigClockSource+0x15a>
 800567c:	e062      	b.n	8005744 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	6818      	ldr	r0, [r3, #0]
 8005682:	683b      	ldr	r3, [r7, #0]
 8005684:	6899      	ldr	r1, [r3, #8]
 8005686:	683b      	ldr	r3, [r7, #0]
 8005688:	685a      	ldr	r2, [r3, #4]
 800568a:	683b      	ldr	r3, [r7, #0]
 800568c:	68db      	ldr	r3, [r3, #12]
 800568e:	f000 fbe5 	bl	8005e5c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	689b      	ldr	r3, [r3, #8]
 8005698:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800569a:	68bb      	ldr	r3, [r7, #8]
 800569c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80056a0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	68ba      	ldr	r2, [r7, #8]
 80056a8:	609a      	str	r2, [r3, #8]
      break;
 80056aa:	e04f      	b.n	800574c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	6818      	ldr	r0, [r3, #0]
 80056b0:	683b      	ldr	r3, [r7, #0]
 80056b2:	6899      	ldr	r1, [r3, #8]
 80056b4:	683b      	ldr	r3, [r7, #0]
 80056b6:	685a      	ldr	r2, [r3, #4]
 80056b8:	683b      	ldr	r3, [r7, #0]
 80056ba:	68db      	ldr	r3, [r3, #12]
 80056bc:	f000 fbce 	bl	8005e5c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	689a      	ldr	r2, [r3, #8]
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80056ce:	609a      	str	r2, [r3, #8]
      break;
 80056d0:	e03c      	b.n	800574c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	6818      	ldr	r0, [r3, #0]
 80056d6:	683b      	ldr	r3, [r7, #0]
 80056d8:	6859      	ldr	r1, [r3, #4]
 80056da:	683b      	ldr	r3, [r7, #0]
 80056dc:	68db      	ldr	r3, [r3, #12]
 80056de:	461a      	mov	r2, r3
 80056e0:	f000 fb42 	bl	8005d68 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	2150      	movs	r1, #80	; 0x50
 80056ea:	4618      	mov	r0, r3
 80056ec:	f000 fb9b 	bl	8005e26 <TIM_ITRx_SetConfig>
      break;
 80056f0:	e02c      	b.n	800574c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	6818      	ldr	r0, [r3, #0]
 80056f6:	683b      	ldr	r3, [r7, #0]
 80056f8:	6859      	ldr	r1, [r3, #4]
 80056fa:	683b      	ldr	r3, [r7, #0]
 80056fc:	68db      	ldr	r3, [r3, #12]
 80056fe:	461a      	mov	r2, r3
 8005700:	f000 fb61 	bl	8005dc6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	2160      	movs	r1, #96	; 0x60
 800570a:	4618      	mov	r0, r3
 800570c:	f000 fb8b 	bl	8005e26 <TIM_ITRx_SetConfig>
      break;
 8005710:	e01c      	b.n	800574c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	6818      	ldr	r0, [r3, #0]
 8005716:	683b      	ldr	r3, [r7, #0]
 8005718:	6859      	ldr	r1, [r3, #4]
 800571a:	683b      	ldr	r3, [r7, #0]
 800571c:	68db      	ldr	r3, [r3, #12]
 800571e:	461a      	mov	r2, r3
 8005720:	f000 fb22 	bl	8005d68 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	2140      	movs	r1, #64	; 0x40
 800572a:	4618      	mov	r0, r3
 800572c:	f000 fb7b 	bl	8005e26 <TIM_ITRx_SetConfig>
      break;
 8005730:	e00c      	b.n	800574c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681a      	ldr	r2, [r3, #0]
 8005736:	683b      	ldr	r3, [r7, #0]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	4619      	mov	r1, r3
 800573c:	4610      	mov	r0, r2
 800573e:	f000 fb72 	bl	8005e26 <TIM_ITRx_SetConfig>
      break;
 8005742:	e003      	b.n	800574c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005744:	2301      	movs	r3, #1
 8005746:	73fb      	strb	r3, [r7, #15]
      break;
 8005748:	e000      	b.n	800574c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800574a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	2201      	movs	r2, #1
 8005750:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	2200      	movs	r2, #0
 8005758:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800575c:	7bfb      	ldrb	r3, [r7, #15]
}
 800575e:	4618      	mov	r0, r3
 8005760:	3710      	adds	r7, #16
 8005762:	46bd      	mov	sp, r7
 8005764:	bd80      	pop	{r7, pc}
 8005766:	bf00      	nop
 8005768:	fffeff88 	.word	0xfffeff88

0800576c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800576c:	b480      	push	{r7}
 800576e:	b085      	sub	sp, #20
 8005770:	af00      	add	r7, sp, #0
 8005772:	6078      	str	r0, [r7, #4]
 8005774:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	4a40      	ldr	r2, [pc, #256]	; (8005880 <TIM_Base_SetConfig+0x114>)
 8005780:	4293      	cmp	r3, r2
 8005782:	d013      	beq.n	80057ac <TIM_Base_SetConfig+0x40>
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800578a:	d00f      	beq.n	80057ac <TIM_Base_SetConfig+0x40>
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	4a3d      	ldr	r2, [pc, #244]	; (8005884 <TIM_Base_SetConfig+0x118>)
 8005790:	4293      	cmp	r3, r2
 8005792:	d00b      	beq.n	80057ac <TIM_Base_SetConfig+0x40>
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	4a3c      	ldr	r2, [pc, #240]	; (8005888 <TIM_Base_SetConfig+0x11c>)
 8005798:	4293      	cmp	r3, r2
 800579a:	d007      	beq.n	80057ac <TIM_Base_SetConfig+0x40>
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	4a3b      	ldr	r2, [pc, #236]	; (800588c <TIM_Base_SetConfig+0x120>)
 80057a0:	4293      	cmp	r3, r2
 80057a2:	d003      	beq.n	80057ac <TIM_Base_SetConfig+0x40>
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	4a3a      	ldr	r2, [pc, #232]	; (8005890 <TIM_Base_SetConfig+0x124>)
 80057a8:	4293      	cmp	r3, r2
 80057aa:	d108      	bne.n	80057be <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057b2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80057b4:	683b      	ldr	r3, [r7, #0]
 80057b6:	685b      	ldr	r3, [r3, #4]
 80057b8:	68fa      	ldr	r2, [r7, #12]
 80057ba:	4313      	orrs	r3, r2
 80057bc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	4a2f      	ldr	r2, [pc, #188]	; (8005880 <TIM_Base_SetConfig+0x114>)
 80057c2:	4293      	cmp	r3, r2
 80057c4:	d02b      	beq.n	800581e <TIM_Base_SetConfig+0xb2>
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80057cc:	d027      	beq.n	800581e <TIM_Base_SetConfig+0xb2>
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	4a2c      	ldr	r2, [pc, #176]	; (8005884 <TIM_Base_SetConfig+0x118>)
 80057d2:	4293      	cmp	r3, r2
 80057d4:	d023      	beq.n	800581e <TIM_Base_SetConfig+0xb2>
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	4a2b      	ldr	r2, [pc, #172]	; (8005888 <TIM_Base_SetConfig+0x11c>)
 80057da:	4293      	cmp	r3, r2
 80057dc:	d01f      	beq.n	800581e <TIM_Base_SetConfig+0xb2>
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	4a2a      	ldr	r2, [pc, #168]	; (800588c <TIM_Base_SetConfig+0x120>)
 80057e2:	4293      	cmp	r3, r2
 80057e4:	d01b      	beq.n	800581e <TIM_Base_SetConfig+0xb2>
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	4a29      	ldr	r2, [pc, #164]	; (8005890 <TIM_Base_SetConfig+0x124>)
 80057ea:	4293      	cmp	r3, r2
 80057ec:	d017      	beq.n	800581e <TIM_Base_SetConfig+0xb2>
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	4a28      	ldr	r2, [pc, #160]	; (8005894 <TIM_Base_SetConfig+0x128>)
 80057f2:	4293      	cmp	r3, r2
 80057f4:	d013      	beq.n	800581e <TIM_Base_SetConfig+0xb2>
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	4a27      	ldr	r2, [pc, #156]	; (8005898 <TIM_Base_SetConfig+0x12c>)
 80057fa:	4293      	cmp	r3, r2
 80057fc:	d00f      	beq.n	800581e <TIM_Base_SetConfig+0xb2>
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	4a26      	ldr	r2, [pc, #152]	; (800589c <TIM_Base_SetConfig+0x130>)
 8005802:	4293      	cmp	r3, r2
 8005804:	d00b      	beq.n	800581e <TIM_Base_SetConfig+0xb2>
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	4a25      	ldr	r2, [pc, #148]	; (80058a0 <TIM_Base_SetConfig+0x134>)
 800580a:	4293      	cmp	r3, r2
 800580c:	d007      	beq.n	800581e <TIM_Base_SetConfig+0xb2>
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	4a24      	ldr	r2, [pc, #144]	; (80058a4 <TIM_Base_SetConfig+0x138>)
 8005812:	4293      	cmp	r3, r2
 8005814:	d003      	beq.n	800581e <TIM_Base_SetConfig+0xb2>
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	4a23      	ldr	r2, [pc, #140]	; (80058a8 <TIM_Base_SetConfig+0x13c>)
 800581a:	4293      	cmp	r3, r2
 800581c:	d108      	bne.n	8005830 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005824:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005826:	683b      	ldr	r3, [r7, #0]
 8005828:	68db      	ldr	r3, [r3, #12]
 800582a:	68fa      	ldr	r2, [r7, #12]
 800582c:	4313      	orrs	r3, r2
 800582e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005836:	683b      	ldr	r3, [r7, #0]
 8005838:	695b      	ldr	r3, [r3, #20]
 800583a:	4313      	orrs	r3, r2
 800583c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	68fa      	ldr	r2, [r7, #12]
 8005842:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005844:	683b      	ldr	r3, [r7, #0]
 8005846:	689a      	ldr	r2, [r3, #8]
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800584c:	683b      	ldr	r3, [r7, #0]
 800584e:	681a      	ldr	r2, [r3, #0]
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	4a0a      	ldr	r2, [pc, #40]	; (8005880 <TIM_Base_SetConfig+0x114>)
 8005858:	4293      	cmp	r3, r2
 800585a:	d003      	beq.n	8005864 <TIM_Base_SetConfig+0xf8>
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	4a0c      	ldr	r2, [pc, #48]	; (8005890 <TIM_Base_SetConfig+0x124>)
 8005860:	4293      	cmp	r3, r2
 8005862:	d103      	bne.n	800586c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005864:	683b      	ldr	r3, [r7, #0]
 8005866:	691a      	ldr	r2, [r3, #16]
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	2201      	movs	r2, #1
 8005870:	615a      	str	r2, [r3, #20]
}
 8005872:	bf00      	nop
 8005874:	3714      	adds	r7, #20
 8005876:	46bd      	mov	sp, r7
 8005878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800587c:	4770      	bx	lr
 800587e:	bf00      	nop
 8005880:	40010000 	.word	0x40010000
 8005884:	40000400 	.word	0x40000400
 8005888:	40000800 	.word	0x40000800
 800588c:	40000c00 	.word	0x40000c00
 8005890:	40010400 	.word	0x40010400
 8005894:	40014000 	.word	0x40014000
 8005898:	40014400 	.word	0x40014400
 800589c:	40014800 	.word	0x40014800
 80058a0:	40001800 	.word	0x40001800
 80058a4:	40001c00 	.word	0x40001c00
 80058a8:	40002000 	.word	0x40002000

080058ac <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80058ac:	b480      	push	{r7}
 80058ae:	b087      	sub	sp, #28
 80058b0:	af00      	add	r7, sp, #0
 80058b2:	6078      	str	r0, [r7, #4]
 80058b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	6a1b      	ldr	r3, [r3, #32]
 80058ba:	f023 0201 	bic.w	r2, r3, #1
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	6a1b      	ldr	r3, [r3, #32]
 80058c6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	685b      	ldr	r3, [r3, #4]
 80058cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	699b      	ldr	r3, [r3, #24]
 80058d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80058d4:	68fa      	ldr	r2, [r7, #12]
 80058d6:	4b2b      	ldr	r3, [pc, #172]	; (8005984 <TIM_OC1_SetConfig+0xd8>)
 80058d8:	4013      	ands	r3, r2
 80058da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	f023 0303 	bic.w	r3, r3, #3
 80058e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80058e4:	683b      	ldr	r3, [r7, #0]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	68fa      	ldr	r2, [r7, #12]
 80058ea:	4313      	orrs	r3, r2
 80058ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80058ee:	697b      	ldr	r3, [r7, #20]
 80058f0:	f023 0302 	bic.w	r3, r3, #2
 80058f4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80058f6:	683b      	ldr	r3, [r7, #0]
 80058f8:	689b      	ldr	r3, [r3, #8]
 80058fa:	697a      	ldr	r2, [r7, #20]
 80058fc:	4313      	orrs	r3, r2
 80058fe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	4a21      	ldr	r2, [pc, #132]	; (8005988 <TIM_OC1_SetConfig+0xdc>)
 8005904:	4293      	cmp	r3, r2
 8005906:	d003      	beq.n	8005910 <TIM_OC1_SetConfig+0x64>
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	4a20      	ldr	r2, [pc, #128]	; (800598c <TIM_OC1_SetConfig+0xe0>)
 800590c:	4293      	cmp	r3, r2
 800590e:	d10c      	bne.n	800592a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005910:	697b      	ldr	r3, [r7, #20]
 8005912:	f023 0308 	bic.w	r3, r3, #8
 8005916:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005918:	683b      	ldr	r3, [r7, #0]
 800591a:	68db      	ldr	r3, [r3, #12]
 800591c:	697a      	ldr	r2, [r7, #20]
 800591e:	4313      	orrs	r3, r2
 8005920:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005922:	697b      	ldr	r3, [r7, #20]
 8005924:	f023 0304 	bic.w	r3, r3, #4
 8005928:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	4a16      	ldr	r2, [pc, #88]	; (8005988 <TIM_OC1_SetConfig+0xdc>)
 800592e:	4293      	cmp	r3, r2
 8005930:	d003      	beq.n	800593a <TIM_OC1_SetConfig+0x8e>
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	4a15      	ldr	r2, [pc, #84]	; (800598c <TIM_OC1_SetConfig+0xe0>)
 8005936:	4293      	cmp	r3, r2
 8005938:	d111      	bne.n	800595e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800593a:	693b      	ldr	r3, [r7, #16]
 800593c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005940:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005942:	693b      	ldr	r3, [r7, #16]
 8005944:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005948:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800594a:	683b      	ldr	r3, [r7, #0]
 800594c:	695b      	ldr	r3, [r3, #20]
 800594e:	693a      	ldr	r2, [r7, #16]
 8005950:	4313      	orrs	r3, r2
 8005952:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005954:	683b      	ldr	r3, [r7, #0]
 8005956:	699b      	ldr	r3, [r3, #24]
 8005958:	693a      	ldr	r2, [r7, #16]
 800595a:	4313      	orrs	r3, r2
 800595c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	693a      	ldr	r2, [r7, #16]
 8005962:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	68fa      	ldr	r2, [r7, #12]
 8005968:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800596a:	683b      	ldr	r3, [r7, #0]
 800596c:	685a      	ldr	r2, [r3, #4]
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	697a      	ldr	r2, [r7, #20]
 8005976:	621a      	str	r2, [r3, #32]
}
 8005978:	bf00      	nop
 800597a:	371c      	adds	r7, #28
 800597c:	46bd      	mov	sp, r7
 800597e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005982:	4770      	bx	lr
 8005984:	fffeff8f 	.word	0xfffeff8f
 8005988:	40010000 	.word	0x40010000
 800598c:	40010400 	.word	0x40010400

08005990 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005990:	b480      	push	{r7}
 8005992:	b087      	sub	sp, #28
 8005994:	af00      	add	r7, sp, #0
 8005996:	6078      	str	r0, [r7, #4]
 8005998:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	6a1b      	ldr	r3, [r3, #32]
 800599e:	f023 0210 	bic.w	r2, r3, #16
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	6a1b      	ldr	r3, [r3, #32]
 80059aa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	685b      	ldr	r3, [r3, #4]
 80059b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	699b      	ldr	r3, [r3, #24]
 80059b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80059b8:	68fa      	ldr	r2, [r7, #12]
 80059ba:	4b2e      	ldr	r3, [pc, #184]	; (8005a74 <TIM_OC2_SetConfig+0xe4>)
 80059bc:	4013      	ands	r3, r2
 80059be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80059c6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80059c8:	683b      	ldr	r3, [r7, #0]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	021b      	lsls	r3, r3, #8
 80059ce:	68fa      	ldr	r2, [r7, #12]
 80059d0:	4313      	orrs	r3, r2
 80059d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80059d4:	697b      	ldr	r3, [r7, #20]
 80059d6:	f023 0320 	bic.w	r3, r3, #32
 80059da:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80059dc:	683b      	ldr	r3, [r7, #0]
 80059de:	689b      	ldr	r3, [r3, #8]
 80059e0:	011b      	lsls	r3, r3, #4
 80059e2:	697a      	ldr	r2, [r7, #20]
 80059e4:	4313      	orrs	r3, r2
 80059e6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	4a23      	ldr	r2, [pc, #140]	; (8005a78 <TIM_OC2_SetConfig+0xe8>)
 80059ec:	4293      	cmp	r3, r2
 80059ee:	d003      	beq.n	80059f8 <TIM_OC2_SetConfig+0x68>
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	4a22      	ldr	r2, [pc, #136]	; (8005a7c <TIM_OC2_SetConfig+0xec>)
 80059f4:	4293      	cmp	r3, r2
 80059f6:	d10d      	bne.n	8005a14 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80059f8:	697b      	ldr	r3, [r7, #20]
 80059fa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80059fe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005a00:	683b      	ldr	r3, [r7, #0]
 8005a02:	68db      	ldr	r3, [r3, #12]
 8005a04:	011b      	lsls	r3, r3, #4
 8005a06:	697a      	ldr	r2, [r7, #20]
 8005a08:	4313      	orrs	r3, r2
 8005a0a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005a0c:	697b      	ldr	r3, [r7, #20]
 8005a0e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005a12:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	4a18      	ldr	r2, [pc, #96]	; (8005a78 <TIM_OC2_SetConfig+0xe8>)
 8005a18:	4293      	cmp	r3, r2
 8005a1a:	d003      	beq.n	8005a24 <TIM_OC2_SetConfig+0x94>
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	4a17      	ldr	r2, [pc, #92]	; (8005a7c <TIM_OC2_SetConfig+0xec>)
 8005a20:	4293      	cmp	r3, r2
 8005a22:	d113      	bne.n	8005a4c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005a24:	693b      	ldr	r3, [r7, #16]
 8005a26:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005a2a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005a2c:	693b      	ldr	r3, [r7, #16]
 8005a2e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005a32:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005a34:	683b      	ldr	r3, [r7, #0]
 8005a36:	695b      	ldr	r3, [r3, #20]
 8005a38:	009b      	lsls	r3, r3, #2
 8005a3a:	693a      	ldr	r2, [r7, #16]
 8005a3c:	4313      	orrs	r3, r2
 8005a3e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005a40:	683b      	ldr	r3, [r7, #0]
 8005a42:	699b      	ldr	r3, [r3, #24]
 8005a44:	009b      	lsls	r3, r3, #2
 8005a46:	693a      	ldr	r2, [r7, #16]
 8005a48:	4313      	orrs	r3, r2
 8005a4a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	693a      	ldr	r2, [r7, #16]
 8005a50:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	68fa      	ldr	r2, [r7, #12]
 8005a56:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005a58:	683b      	ldr	r3, [r7, #0]
 8005a5a:	685a      	ldr	r2, [r3, #4]
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	697a      	ldr	r2, [r7, #20]
 8005a64:	621a      	str	r2, [r3, #32]
}
 8005a66:	bf00      	nop
 8005a68:	371c      	adds	r7, #28
 8005a6a:	46bd      	mov	sp, r7
 8005a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a70:	4770      	bx	lr
 8005a72:	bf00      	nop
 8005a74:	feff8fff 	.word	0xfeff8fff
 8005a78:	40010000 	.word	0x40010000
 8005a7c:	40010400 	.word	0x40010400

08005a80 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005a80:	b480      	push	{r7}
 8005a82:	b087      	sub	sp, #28
 8005a84:	af00      	add	r7, sp, #0
 8005a86:	6078      	str	r0, [r7, #4]
 8005a88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	6a1b      	ldr	r3, [r3, #32]
 8005a8e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	6a1b      	ldr	r3, [r3, #32]
 8005a9a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	685b      	ldr	r3, [r3, #4]
 8005aa0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	69db      	ldr	r3, [r3, #28]
 8005aa6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005aa8:	68fa      	ldr	r2, [r7, #12]
 8005aaa:	4b2d      	ldr	r3, [pc, #180]	; (8005b60 <TIM_OC3_SetConfig+0xe0>)
 8005aac:	4013      	ands	r3, r2
 8005aae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	f023 0303 	bic.w	r3, r3, #3
 8005ab6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005ab8:	683b      	ldr	r3, [r7, #0]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	68fa      	ldr	r2, [r7, #12]
 8005abe:	4313      	orrs	r3, r2
 8005ac0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005ac2:	697b      	ldr	r3, [r7, #20]
 8005ac4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005ac8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005aca:	683b      	ldr	r3, [r7, #0]
 8005acc:	689b      	ldr	r3, [r3, #8]
 8005ace:	021b      	lsls	r3, r3, #8
 8005ad0:	697a      	ldr	r2, [r7, #20]
 8005ad2:	4313      	orrs	r3, r2
 8005ad4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	4a22      	ldr	r2, [pc, #136]	; (8005b64 <TIM_OC3_SetConfig+0xe4>)
 8005ada:	4293      	cmp	r3, r2
 8005adc:	d003      	beq.n	8005ae6 <TIM_OC3_SetConfig+0x66>
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	4a21      	ldr	r2, [pc, #132]	; (8005b68 <TIM_OC3_SetConfig+0xe8>)
 8005ae2:	4293      	cmp	r3, r2
 8005ae4:	d10d      	bne.n	8005b02 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005ae6:	697b      	ldr	r3, [r7, #20]
 8005ae8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005aec:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005aee:	683b      	ldr	r3, [r7, #0]
 8005af0:	68db      	ldr	r3, [r3, #12]
 8005af2:	021b      	lsls	r3, r3, #8
 8005af4:	697a      	ldr	r2, [r7, #20]
 8005af6:	4313      	orrs	r3, r2
 8005af8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005afa:	697b      	ldr	r3, [r7, #20]
 8005afc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005b00:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	4a17      	ldr	r2, [pc, #92]	; (8005b64 <TIM_OC3_SetConfig+0xe4>)
 8005b06:	4293      	cmp	r3, r2
 8005b08:	d003      	beq.n	8005b12 <TIM_OC3_SetConfig+0x92>
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	4a16      	ldr	r2, [pc, #88]	; (8005b68 <TIM_OC3_SetConfig+0xe8>)
 8005b0e:	4293      	cmp	r3, r2
 8005b10:	d113      	bne.n	8005b3a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005b12:	693b      	ldr	r3, [r7, #16]
 8005b14:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005b18:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005b1a:	693b      	ldr	r3, [r7, #16]
 8005b1c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005b20:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005b22:	683b      	ldr	r3, [r7, #0]
 8005b24:	695b      	ldr	r3, [r3, #20]
 8005b26:	011b      	lsls	r3, r3, #4
 8005b28:	693a      	ldr	r2, [r7, #16]
 8005b2a:	4313      	orrs	r3, r2
 8005b2c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005b2e:	683b      	ldr	r3, [r7, #0]
 8005b30:	699b      	ldr	r3, [r3, #24]
 8005b32:	011b      	lsls	r3, r3, #4
 8005b34:	693a      	ldr	r2, [r7, #16]
 8005b36:	4313      	orrs	r3, r2
 8005b38:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	693a      	ldr	r2, [r7, #16]
 8005b3e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	68fa      	ldr	r2, [r7, #12]
 8005b44:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005b46:	683b      	ldr	r3, [r7, #0]
 8005b48:	685a      	ldr	r2, [r3, #4]
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	697a      	ldr	r2, [r7, #20]
 8005b52:	621a      	str	r2, [r3, #32]
}
 8005b54:	bf00      	nop
 8005b56:	371c      	adds	r7, #28
 8005b58:	46bd      	mov	sp, r7
 8005b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b5e:	4770      	bx	lr
 8005b60:	fffeff8f 	.word	0xfffeff8f
 8005b64:	40010000 	.word	0x40010000
 8005b68:	40010400 	.word	0x40010400

08005b6c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005b6c:	b480      	push	{r7}
 8005b6e:	b087      	sub	sp, #28
 8005b70:	af00      	add	r7, sp, #0
 8005b72:	6078      	str	r0, [r7, #4]
 8005b74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	6a1b      	ldr	r3, [r3, #32]
 8005b7a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	6a1b      	ldr	r3, [r3, #32]
 8005b86:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	685b      	ldr	r3, [r3, #4]
 8005b8c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	69db      	ldr	r3, [r3, #28]
 8005b92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005b94:	68fa      	ldr	r2, [r7, #12]
 8005b96:	4b1e      	ldr	r3, [pc, #120]	; (8005c10 <TIM_OC4_SetConfig+0xa4>)
 8005b98:	4013      	ands	r3, r2
 8005b9a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005ba2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005ba4:	683b      	ldr	r3, [r7, #0]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	021b      	lsls	r3, r3, #8
 8005baa:	68fa      	ldr	r2, [r7, #12]
 8005bac:	4313      	orrs	r3, r2
 8005bae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005bb0:	693b      	ldr	r3, [r7, #16]
 8005bb2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005bb6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005bb8:	683b      	ldr	r3, [r7, #0]
 8005bba:	689b      	ldr	r3, [r3, #8]
 8005bbc:	031b      	lsls	r3, r3, #12
 8005bbe:	693a      	ldr	r2, [r7, #16]
 8005bc0:	4313      	orrs	r3, r2
 8005bc2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	4a13      	ldr	r2, [pc, #76]	; (8005c14 <TIM_OC4_SetConfig+0xa8>)
 8005bc8:	4293      	cmp	r3, r2
 8005bca:	d003      	beq.n	8005bd4 <TIM_OC4_SetConfig+0x68>
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	4a12      	ldr	r2, [pc, #72]	; (8005c18 <TIM_OC4_SetConfig+0xac>)
 8005bd0:	4293      	cmp	r3, r2
 8005bd2:	d109      	bne.n	8005be8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005bd4:	697b      	ldr	r3, [r7, #20]
 8005bd6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005bda:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005bdc:	683b      	ldr	r3, [r7, #0]
 8005bde:	695b      	ldr	r3, [r3, #20]
 8005be0:	019b      	lsls	r3, r3, #6
 8005be2:	697a      	ldr	r2, [r7, #20]
 8005be4:	4313      	orrs	r3, r2
 8005be6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	697a      	ldr	r2, [r7, #20]
 8005bec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	68fa      	ldr	r2, [r7, #12]
 8005bf2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005bf4:	683b      	ldr	r3, [r7, #0]
 8005bf6:	685a      	ldr	r2, [r3, #4]
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	693a      	ldr	r2, [r7, #16]
 8005c00:	621a      	str	r2, [r3, #32]
}
 8005c02:	bf00      	nop
 8005c04:	371c      	adds	r7, #28
 8005c06:	46bd      	mov	sp, r7
 8005c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c0c:	4770      	bx	lr
 8005c0e:	bf00      	nop
 8005c10:	feff8fff 	.word	0xfeff8fff
 8005c14:	40010000 	.word	0x40010000
 8005c18:	40010400 	.word	0x40010400

08005c1c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005c1c:	b480      	push	{r7}
 8005c1e:	b087      	sub	sp, #28
 8005c20:	af00      	add	r7, sp, #0
 8005c22:	6078      	str	r0, [r7, #4]
 8005c24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	6a1b      	ldr	r3, [r3, #32]
 8005c2a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	6a1b      	ldr	r3, [r3, #32]
 8005c36:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	685b      	ldr	r3, [r3, #4]
 8005c3c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005c44:	68fa      	ldr	r2, [r7, #12]
 8005c46:	4b1b      	ldr	r3, [pc, #108]	; (8005cb4 <TIM_OC5_SetConfig+0x98>)
 8005c48:	4013      	ands	r3, r2
 8005c4a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005c4c:	683b      	ldr	r3, [r7, #0]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	68fa      	ldr	r2, [r7, #12]
 8005c52:	4313      	orrs	r3, r2
 8005c54:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005c56:	693b      	ldr	r3, [r7, #16]
 8005c58:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005c5c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005c5e:	683b      	ldr	r3, [r7, #0]
 8005c60:	689b      	ldr	r3, [r3, #8]
 8005c62:	041b      	lsls	r3, r3, #16
 8005c64:	693a      	ldr	r2, [r7, #16]
 8005c66:	4313      	orrs	r3, r2
 8005c68:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	4a12      	ldr	r2, [pc, #72]	; (8005cb8 <TIM_OC5_SetConfig+0x9c>)
 8005c6e:	4293      	cmp	r3, r2
 8005c70:	d003      	beq.n	8005c7a <TIM_OC5_SetConfig+0x5e>
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	4a11      	ldr	r2, [pc, #68]	; (8005cbc <TIM_OC5_SetConfig+0xa0>)
 8005c76:	4293      	cmp	r3, r2
 8005c78:	d109      	bne.n	8005c8e <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005c7a:	697b      	ldr	r3, [r7, #20]
 8005c7c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005c80:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005c82:	683b      	ldr	r3, [r7, #0]
 8005c84:	695b      	ldr	r3, [r3, #20]
 8005c86:	021b      	lsls	r3, r3, #8
 8005c88:	697a      	ldr	r2, [r7, #20]
 8005c8a:	4313      	orrs	r3, r2
 8005c8c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	697a      	ldr	r2, [r7, #20]
 8005c92:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	68fa      	ldr	r2, [r7, #12]
 8005c98:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005c9a:	683b      	ldr	r3, [r7, #0]
 8005c9c:	685a      	ldr	r2, [r3, #4]
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	693a      	ldr	r2, [r7, #16]
 8005ca6:	621a      	str	r2, [r3, #32]
}
 8005ca8:	bf00      	nop
 8005caa:	371c      	adds	r7, #28
 8005cac:	46bd      	mov	sp, r7
 8005cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb2:	4770      	bx	lr
 8005cb4:	fffeff8f 	.word	0xfffeff8f
 8005cb8:	40010000 	.word	0x40010000
 8005cbc:	40010400 	.word	0x40010400

08005cc0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005cc0:	b480      	push	{r7}
 8005cc2:	b087      	sub	sp, #28
 8005cc4:	af00      	add	r7, sp, #0
 8005cc6:	6078      	str	r0, [r7, #4]
 8005cc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	6a1b      	ldr	r3, [r3, #32]
 8005cce:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	6a1b      	ldr	r3, [r3, #32]
 8005cda:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	685b      	ldr	r3, [r3, #4]
 8005ce0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ce6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005ce8:	68fa      	ldr	r2, [r7, #12]
 8005cea:	4b1c      	ldr	r3, [pc, #112]	; (8005d5c <TIM_OC6_SetConfig+0x9c>)
 8005cec:	4013      	ands	r3, r2
 8005cee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005cf0:	683b      	ldr	r3, [r7, #0]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	021b      	lsls	r3, r3, #8
 8005cf6:	68fa      	ldr	r2, [r7, #12]
 8005cf8:	4313      	orrs	r3, r2
 8005cfa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005cfc:	693b      	ldr	r3, [r7, #16]
 8005cfe:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005d02:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005d04:	683b      	ldr	r3, [r7, #0]
 8005d06:	689b      	ldr	r3, [r3, #8]
 8005d08:	051b      	lsls	r3, r3, #20
 8005d0a:	693a      	ldr	r2, [r7, #16]
 8005d0c:	4313      	orrs	r3, r2
 8005d0e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	4a13      	ldr	r2, [pc, #76]	; (8005d60 <TIM_OC6_SetConfig+0xa0>)
 8005d14:	4293      	cmp	r3, r2
 8005d16:	d003      	beq.n	8005d20 <TIM_OC6_SetConfig+0x60>
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	4a12      	ldr	r2, [pc, #72]	; (8005d64 <TIM_OC6_SetConfig+0xa4>)
 8005d1c:	4293      	cmp	r3, r2
 8005d1e:	d109      	bne.n	8005d34 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005d20:	697b      	ldr	r3, [r7, #20]
 8005d22:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005d26:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005d28:	683b      	ldr	r3, [r7, #0]
 8005d2a:	695b      	ldr	r3, [r3, #20]
 8005d2c:	029b      	lsls	r3, r3, #10
 8005d2e:	697a      	ldr	r2, [r7, #20]
 8005d30:	4313      	orrs	r3, r2
 8005d32:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	697a      	ldr	r2, [r7, #20]
 8005d38:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	68fa      	ldr	r2, [r7, #12]
 8005d3e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005d40:	683b      	ldr	r3, [r7, #0]
 8005d42:	685a      	ldr	r2, [r3, #4]
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	693a      	ldr	r2, [r7, #16]
 8005d4c:	621a      	str	r2, [r3, #32]
}
 8005d4e:	bf00      	nop
 8005d50:	371c      	adds	r7, #28
 8005d52:	46bd      	mov	sp, r7
 8005d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d58:	4770      	bx	lr
 8005d5a:	bf00      	nop
 8005d5c:	feff8fff 	.word	0xfeff8fff
 8005d60:	40010000 	.word	0x40010000
 8005d64:	40010400 	.word	0x40010400

08005d68 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005d68:	b480      	push	{r7}
 8005d6a:	b087      	sub	sp, #28
 8005d6c:	af00      	add	r7, sp, #0
 8005d6e:	60f8      	str	r0, [r7, #12]
 8005d70:	60b9      	str	r1, [r7, #8]
 8005d72:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	6a1b      	ldr	r3, [r3, #32]
 8005d78:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	6a1b      	ldr	r3, [r3, #32]
 8005d7e:	f023 0201 	bic.w	r2, r3, #1
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	699b      	ldr	r3, [r3, #24]
 8005d8a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005d8c:	693b      	ldr	r3, [r7, #16]
 8005d8e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005d92:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	011b      	lsls	r3, r3, #4
 8005d98:	693a      	ldr	r2, [r7, #16]
 8005d9a:	4313      	orrs	r3, r2
 8005d9c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005d9e:	697b      	ldr	r3, [r7, #20]
 8005da0:	f023 030a 	bic.w	r3, r3, #10
 8005da4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005da6:	697a      	ldr	r2, [r7, #20]
 8005da8:	68bb      	ldr	r3, [r7, #8]
 8005daa:	4313      	orrs	r3, r2
 8005dac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	693a      	ldr	r2, [r7, #16]
 8005db2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	697a      	ldr	r2, [r7, #20]
 8005db8:	621a      	str	r2, [r3, #32]
}
 8005dba:	bf00      	nop
 8005dbc:	371c      	adds	r7, #28
 8005dbe:	46bd      	mov	sp, r7
 8005dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc4:	4770      	bx	lr

08005dc6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005dc6:	b480      	push	{r7}
 8005dc8:	b087      	sub	sp, #28
 8005dca:	af00      	add	r7, sp, #0
 8005dcc:	60f8      	str	r0, [r7, #12]
 8005dce:	60b9      	str	r1, [r7, #8]
 8005dd0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	6a1b      	ldr	r3, [r3, #32]
 8005dd6:	f023 0210 	bic.w	r2, r3, #16
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	699b      	ldr	r3, [r3, #24]
 8005de2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	6a1b      	ldr	r3, [r3, #32]
 8005de8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005dea:	697b      	ldr	r3, [r7, #20]
 8005dec:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005df0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	031b      	lsls	r3, r3, #12
 8005df6:	697a      	ldr	r2, [r7, #20]
 8005df8:	4313      	orrs	r3, r2
 8005dfa:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005dfc:	693b      	ldr	r3, [r7, #16]
 8005dfe:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005e02:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005e04:	68bb      	ldr	r3, [r7, #8]
 8005e06:	011b      	lsls	r3, r3, #4
 8005e08:	693a      	ldr	r2, [r7, #16]
 8005e0a:	4313      	orrs	r3, r2
 8005e0c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	697a      	ldr	r2, [r7, #20]
 8005e12:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	693a      	ldr	r2, [r7, #16]
 8005e18:	621a      	str	r2, [r3, #32]
}
 8005e1a:	bf00      	nop
 8005e1c:	371c      	adds	r7, #28
 8005e1e:	46bd      	mov	sp, r7
 8005e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e24:	4770      	bx	lr

08005e26 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005e26:	b480      	push	{r7}
 8005e28:	b085      	sub	sp, #20
 8005e2a:	af00      	add	r7, sp, #0
 8005e2c:	6078      	str	r0, [r7, #4]
 8005e2e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	689b      	ldr	r3, [r3, #8]
 8005e34:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e3c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005e3e:	683a      	ldr	r2, [r7, #0]
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	4313      	orrs	r3, r2
 8005e44:	f043 0307 	orr.w	r3, r3, #7
 8005e48:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	68fa      	ldr	r2, [r7, #12]
 8005e4e:	609a      	str	r2, [r3, #8]
}
 8005e50:	bf00      	nop
 8005e52:	3714      	adds	r7, #20
 8005e54:	46bd      	mov	sp, r7
 8005e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e5a:	4770      	bx	lr

08005e5c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005e5c:	b480      	push	{r7}
 8005e5e:	b087      	sub	sp, #28
 8005e60:	af00      	add	r7, sp, #0
 8005e62:	60f8      	str	r0, [r7, #12]
 8005e64:	60b9      	str	r1, [r7, #8]
 8005e66:	607a      	str	r2, [r7, #4]
 8005e68:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	689b      	ldr	r3, [r3, #8]
 8005e6e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005e70:	697b      	ldr	r3, [r7, #20]
 8005e72:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005e76:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005e78:	683b      	ldr	r3, [r7, #0]
 8005e7a:	021a      	lsls	r2, r3, #8
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	431a      	orrs	r2, r3
 8005e80:	68bb      	ldr	r3, [r7, #8]
 8005e82:	4313      	orrs	r3, r2
 8005e84:	697a      	ldr	r2, [r7, #20]
 8005e86:	4313      	orrs	r3, r2
 8005e88:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	697a      	ldr	r2, [r7, #20]
 8005e8e:	609a      	str	r2, [r3, #8]
}
 8005e90:	bf00      	nop
 8005e92:	371c      	adds	r7, #28
 8005e94:	46bd      	mov	sp, r7
 8005e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e9a:	4770      	bx	lr

08005e9c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005e9c:	b480      	push	{r7}
 8005e9e:	b087      	sub	sp, #28
 8005ea0:	af00      	add	r7, sp, #0
 8005ea2:	60f8      	str	r0, [r7, #12]
 8005ea4:	60b9      	str	r1, [r7, #8]
 8005ea6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005ea8:	68bb      	ldr	r3, [r7, #8]
 8005eaa:	f003 031f 	and.w	r3, r3, #31
 8005eae:	2201      	movs	r2, #1
 8005eb0:	fa02 f303 	lsl.w	r3, r2, r3
 8005eb4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	6a1a      	ldr	r2, [r3, #32]
 8005eba:	697b      	ldr	r3, [r7, #20]
 8005ebc:	43db      	mvns	r3, r3
 8005ebe:	401a      	ands	r2, r3
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	6a1a      	ldr	r2, [r3, #32]
 8005ec8:	68bb      	ldr	r3, [r7, #8]
 8005eca:	f003 031f 	and.w	r3, r3, #31
 8005ece:	6879      	ldr	r1, [r7, #4]
 8005ed0:	fa01 f303 	lsl.w	r3, r1, r3
 8005ed4:	431a      	orrs	r2, r3
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	621a      	str	r2, [r3, #32]
}
 8005eda:	bf00      	nop
 8005edc:	371c      	adds	r7, #28
 8005ede:	46bd      	mov	sp, r7
 8005ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee4:	4770      	bx	lr
	...

08005ee8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005ee8:	b480      	push	{r7}
 8005eea:	b085      	sub	sp, #20
 8005eec:	af00      	add	r7, sp, #0
 8005eee:	6078      	str	r0, [r7, #4]
 8005ef0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005ef8:	2b01      	cmp	r3, #1
 8005efa:	d101      	bne.n	8005f00 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005efc:	2302      	movs	r3, #2
 8005efe:	e06d      	b.n	8005fdc <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	2201      	movs	r2, #1
 8005f04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	2202      	movs	r2, #2
 8005f0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	685b      	ldr	r3, [r3, #4]
 8005f16:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	689b      	ldr	r3, [r3, #8]
 8005f1e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	4a30      	ldr	r2, [pc, #192]	; (8005fe8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005f26:	4293      	cmp	r3, r2
 8005f28:	d004      	beq.n	8005f34 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	4a2f      	ldr	r2, [pc, #188]	; (8005fec <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005f30:	4293      	cmp	r3, r2
 8005f32:	d108      	bne.n	8005f46 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005f3a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005f3c:	683b      	ldr	r3, [r7, #0]
 8005f3e:	685b      	ldr	r3, [r3, #4]
 8005f40:	68fa      	ldr	r2, [r7, #12]
 8005f42:	4313      	orrs	r3, r2
 8005f44:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f4c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005f4e:	683b      	ldr	r3, [r7, #0]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	68fa      	ldr	r2, [r7, #12]
 8005f54:	4313      	orrs	r3, r2
 8005f56:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	68fa      	ldr	r2, [r7, #12]
 8005f5e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	4a20      	ldr	r2, [pc, #128]	; (8005fe8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005f66:	4293      	cmp	r3, r2
 8005f68:	d022      	beq.n	8005fb0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f72:	d01d      	beq.n	8005fb0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	4a1d      	ldr	r2, [pc, #116]	; (8005ff0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005f7a:	4293      	cmp	r3, r2
 8005f7c:	d018      	beq.n	8005fb0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	4a1c      	ldr	r2, [pc, #112]	; (8005ff4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005f84:	4293      	cmp	r3, r2
 8005f86:	d013      	beq.n	8005fb0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	4a1a      	ldr	r2, [pc, #104]	; (8005ff8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005f8e:	4293      	cmp	r3, r2
 8005f90:	d00e      	beq.n	8005fb0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	4a15      	ldr	r2, [pc, #84]	; (8005fec <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005f98:	4293      	cmp	r3, r2
 8005f9a:	d009      	beq.n	8005fb0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	4a16      	ldr	r2, [pc, #88]	; (8005ffc <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005fa2:	4293      	cmp	r3, r2
 8005fa4:	d004      	beq.n	8005fb0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	4a15      	ldr	r2, [pc, #84]	; (8006000 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005fac:	4293      	cmp	r3, r2
 8005fae:	d10c      	bne.n	8005fca <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005fb0:	68bb      	ldr	r3, [r7, #8]
 8005fb2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005fb6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005fb8:	683b      	ldr	r3, [r7, #0]
 8005fba:	689b      	ldr	r3, [r3, #8]
 8005fbc:	68ba      	ldr	r2, [r7, #8]
 8005fbe:	4313      	orrs	r3, r2
 8005fc0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	68ba      	ldr	r2, [r7, #8]
 8005fc8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	2201      	movs	r2, #1
 8005fce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	2200      	movs	r2, #0
 8005fd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005fda:	2300      	movs	r3, #0
}
 8005fdc:	4618      	mov	r0, r3
 8005fde:	3714      	adds	r7, #20
 8005fe0:	46bd      	mov	sp, r7
 8005fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe6:	4770      	bx	lr
 8005fe8:	40010000 	.word	0x40010000
 8005fec:	40010400 	.word	0x40010400
 8005ff0:	40000400 	.word	0x40000400
 8005ff4:	40000800 	.word	0x40000800
 8005ff8:	40000c00 	.word	0x40000c00
 8005ffc:	40014000 	.word	0x40014000
 8006000:	40001800 	.word	0x40001800

08006004 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006004:	b580      	push	{r7, lr}
 8006006:	b082      	sub	sp, #8
 8006008:	af00      	add	r7, sp, #0
 800600a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	2b00      	cmp	r3, #0
 8006010:	d101      	bne.n	8006016 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006012:	2301      	movs	r3, #1
 8006014:	e040      	b.n	8006098 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800601a:	2b00      	cmp	r3, #0
 800601c:	d106      	bne.n	800602c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	2200      	movs	r2, #0
 8006022:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006026:	6878      	ldr	r0, [r7, #4]
 8006028:	f7fc fa9e 	bl	8002568 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	2224      	movs	r2, #36	; 0x24
 8006030:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	681a      	ldr	r2, [r3, #0]
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	f022 0201 	bic.w	r2, r2, #1
 8006040:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006042:	6878      	ldr	r0, [r7, #4]
 8006044:	f000 f8c0 	bl	80061c8 <UART_SetConfig>
 8006048:	4603      	mov	r3, r0
 800604a:	2b01      	cmp	r3, #1
 800604c:	d101      	bne.n	8006052 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800604e:	2301      	movs	r3, #1
 8006050:	e022      	b.n	8006098 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006056:	2b00      	cmp	r3, #0
 8006058:	d002      	beq.n	8006060 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800605a:	6878      	ldr	r0, [r7, #4]
 800605c:	f000 fb16 	bl	800668c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	685a      	ldr	r2, [r3, #4]
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800606e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	689a      	ldr	r2, [r3, #8]
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800607e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	681a      	ldr	r2, [r3, #0]
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	f042 0201 	orr.w	r2, r2, #1
 800608e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006090:	6878      	ldr	r0, [r7, #4]
 8006092:	f000 fb9d 	bl	80067d0 <UART_CheckIdleState>
 8006096:	4603      	mov	r3, r0
}
 8006098:	4618      	mov	r0, r3
 800609a:	3708      	adds	r7, #8
 800609c:	46bd      	mov	sp, r7
 800609e:	bd80      	pop	{r7, pc}

080060a0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80060a0:	b580      	push	{r7, lr}
 80060a2:	b08a      	sub	sp, #40	; 0x28
 80060a4:	af02      	add	r7, sp, #8
 80060a6:	60f8      	str	r0, [r7, #12]
 80060a8:	60b9      	str	r1, [r7, #8]
 80060aa:	603b      	str	r3, [r7, #0]
 80060ac:	4613      	mov	r3, r2
 80060ae:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80060b4:	2b20      	cmp	r3, #32
 80060b6:	f040 8081 	bne.w	80061bc <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 80060ba:	68bb      	ldr	r3, [r7, #8]
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d002      	beq.n	80060c6 <HAL_UART_Transmit+0x26>
 80060c0:	88fb      	ldrh	r3, [r7, #6]
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d101      	bne.n	80060ca <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80060c6:	2301      	movs	r3, #1
 80060c8:	e079      	b.n	80061be <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80060d0:	2b01      	cmp	r3, #1
 80060d2:	d101      	bne.n	80060d8 <HAL_UART_Transmit+0x38>
 80060d4:	2302      	movs	r3, #2
 80060d6:	e072      	b.n	80061be <HAL_UART_Transmit+0x11e>
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	2201      	movs	r2, #1
 80060dc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	2200      	movs	r2, #0
 80060e4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	2221      	movs	r2, #33	; 0x21
 80060ec:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80060ee:	f7fc fc17 	bl	8002920 <HAL_GetTick>
 80060f2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	88fa      	ldrh	r2, [r7, #6]
 80060f8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	88fa      	ldrh	r2, [r7, #6]
 8006100:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	689b      	ldr	r3, [r3, #8]
 8006108:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800610c:	d108      	bne.n	8006120 <HAL_UART_Transmit+0x80>
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	691b      	ldr	r3, [r3, #16]
 8006112:	2b00      	cmp	r3, #0
 8006114:	d104      	bne.n	8006120 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8006116:	2300      	movs	r3, #0
 8006118:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800611a:	68bb      	ldr	r3, [r7, #8]
 800611c:	61bb      	str	r3, [r7, #24]
 800611e:	e003      	b.n	8006128 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8006120:	68bb      	ldr	r3, [r7, #8]
 8006122:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006124:	2300      	movs	r3, #0
 8006126:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	2200      	movs	r2, #0
 800612c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8006130:	e02c      	b.n	800618c <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006132:	683b      	ldr	r3, [r7, #0]
 8006134:	9300      	str	r3, [sp, #0]
 8006136:	697b      	ldr	r3, [r7, #20]
 8006138:	2200      	movs	r2, #0
 800613a:	2180      	movs	r1, #128	; 0x80
 800613c:	68f8      	ldr	r0, [r7, #12]
 800613e:	f000 fb7a 	bl	8006836 <UART_WaitOnFlagUntilTimeout>
 8006142:	4603      	mov	r3, r0
 8006144:	2b00      	cmp	r3, #0
 8006146:	d001      	beq.n	800614c <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8006148:	2303      	movs	r3, #3
 800614a:	e038      	b.n	80061be <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 800614c:	69fb      	ldr	r3, [r7, #28]
 800614e:	2b00      	cmp	r3, #0
 8006150:	d10b      	bne.n	800616a <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006152:	69bb      	ldr	r3, [r7, #24]
 8006154:	881b      	ldrh	r3, [r3, #0]
 8006156:	461a      	mov	r2, r3
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006160:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006162:	69bb      	ldr	r3, [r7, #24]
 8006164:	3302      	adds	r3, #2
 8006166:	61bb      	str	r3, [r7, #24]
 8006168:	e007      	b.n	800617a <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800616a:	69fb      	ldr	r3, [r7, #28]
 800616c:	781a      	ldrb	r2, [r3, #0]
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006174:	69fb      	ldr	r3, [r7, #28]
 8006176:	3301      	adds	r3, #1
 8006178:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006180:	b29b      	uxth	r3, r3
 8006182:	3b01      	subs	r3, #1
 8006184:	b29a      	uxth	r2, r3
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006192:	b29b      	uxth	r3, r3
 8006194:	2b00      	cmp	r3, #0
 8006196:	d1cc      	bne.n	8006132 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006198:	683b      	ldr	r3, [r7, #0]
 800619a:	9300      	str	r3, [sp, #0]
 800619c:	697b      	ldr	r3, [r7, #20]
 800619e:	2200      	movs	r2, #0
 80061a0:	2140      	movs	r1, #64	; 0x40
 80061a2:	68f8      	ldr	r0, [r7, #12]
 80061a4:	f000 fb47 	bl	8006836 <UART_WaitOnFlagUntilTimeout>
 80061a8:	4603      	mov	r3, r0
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d001      	beq.n	80061b2 <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 80061ae:	2303      	movs	r3, #3
 80061b0:	e005      	b.n	80061be <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	2220      	movs	r2, #32
 80061b6:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80061b8:	2300      	movs	r3, #0
 80061ba:	e000      	b.n	80061be <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 80061bc:	2302      	movs	r3, #2
  }
}
 80061be:	4618      	mov	r0, r3
 80061c0:	3720      	adds	r7, #32
 80061c2:	46bd      	mov	sp, r7
 80061c4:	bd80      	pop	{r7, pc}
	...

080061c8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80061c8:	b580      	push	{r7, lr}
 80061ca:	b088      	sub	sp, #32
 80061cc:	af00      	add	r7, sp, #0
 80061ce:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80061d0:	2300      	movs	r3, #0
 80061d2:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	689a      	ldr	r2, [r3, #8]
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	691b      	ldr	r3, [r3, #16]
 80061dc:	431a      	orrs	r2, r3
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	695b      	ldr	r3, [r3, #20]
 80061e2:	431a      	orrs	r2, r3
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	69db      	ldr	r3, [r3, #28]
 80061e8:	4313      	orrs	r3, r2
 80061ea:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	681a      	ldr	r2, [r3, #0]
 80061f2:	4ba7      	ldr	r3, [pc, #668]	; (8006490 <UART_SetConfig+0x2c8>)
 80061f4:	4013      	ands	r3, r2
 80061f6:	687a      	ldr	r2, [r7, #4]
 80061f8:	6812      	ldr	r2, [r2, #0]
 80061fa:	6979      	ldr	r1, [r7, #20]
 80061fc:	430b      	orrs	r3, r1
 80061fe:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	685b      	ldr	r3, [r3, #4]
 8006206:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	68da      	ldr	r2, [r3, #12]
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	430a      	orrs	r2, r1
 8006214:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	699b      	ldr	r3, [r3, #24]
 800621a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	6a1b      	ldr	r3, [r3, #32]
 8006220:	697a      	ldr	r2, [r7, #20]
 8006222:	4313      	orrs	r3, r2
 8006224:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	689b      	ldr	r3, [r3, #8]
 800622c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	697a      	ldr	r2, [r7, #20]
 8006236:	430a      	orrs	r2, r1
 8006238:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	4a95      	ldr	r2, [pc, #596]	; (8006494 <UART_SetConfig+0x2cc>)
 8006240:	4293      	cmp	r3, r2
 8006242:	d120      	bne.n	8006286 <UART_SetConfig+0xbe>
 8006244:	4b94      	ldr	r3, [pc, #592]	; (8006498 <UART_SetConfig+0x2d0>)
 8006246:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800624a:	f003 0303 	and.w	r3, r3, #3
 800624e:	2b03      	cmp	r3, #3
 8006250:	d816      	bhi.n	8006280 <UART_SetConfig+0xb8>
 8006252:	a201      	add	r2, pc, #4	; (adr r2, 8006258 <UART_SetConfig+0x90>)
 8006254:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006258:	08006269 	.word	0x08006269
 800625c:	08006275 	.word	0x08006275
 8006260:	0800626f 	.word	0x0800626f
 8006264:	0800627b 	.word	0x0800627b
 8006268:	2301      	movs	r3, #1
 800626a:	77fb      	strb	r3, [r7, #31]
 800626c:	e14f      	b.n	800650e <UART_SetConfig+0x346>
 800626e:	2302      	movs	r3, #2
 8006270:	77fb      	strb	r3, [r7, #31]
 8006272:	e14c      	b.n	800650e <UART_SetConfig+0x346>
 8006274:	2304      	movs	r3, #4
 8006276:	77fb      	strb	r3, [r7, #31]
 8006278:	e149      	b.n	800650e <UART_SetConfig+0x346>
 800627a:	2308      	movs	r3, #8
 800627c:	77fb      	strb	r3, [r7, #31]
 800627e:	e146      	b.n	800650e <UART_SetConfig+0x346>
 8006280:	2310      	movs	r3, #16
 8006282:	77fb      	strb	r3, [r7, #31]
 8006284:	e143      	b.n	800650e <UART_SetConfig+0x346>
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	4a84      	ldr	r2, [pc, #528]	; (800649c <UART_SetConfig+0x2d4>)
 800628c:	4293      	cmp	r3, r2
 800628e:	d132      	bne.n	80062f6 <UART_SetConfig+0x12e>
 8006290:	4b81      	ldr	r3, [pc, #516]	; (8006498 <UART_SetConfig+0x2d0>)
 8006292:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006296:	f003 030c 	and.w	r3, r3, #12
 800629a:	2b0c      	cmp	r3, #12
 800629c:	d828      	bhi.n	80062f0 <UART_SetConfig+0x128>
 800629e:	a201      	add	r2, pc, #4	; (adr r2, 80062a4 <UART_SetConfig+0xdc>)
 80062a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062a4:	080062d9 	.word	0x080062d9
 80062a8:	080062f1 	.word	0x080062f1
 80062ac:	080062f1 	.word	0x080062f1
 80062b0:	080062f1 	.word	0x080062f1
 80062b4:	080062e5 	.word	0x080062e5
 80062b8:	080062f1 	.word	0x080062f1
 80062bc:	080062f1 	.word	0x080062f1
 80062c0:	080062f1 	.word	0x080062f1
 80062c4:	080062df 	.word	0x080062df
 80062c8:	080062f1 	.word	0x080062f1
 80062cc:	080062f1 	.word	0x080062f1
 80062d0:	080062f1 	.word	0x080062f1
 80062d4:	080062eb 	.word	0x080062eb
 80062d8:	2300      	movs	r3, #0
 80062da:	77fb      	strb	r3, [r7, #31]
 80062dc:	e117      	b.n	800650e <UART_SetConfig+0x346>
 80062de:	2302      	movs	r3, #2
 80062e0:	77fb      	strb	r3, [r7, #31]
 80062e2:	e114      	b.n	800650e <UART_SetConfig+0x346>
 80062e4:	2304      	movs	r3, #4
 80062e6:	77fb      	strb	r3, [r7, #31]
 80062e8:	e111      	b.n	800650e <UART_SetConfig+0x346>
 80062ea:	2308      	movs	r3, #8
 80062ec:	77fb      	strb	r3, [r7, #31]
 80062ee:	e10e      	b.n	800650e <UART_SetConfig+0x346>
 80062f0:	2310      	movs	r3, #16
 80062f2:	77fb      	strb	r3, [r7, #31]
 80062f4:	e10b      	b.n	800650e <UART_SetConfig+0x346>
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	4a69      	ldr	r2, [pc, #420]	; (80064a0 <UART_SetConfig+0x2d8>)
 80062fc:	4293      	cmp	r3, r2
 80062fe:	d120      	bne.n	8006342 <UART_SetConfig+0x17a>
 8006300:	4b65      	ldr	r3, [pc, #404]	; (8006498 <UART_SetConfig+0x2d0>)
 8006302:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006306:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800630a:	2b30      	cmp	r3, #48	; 0x30
 800630c:	d013      	beq.n	8006336 <UART_SetConfig+0x16e>
 800630e:	2b30      	cmp	r3, #48	; 0x30
 8006310:	d814      	bhi.n	800633c <UART_SetConfig+0x174>
 8006312:	2b20      	cmp	r3, #32
 8006314:	d009      	beq.n	800632a <UART_SetConfig+0x162>
 8006316:	2b20      	cmp	r3, #32
 8006318:	d810      	bhi.n	800633c <UART_SetConfig+0x174>
 800631a:	2b00      	cmp	r3, #0
 800631c:	d002      	beq.n	8006324 <UART_SetConfig+0x15c>
 800631e:	2b10      	cmp	r3, #16
 8006320:	d006      	beq.n	8006330 <UART_SetConfig+0x168>
 8006322:	e00b      	b.n	800633c <UART_SetConfig+0x174>
 8006324:	2300      	movs	r3, #0
 8006326:	77fb      	strb	r3, [r7, #31]
 8006328:	e0f1      	b.n	800650e <UART_SetConfig+0x346>
 800632a:	2302      	movs	r3, #2
 800632c:	77fb      	strb	r3, [r7, #31]
 800632e:	e0ee      	b.n	800650e <UART_SetConfig+0x346>
 8006330:	2304      	movs	r3, #4
 8006332:	77fb      	strb	r3, [r7, #31]
 8006334:	e0eb      	b.n	800650e <UART_SetConfig+0x346>
 8006336:	2308      	movs	r3, #8
 8006338:	77fb      	strb	r3, [r7, #31]
 800633a:	e0e8      	b.n	800650e <UART_SetConfig+0x346>
 800633c:	2310      	movs	r3, #16
 800633e:	77fb      	strb	r3, [r7, #31]
 8006340:	e0e5      	b.n	800650e <UART_SetConfig+0x346>
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	4a57      	ldr	r2, [pc, #348]	; (80064a4 <UART_SetConfig+0x2dc>)
 8006348:	4293      	cmp	r3, r2
 800634a:	d120      	bne.n	800638e <UART_SetConfig+0x1c6>
 800634c:	4b52      	ldr	r3, [pc, #328]	; (8006498 <UART_SetConfig+0x2d0>)
 800634e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006352:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006356:	2bc0      	cmp	r3, #192	; 0xc0
 8006358:	d013      	beq.n	8006382 <UART_SetConfig+0x1ba>
 800635a:	2bc0      	cmp	r3, #192	; 0xc0
 800635c:	d814      	bhi.n	8006388 <UART_SetConfig+0x1c0>
 800635e:	2b80      	cmp	r3, #128	; 0x80
 8006360:	d009      	beq.n	8006376 <UART_SetConfig+0x1ae>
 8006362:	2b80      	cmp	r3, #128	; 0x80
 8006364:	d810      	bhi.n	8006388 <UART_SetConfig+0x1c0>
 8006366:	2b00      	cmp	r3, #0
 8006368:	d002      	beq.n	8006370 <UART_SetConfig+0x1a8>
 800636a:	2b40      	cmp	r3, #64	; 0x40
 800636c:	d006      	beq.n	800637c <UART_SetConfig+0x1b4>
 800636e:	e00b      	b.n	8006388 <UART_SetConfig+0x1c0>
 8006370:	2300      	movs	r3, #0
 8006372:	77fb      	strb	r3, [r7, #31]
 8006374:	e0cb      	b.n	800650e <UART_SetConfig+0x346>
 8006376:	2302      	movs	r3, #2
 8006378:	77fb      	strb	r3, [r7, #31]
 800637a:	e0c8      	b.n	800650e <UART_SetConfig+0x346>
 800637c:	2304      	movs	r3, #4
 800637e:	77fb      	strb	r3, [r7, #31]
 8006380:	e0c5      	b.n	800650e <UART_SetConfig+0x346>
 8006382:	2308      	movs	r3, #8
 8006384:	77fb      	strb	r3, [r7, #31]
 8006386:	e0c2      	b.n	800650e <UART_SetConfig+0x346>
 8006388:	2310      	movs	r3, #16
 800638a:	77fb      	strb	r3, [r7, #31]
 800638c:	e0bf      	b.n	800650e <UART_SetConfig+0x346>
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	4a45      	ldr	r2, [pc, #276]	; (80064a8 <UART_SetConfig+0x2e0>)
 8006394:	4293      	cmp	r3, r2
 8006396:	d125      	bne.n	80063e4 <UART_SetConfig+0x21c>
 8006398:	4b3f      	ldr	r3, [pc, #252]	; (8006498 <UART_SetConfig+0x2d0>)
 800639a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800639e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80063a2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80063a6:	d017      	beq.n	80063d8 <UART_SetConfig+0x210>
 80063a8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80063ac:	d817      	bhi.n	80063de <UART_SetConfig+0x216>
 80063ae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80063b2:	d00b      	beq.n	80063cc <UART_SetConfig+0x204>
 80063b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80063b8:	d811      	bhi.n	80063de <UART_SetConfig+0x216>
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d003      	beq.n	80063c6 <UART_SetConfig+0x1fe>
 80063be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80063c2:	d006      	beq.n	80063d2 <UART_SetConfig+0x20a>
 80063c4:	e00b      	b.n	80063de <UART_SetConfig+0x216>
 80063c6:	2300      	movs	r3, #0
 80063c8:	77fb      	strb	r3, [r7, #31]
 80063ca:	e0a0      	b.n	800650e <UART_SetConfig+0x346>
 80063cc:	2302      	movs	r3, #2
 80063ce:	77fb      	strb	r3, [r7, #31]
 80063d0:	e09d      	b.n	800650e <UART_SetConfig+0x346>
 80063d2:	2304      	movs	r3, #4
 80063d4:	77fb      	strb	r3, [r7, #31]
 80063d6:	e09a      	b.n	800650e <UART_SetConfig+0x346>
 80063d8:	2308      	movs	r3, #8
 80063da:	77fb      	strb	r3, [r7, #31]
 80063dc:	e097      	b.n	800650e <UART_SetConfig+0x346>
 80063de:	2310      	movs	r3, #16
 80063e0:	77fb      	strb	r3, [r7, #31]
 80063e2:	e094      	b.n	800650e <UART_SetConfig+0x346>
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	4a30      	ldr	r2, [pc, #192]	; (80064ac <UART_SetConfig+0x2e4>)
 80063ea:	4293      	cmp	r3, r2
 80063ec:	d125      	bne.n	800643a <UART_SetConfig+0x272>
 80063ee:	4b2a      	ldr	r3, [pc, #168]	; (8006498 <UART_SetConfig+0x2d0>)
 80063f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80063f4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80063f8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80063fc:	d017      	beq.n	800642e <UART_SetConfig+0x266>
 80063fe:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006402:	d817      	bhi.n	8006434 <UART_SetConfig+0x26c>
 8006404:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006408:	d00b      	beq.n	8006422 <UART_SetConfig+0x25a>
 800640a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800640e:	d811      	bhi.n	8006434 <UART_SetConfig+0x26c>
 8006410:	2b00      	cmp	r3, #0
 8006412:	d003      	beq.n	800641c <UART_SetConfig+0x254>
 8006414:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006418:	d006      	beq.n	8006428 <UART_SetConfig+0x260>
 800641a:	e00b      	b.n	8006434 <UART_SetConfig+0x26c>
 800641c:	2301      	movs	r3, #1
 800641e:	77fb      	strb	r3, [r7, #31]
 8006420:	e075      	b.n	800650e <UART_SetConfig+0x346>
 8006422:	2302      	movs	r3, #2
 8006424:	77fb      	strb	r3, [r7, #31]
 8006426:	e072      	b.n	800650e <UART_SetConfig+0x346>
 8006428:	2304      	movs	r3, #4
 800642a:	77fb      	strb	r3, [r7, #31]
 800642c:	e06f      	b.n	800650e <UART_SetConfig+0x346>
 800642e:	2308      	movs	r3, #8
 8006430:	77fb      	strb	r3, [r7, #31]
 8006432:	e06c      	b.n	800650e <UART_SetConfig+0x346>
 8006434:	2310      	movs	r3, #16
 8006436:	77fb      	strb	r3, [r7, #31]
 8006438:	e069      	b.n	800650e <UART_SetConfig+0x346>
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	4a1c      	ldr	r2, [pc, #112]	; (80064b0 <UART_SetConfig+0x2e8>)
 8006440:	4293      	cmp	r3, r2
 8006442:	d137      	bne.n	80064b4 <UART_SetConfig+0x2ec>
 8006444:	4b14      	ldr	r3, [pc, #80]	; (8006498 <UART_SetConfig+0x2d0>)
 8006446:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800644a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800644e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006452:	d017      	beq.n	8006484 <UART_SetConfig+0x2bc>
 8006454:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006458:	d817      	bhi.n	800648a <UART_SetConfig+0x2c2>
 800645a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800645e:	d00b      	beq.n	8006478 <UART_SetConfig+0x2b0>
 8006460:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006464:	d811      	bhi.n	800648a <UART_SetConfig+0x2c2>
 8006466:	2b00      	cmp	r3, #0
 8006468:	d003      	beq.n	8006472 <UART_SetConfig+0x2aa>
 800646a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800646e:	d006      	beq.n	800647e <UART_SetConfig+0x2b6>
 8006470:	e00b      	b.n	800648a <UART_SetConfig+0x2c2>
 8006472:	2300      	movs	r3, #0
 8006474:	77fb      	strb	r3, [r7, #31]
 8006476:	e04a      	b.n	800650e <UART_SetConfig+0x346>
 8006478:	2302      	movs	r3, #2
 800647a:	77fb      	strb	r3, [r7, #31]
 800647c:	e047      	b.n	800650e <UART_SetConfig+0x346>
 800647e:	2304      	movs	r3, #4
 8006480:	77fb      	strb	r3, [r7, #31]
 8006482:	e044      	b.n	800650e <UART_SetConfig+0x346>
 8006484:	2308      	movs	r3, #8
 8006486:	77fb      	strb	r3, [r7, #31]
 8006488:	e041      	b.n	800650e <UART_SetConfig+0x346>
 800648a:	2310      	movs	r3, #16
 800648c:	77fb      	strb	r3, [r7, #31]
 800648e:	e03e      	b.n	800650e <UART_SetConfig+0x346>
 8006490:	efff69f3 	.word	0xefff69f3
 8006494:	40011000 	.word	0x40011000
 8006498:	40023800 	.word	0x40023800
 800649c:	40004400 	.word	0x40004400
 80064a0:	40004800 	.word	0x40004800
 80064a4:	40004c00 	.word	0x40004c00
 80064a8:	40005000 	.word	0x40005000
 80064ac:	40011400 	.word	0x40011400
 80064b0:	40007800 	.word	0x40007800
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	4a71      	ldr	r2, [pc, #452]	; (8006680 <UART_SetConfig+0x4b8>)
 80064ba:	4293      	cmp	r3, r2
 80064bc:	d125      	bne.n	800650a <UART_SetConfig+0x342>
 80064be:	4b71      	ldr	r3, [pc, #452]	; (8006684 <UART_SetConfig+0x4bc>)
 80064c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80064c4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80064c8:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80064cc:	d017      	beq.n	80064fe <UART_SetConfig+0x336>
 80064ce:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80064d2:	d817      	bhi.n	8006504 <UART_SetConfig+0x33c>
 80064d4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80064d8:	d00b      	beq.n	80064f2 <UART_SetConfig+0x32a>
 80064da:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80064de:	d811      	bhi.n	8006504 <UART_SetConfig+0x33c>
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d003      	beq.n	80064ec <UART_SetConfig+0x324>
 80064e4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80064e8:	d006      	beq.n	80064f8 <UART_SetConfig+0x330>
 80064ea:	e00b      	b.n	8006504 <UART_SetConfig+0x33c>
 80064ec:	2300      	movs	r3, #0
 80064ee:	77fb      	strb	r3, [r7, #31]
 80064f0:	e00d      	b.n	800650e <UART_SetConfig+0x346>
 80064f2:	2302      	movs	r3, #2
 80064f4:	77fb      	strb	r3, [r7, #31]
 80064f6:	e00a      	b.n	800650e <UART_SetConfig+0x346>
 80064f8:	2304      	movs	r3, #4
 80064fa:	77fb      	strb	r3, [r7, #31]
 80064fc:	e007      	b.n	800650e <UART_SetConfig+0x346>
 80064fe:	2308      	movs	r3, #8
 8006500:	77fb      	strb	r3, [r7, #31]
 8006502:	e004      	b.n	800650e <UART_SetConfig+0x346>
 8006504:	2310      	movs	r3, #16
 8006506:	77fb      	strb	r3, [r7, #31]
 8006508:	e001      	b.n	800650e <UART_SetConfig+0x346>
 800650a:	2310      	movs	r3, #16
 800650c:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	69db      	ldr	r3, [r3, #28]
 8006512:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006516:	d15a      	bne.n	80065ce <UART_SetConfig+0x406>
  {
    switch (clocksource)
 8006518:	7ffb      	ldrb	r3, [r7, #31]
 800651a:	2b08      	cmp	r3, #8
 800651c:	d827      	bhi.n	800656e <UART_SetConfig+0x3a6>
 800651e:	a201      	add	r2, pc, #4	; (adr r2, 8006524 <UART_SetConfig+0x35c>)
 8006520:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006524:	08006549 	.word	0x08006549
 8006528:	08006551 	.word	0x08006551
 800652c:	08006559 	.word	0x08006559
 8006530:	0800656f 	.word	0x0800656f
 8006534:	0800655f 	.word	0x0800655f
 8006538:	0800656f 	.word	0x0800656f
 800653c:	0800656f 	.word	0x0800656f
 8006540:	0800656f 	.word	0x0800656f
 8006544:	08006567 	.word	0x08006567
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006548:	f7fe f834 	bl	80045b4 <HAL_RCC_GetPCLK1Freq>
 800654c:	61b8      	str	r0, [r7, #24]
        break;
 800654e:	e013      	b.n	8006578 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006550:	f7fe f844 	bl	80045dc <HAL_RCC_GetPCLK2Freq>
 8006554:	61b8      	str	r0, [r7, #24]
        break;
 8006556:	e00f      	b.n	8006578 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006558:	4b4b      	ldr	r3, [pc, #300]	; (8006688 <UART_SetConfig+0x4c0>)
 800655a:	61bb      	str	r3, [r7, #24]
        break;
 800655c:	e00c      	b.n	8006578 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800655e:	f7fd ff3b 	bl	80043d8 <HAL_RCC_GetSysClockFreq>
 8006562:	61b8      	str	r0, [r7, #24]
        break;
 8006564:	e008      	b.n	8006578 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006566:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800656a:	61bb      	str	r3, [r7, #24]
        break;
 800656c:	e004      	b.n	8006578 <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 800656e:	2300      	movs	r3, #0
 8006570:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006572:	2301      	movs	r3, #1
 8006574:	77bb      	strb	r3, [r7, #30]
        break;
 8006576:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006578:	69bb      	ldr	r3, [r7, #24]
 800657a:	2b00      	cmp	r3, #0
 800657c:	d074      	beq.n	8006668 <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800657e:	69bb      	ldr	r3, [r7, #24]
 8006580:	005a      	lsls	r2, r3, #1
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	685b      	ldr	r3, [r3, #4]
 8006586:	085b      	lsrs	r3, r3, #1
 8006588:	441a      	add	r2, r3
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	685b      	ldr	r3, [r3, #4]
 800658e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006592:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006594:	693b      	ldr	r3, [r7, #16]
 8006596:	2b0f      	cmp	r3, #15
 8006598:	d916      	bls.n	80065c8 <UART_SetConfig+0x400>
 800659a:	693b      	ldr	r3, [r7, #16]
 800659c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80065a0:	d212      	bcs.n	80065c8 <UART_SetConfig+0x400>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80065a2:	693b      	ldr	r3, [r7, #16]
 80065a4:	b29b      	uxth	r3, r3
 80065a6:	f023 030f 	bic.w	r3, r3, #15
 80065aa:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80065ac:	693b      	ldr	r3, [r7, #16]
 80065ae:	085b      	lsrs	r3, r3, #1
 80065b0:	b29b      	uxth	r3, r3
 80065b2:	f003 0307 	and.w	r3, r3, #7
 80065b6:	b29a      	uxth	r2, r3
 80065b8:	89fb      	ldrh	r3, [r7, #14]
 80065ba:	4313      	orrs	r3, r2
 80065bc:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	89fa      	ldrh	r2, [r7, #14]
 80065c4:	60da      	str	r2, [r3, #12]
 80065c6:	e04f      	b.n	8006668 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 80065c8:	2301      	movs	r3, #1
 80065ca:	77bb      	strb	r3, [r7, #30]
 80065cc:	e04c      	b.n	8006668 <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 80065ce:	7ffb      	ldrb	r3, [r7, #31]
 80065d0:	2b08      	cmp	r3, #8
 80065d2:	d828      	bhi.n	8006626 <UART_SetConfig+0x45e>
 80065d4:	a201      	add	r2, pc, #4	; (adr r2, 80065dc <UART_SetConfig+0x414>)
 80065d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065da:	bf00      	nop
 80065dc:	08006601 	.word	0x08006601
 80065e0:	08006609 	.word	0x08006609
 80065e4:	08006611 	.word	0x08006611
 80065e8:	08006627 	.word	0x08006627
 80065ec:	08006617 	.word	0x08006617
 80065f0:	08006627 	.word	0x08006627
 80065f4:	08006627 	.word	0x08006627
 80065f8:	08006627 	.word	0x08006627
 80065fc:	0800661f 	.word	0x0800661f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006600:	f7fd ffd8 	bl	80045b4 <HAL_RCC_GetPCLK1Freq>
 8006604:	61b8      	str	r0, [r7, #24]
        break;
 8006606:	e013      	b.n	8006630 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006608:	f7fd ffe8 	bl	80045dc <HAL_RCC_GetPCLK2Freq>
 800660c:	61b8      	str	r0, [r7, #24]
        break;
 800660e:	e00f      	b.n	8006630 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006610:	4b1d      	ldr	r3, [pc, #116]	; (8006688 <UART_SetConfig+0x4c0>)
 8006612:	61bb      	str	r3, [r7, #24]
        break;
 8006614:	e00c      	b.n	8006630 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006616:	f7fd fedf 	bl	80043d8 <HAL_RCC_GetSysClockFreq>
 800661a:	61b8      	str	r0, [r7, #24]
        break;
 800661c:	e008      	b.n	8006630 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800661e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006622:	61bb      	str	r3, [r7, #24]
        break;
 8006624:	e004      	b.n	8006630 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 8006626:	2300      	movs	r3, #0
 8006628:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800662a:	2301      	movs	r3, #1
 800662c:	77bb      	strb	r3, [r7, #30]
        break;
 800662e:	bf00      	nop
    }

    if (pclk != 0U)
 8006630:	69bb      	ldr	r3, [r7, #24]
 8006632:	2b00      	cmp	r3, #0
 8006634:	d018      	beq.n	8006668 <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	685b      	ldr	r3, [r3, #4]
 800663a:	085a      	lsrs	r2, r3, #1
 800663c:	69bb      	ldr	r3, [r7, #24]
 800663e:	441a      	add	r2, r3
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	685b      	ldr	r3, [r3, #4]
 8006644:	fbb2 f3f3 	udiv	r3, r2, r3
 8006648:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800664a:	693b      	ldr	r3, [r7, #16]
 800664c:	2b0f      	cmp	r3, #15
 800664e:	d909      	bls.n	8006664 <UART_SetConfig+0x49c>
 8006650:	693b      	ldr	r3, [r7, #16]
 8006652:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006656:	d205      	bcs.n	8006664 <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006658:	693b      	ldr	r3, [r7, #16]
 800665a:	b29a      	uxth	r2, r3
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	60da      	str	r2, [r3, #12]
 8006662:	e001      	b.n	8006668 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8006664:	2301      	movs	r3, #1
 8006666:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	2200      	movs	r2, #0
 800666c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	2200      	movs	r2, #0
 8006672:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8006674:	7fbb      	ldrb	r3, [r7, #30]
}
 8006676:	4618      	mov	r0, r3
 8006678:	3720      	adds	r7, #32
 800667a:	46bd      	mov	sp, r7
 800667c:	bd80      	pop	{r7, pc}
 800667e:	bf00      	nop
 8006680:	40007c00 	.word	0x40007c00
 8006684:	40023800 	.word	0x40023800
 8006688:	00f42400 	.word	0x00f42400

0800668c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800668c:	b480      	push	{r7}
 800668e:	b083      	sub	sp, #12
 8006690:	af00      	add	r7, sp, #0
 8006692:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006698:	f003 0301 	and.w	r3, r3, #1
 800669c:	2b00      	cmp	r3, #0
 800669e:	d00a      	beq.n	80066b6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	685b      	ldr	r3, [r3, #4]
 80066a6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	430a      	orrs	r2, r1
 80066b4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066ba:	f003 0302 	and.w	r3, r3, #2
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d00a      	beq.n	80066d8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	685b      	ldr	r3, [r3, #4]
 80066c8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	430a      	orrs	r2, r1
 80066d6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066dc:	f003 0304 	and.w	r3, r3, #4
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d00a      	beq.n	80066fa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	685b      	ldr	r3, [r3, #4]
 80066ea:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	430a      	orrs	r2, r1
 80066f8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066fe:	f003 0308 	and.w	r3, r3, #8
 8006702:	2b00      	cmp	r3, #0
 8006704:	d00a      	beq.n	800671c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	685b      	ldr	r3, [r3, #4]
 800670c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	430a      	orrs	r2, r1
 800671a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006720:	f003 0310 	and.w	r3, r3, #16
 8006724:	2b00      	cmp	r3, #0
 8006726:	d00a      	beq.n	800673e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	689b      	ldr	r3, [r3, #8]
 800672e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	430a      	orrs	r2, r1
 800673c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006742:	f003 0320 	and.w	r3, r3, #32
 8006746:	2b00      	cmp	r3, #0
 8006748:	d00a      	beq.n	8006760 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	689b      	ldr	r3, [r3, #8]
 8006750:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	430a      	orrs	r2, r1
 800675e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006764:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006768:	2b00      	cmp	r3, #0
 800676a:	d01a      	beq.n	80067a2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	685b      	ldr	r3, [r3, #4]
 8006772:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	430a      	orrs	r2, r1
 8006780:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006786:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800678a:	d10a      	bne.n	80067a2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	685b      	ldr	r3, [r3, #4]
 8006792:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	430a      	orrs	r2, r1
 80067a0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d00a      	beq.n	80067c4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	685b      	ldr	r3, [r3, #4]
 80067b4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	430a      	orrs	r2, r1
 80067c2:	605a      	str	r2, [r3, #4]
  }
}
 80067c4:	bf00      	nop
 80067c6:	370c      	adds	r7, #12
 80067c8:	46bd      	mov	sp, r7
 80067ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ce:	4770      	bx	lr

080067d0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80067d0:	b580      	push	{r7, lr}
 80067d2:	b086      	sub	sp, #24
 80067d4:	af02      	add	r7, sp, #8
 80067d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	2200      	movs	r2, #0
 80067dc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80067e0:	f7fc f89e 	bl	8002920 <HAL_GetTick>
 80067e4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	f003 0308 	and.w	r3, r3, #8
 80067f0:	2b08      	cmp	r3, #8
 80067f2:	d10e      	bne.n	8006812 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80067f4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80067f8:	9300      	str	r3, [sp, #0]
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	2200      	movs	r2, #0
 80067fe:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006802:	6878      	ldr	r0, [r7, #4]
 8006804:	f000 f817 	bl	8006836 <UART_WaitOnFlagUntilTimeout>
 8006808:	4603      	mov	r3, r0
 800680a:	2b00      	cmp	r3, #0
 800680c:	d001      	beq.n	8006812 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800680e:	2303      	movs	r3, #3
 8006810:	e00d      	b.n	800682e <UART_CheckIdleState+0x5e>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	2220      	movs	r2, #32
 8006816:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	2220      	movs	r2, #32
 800681c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	2200      	movs	r2, #0
 8006822:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	2200      	movs	r2, #0
 8006828:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800682c:	2300      	movs	r3, #0
}
 800682e:	4618      	mov	r0, r3
 8006830:	3710      	adds	r7, #16
 8006832:	46bd      	mov	sp, r7
 8006834:	bd80      	pop	{r7, pc}

08006836 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006836:	b580      	push	{r7, lr}
 8006838:	b09c      	sub	sp, #112	; 0x70
 800683a:	af00      	add	r7, sp, #0
 800683c:	60f8      	str	r0, [r7, #12]
 800683e:	60b9      	str	r1, [r7, #8]
 8006840:	603b      	str	r3, [r7, #0]
 8006842:	4613      	mov	r3, r2
 8006844:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006846:	e0a5      	b.n	8006994 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006848:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800684a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800684e:	f000 80a1 	beq.w	8006994 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006852:	f7fc f865 	bl	8002920 <HAL_GetTick>
 8006856:	4602      	mov	r2, r0
 8006858:	683b      	ldr	r3, [r7, #0]
 800685a:	1ad3      	subs	r3, r2, r3
 800685c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800685e:	429a      	cmp	r2, r3
 8006860:	d302      	bcc.n	8006868 <UART_WaitOnFlagUntilTimeout+0x32>
 8006862:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006864:	2b00      	cmp	r3, #0
 8006866:	d13e      	bne.n	80068e6 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800686e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006870:	e853 3f00 	ldrex	r3, [r3]
 8006874:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006876:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006878:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800687c:	667b      	str	r3, [r7, #100]	; 0x64
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	461a      	mov	r2, r3
 8006884:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006886:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006888:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800688a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800688c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800688e:	e841 2300 	strex	r3, r2, [r1]
 8006892:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006894:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006896:	2b00      	cmp	r3, #0
 8006898:	d1e6      	bne.n	8006868 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	3308      	adds	r3, #8
 80068a0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80068a4:	e853 3f00 	ldrex	r3, [r3]
 80068a8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80068aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068ac:	f023 0301 	bic.w	r3, r3, #1
 80068b0:	663b      	str	r3, [r7, #96]	; 0x60
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	3308      	adds	r3, #8
 80068b8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80068ba:	64ba      	str	r2, [r7, #72]	; 0x48
 80068bc:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068be:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80068c0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80068c2:	e841 2300 	strex	r3, r2, [r1]
 80068c6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80068c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d1e5      	bne.n	800689a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	2220      	movs	r2, #32
 80068d2:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	2220      	movs	r2, #32
 80068d8:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	2200      	movs	r2, #0
 80068de:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80068e2:	2303      	movs	r3, #3
 80068e4:	e067      	b.n	80069b6 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	f003 0304 	and.w	r3, r3, #4
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d04f      	beq.n	8006994 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	69db      	ldr	r3, [r3, #28]
 80068fa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80068fe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006902:	d147      	bne.n	8006994 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800690c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006914:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006916:	e853 3f00 	ldrex	r3, [r3]
 800691a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800691c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800691e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006922:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	461a      	mov	r2, r3
 800692a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800692c:	637b      	str	r3, [r7, #52]	; 0x34
 800692e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006930:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006932:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006934:	e841 2300 	strex	r3, r2, [r1]
 8006938:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800693a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800693c:	2b00      	cmp	r3, #0
 800693e:	d1e6      	bne.n	800690e <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	3308      	adds	r3, #8
 8006946:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006948:	697b      	ldr	r3, [r7, #20]
 800694a:	e853 3f00 	ldrex	r3, [r3]
 800694e:	613b      	str	r3, [r7, #16]
   return(result);
 8006950:	693b      	ldr	r3, [r7, #16]
 8006952:	f023 0301 	bic.w	r3, r3, #1
 8006956:	66bb      	str	r3, [r7, #104]	; 0x68
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	3308      	adds	r3, #8
 800695e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006960:	623a      	str	r2, [r7, #32]
 8006962:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006964:	69f9      	ldr	r1, [r7, #28]
 8006966:	6a3a      	ldr	r2, [r7, #32]
 8006968:	e841 2300 	strex	r3, r2, [r1]
 800696c:	61bb      	str	r3, [r7, #24]
   return(result);
 800696e:	69bb      	ldr	r3, [r7, #24]
 8006970:	2b00      	cmp	r3, #0
 8006972:	d1e5      	bne.n	8006940 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	2220      	movs	r2, #32
 8006978:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	2220      	movs	r2, #32
 800697e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	2220      	movs	r2, #32
 8006984:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	2200      	movs	r2, #0
 800698c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8006990:	2303      	movs	r3, #3
 8006992:	e010      	b.n	80069b6 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	69da      	ldr	r2, [r3, #28]
 800699a:	68bb      	ldr	r3, [r7, #8]
 800699c:	4013      	ands	r3, r2
 800699e:	68ba      	ldr	r2, [r7, #8]
 80069a0:	429a      	cmp	r2, r3
 80069a2:	bf0c      	ite	eq
 80069a4:	2301      	moveq	r3, #1
 80069a6:	2300      	movne	r3, #0
 80069a8:	b2db      	uxtb	r3, r3
 80069aa:	461a      	mov	r2, r3
 80069ac:	79fb      	ldrb	r3, [r7, #7]
 80069ae:	429a      	cmp	r2, r3
 80069b0:	f43f af4a 	beq.w	8006848 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80069b4:	2300      	movs	r3, #0
}
 80069b6:	4618      	mov	r0, r3
 80069b8:	3770      	adds	r7, #112	; 0x70
 80069ba:	46bd      	mov	sp, r7
 80069bc:	bd80      	pop	{r7, pc}
	...

080069c0 <__errno>:
 80069c0:	4b01      	ldr	r3, [pc, #4]	; (80069c8 <__errno+0x8>)
 80069c2:	6818      	ldr	r0, [r3, #0]
 80069c4:	4770      	bx	lr
 80069c6:	bf00      	nop
 80069c8:	20000028 	.word	0x20000028

080069cc <__libc_init_array>:
 80069cc:	b570      	push	{r4, r5, r6, lr}
 80069ce:	4d0d      	ldr	r5, [pc, #52]	; (8006a04 <__libc_init_array+0x38>)
 80069d0:	4c0d      	ldr	r4, [pc, #52]	; (8006a08 <__libc_init_array+0x3c>)
 80069d2:	1b64      	subs	r4, r4, r5
 80069d4:	10a4      	asrs	r4, r4, #2
 80069d6:	2600      	movs	r6, #0
 80069d8:	42a6      	cmp	r6, r4
 80069da:	d109      	bne.n	80069f0 <__libc_init_array+0x24>
 80069dc:	4d0b      	ldr	r5, [pc, #44]	; (8006a0c <__libc_init_array+0x40>)
 80069de:	4c0c      	ldr	r4, [pc, #48]	; (8006a10 <__libc_init_array+0x44>)
 80069e0:	f002 feb4 	bl	800974c <_init>
 80069e4:	1b64      	subs	r4, r4, r5
 80069e6:	10a4      	asrs	r4, r4, #2
 80069e8:	2600      	movs	r6, #0
 80069ea:	42a6      	cmp	r6, r4
 80069ec:	d105      	bne.n	80069fa <__libc_init_array+0x2e>
 80069ee:	bd70      	pop	{r4, r5, r6, pc}
 80069f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80069f4:	4798      	blx	r3
 80069f6:	3601      	adds	r6, #1
 80069f8:	e7ee      	b.n	80069d8 <__libc_init_array+0xc>
 80069fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80069fe:	4798      	blx	r3
 8006a00:	3601      	adds	r6, #1
 8006a02:	e7f2      	b.n	80069ea <__libc_init_array+0x1e>
 8006a04:	08009b9c 	.word	0x08009b9c
 8006a08:	08009b9c 	.word	0x08009b9c
 8006a0c:	08009b9c 	.word	0x08009b9c
 8006a10:	08009ba0 	.word	0x08009ba0

08006a14 <memset>:
 8006a14:	4402      	add	r2, r0
 8006a16:	4603      	mov	r3, r0
 8006a18:	4293      	cmp	r3, r2
 8006a1a:	d100      	bne.n	8006a1e <memset+0xa>
 8006a1c:	4770      	bx	lr
 8006a1e:	f803 1b01 	strb.w	r1, [r3], #1
 8006a22:	e7f9      	b.n	8006a18 <memset+0x4>

08006a24 <__cvt>:
 8006a24:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006a28:	ec55 4b10 	vmov	r4, r5, d0
 8006a2c:	2d00      	cmp	r5, #0
 8006a2e:	460e      	mov	r6, r1
 8006a30:	4619      	mov	r1, r3
 8006a32:	462b      	mov	r3, r5
 8006a34:	bfbb      	ittet	lt
 8006a36:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8006a3a:	461d      	movlt	r5, r3
 8006a3c:	2300      	movge	r3, #0
 8006a3e:	232d      	movlt	r3, #45	; 0x2d
 8006a40:	700b      	strb	r3, [r1, #0]
 8006a42:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006a44:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8006a48:	4691      	mov	r9, r2
 8006a4a:	f023 0820 	bic.w	r8, r3, #32
 8006a4e:	bfbc      	itt	lt
 8006a50:	4622      	movlt	r2, r4
 8006a52:	4614      	movlt	r4, r2
 8006a54:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006a58:	d005      	beq.n	8006a66 <__cvt+0x42>
 8006a5a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8006a5e:	d100      	bne.n	8006a62 <__cvt+0x3e>
 8006a60:	3601      	adds	r6, #1
 8006a62:	2102      	movs	r1, #2
 8006a64:	e000      	b.n	8006a68 <__cvt+0x44>
 8006a66:	2103      	movs	r1, #3
 8006a68:	ab03      	add	r3, sp, #12
 8006a6a:	9301      	str	r3, [sp, #4]
 8006a6c:	ab02      	add	r3, sp, #8
 8006a6e:	9300      	str	r3, [sp, #0]
 8006a70:	ec45 4b10 	vmov	d0, r4, r5
 8006a74:	4653      	mov	r3, sl
 8006a76:	4632      	mov	r2, r6
 8006a78:	f000 fcea 	bl	8007450 <_dtoa_r>
 8006a7c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006a80:	4607      	mov	r7, r0
 8006a82:	d102      	bne.n	8006a8a <__cvt+0x66>
 8006a84:	f019 0f01 	tst.w	r9, #1
 8006a88:	d022      	beq.n	8006ad0 <__cvt+0xac>
 8006a8a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006a8e:	eb07 0906 	add.w	r9, r7, r6
 8006a92:	d110      	bne.n	8006ab6 <__cvt+0x92>
 8006a94:	783b      	ldrb	r3, [r7, #0]
 8006a96:	2b30      	cmp	r3, #48	; 0x30
 8006a98:	d10a      	bne.n	8006ab0 <__cvt+0x8c>
 8006a9a:	2200      	movs	r2, #0
 8006a9c:	2300      	movs	r3, #0
 8006a9e:	4620      	mov	r0, r4
 8006aa0:	4629      	mov	r1, r5
 8006aa2:	f7fa f831 	bl	8000b08 <__aeabi_dcmpeq>
 8006aa6:	b918      	cbnz	r0, 8006ab0 <__cvt+0x8c>
 8006aa8:	f1c6 0601 	rsb	r6, r6, #1
 8006aac:	f8ca 6000 	str.w	r6, [sl]
 8006ab0:	f8da 3000 	ldr.w	r3, [sl]
 8006ab4:	4499      	add	r9, r3
 8006ab6:	2200      	movs	r2, #0
 8006ab8:	2300      	movs	r3, #0
 8006aba:	4620      	mov	r0, r4
 8006abc:	4629      	mov	r1, r5
 8006abe:	f7fa f823 	bl	8000b08 <__aeabi_dcmpeq>
 8006ac2:	b108      	cbz	r0, 8006ac8 <__cvt+0xa4>
 8006ac4:	f8cd 900c 	str.w	r9, [sp, #12]
 8006ac8:	2230      	movs	r2, #48	; 0x30
 8006aca:	9b03      	ldr	r3, [sp, #12]
 8006acc:	454b      	cmp	r3, r9
 8006ace:	d307      	bcc.n	8006ae0 <__cvt+0xbc>
 8006ad0:	9b03      	ldr	r3, [sp, #12]
 8006ad2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006ad4:	1bdb      	subs	r3, r3, r7
 8006ad6:	4638      	mov	r0, r7
 8006ad8:	6013      	str	r3, [r2, #0]
 8006ada:	b004      	add	sp, #16
 8006adc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ae0:	1c59      	adds	r1, r3, #1
 8006ae2:	9103      	str	r1, [sp, #12]
 8006ae4:	701a      	strb	r2, [r3, #0]
 8006ae6:	e7f0      	b.n	8006aca <__cvt+0xa6>

08006ae8 <__exponent>:
 8006ae8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006aea:	4603      	mov	r3, r0
 8006aec:	2900      	cmp	r1, #0
 8006aee:	bfb8      	it	lt
 8006af0:	4249      	neglt	r1, r1
 8006af2:	f803 2b02 	strb.w	r2, [r3], #2
 8006af6:	bfb4      	ite	lt
 8006af8:	222d      	movlt	r2, #45	; 0x2d
 8006afa:	222b      	movge	r2, #43	; 0x2b
 8006afc:	2909      	cmp	r1, #9
 8006afe:	7042      	strb	r2, [r0, #1]
 8006b00:	dd2a      	ble.n	8006b58 <__exponent+0x70>
 8006b02:	f10d 0407 	add.w	r4, sp, #7
 8006b06:	46a4      	mov	ip, r4
 8006b08:	270a      	movs	r7, #10
 8006b0a:	46a6      	mov	lr, r4
 8006b0c:	460a      	mov	r2, r1
 8006b0e:	fb91 f6f7 	sdiv	r6, r1, r7
 8006b12:	fb07 1516 	mls	r5, r7, r6, r1
 8006b16:	3530      	adds	r5, #48	; 0x30
 8006b18:	2a63      	cmp	r2, #99	; 0x63
 8006b1a:	f104 34ff 	add.w	r4, r4, #4294967295
 8006b1e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8006b22:	4631      	mov	r1, r6
 8006b24:	dcf1      	bgt.n	8006b0a <__exponent+0x22>
 8006b26:	3130      	adds	r1, #48	; 0x30
 8006b28:	f1ae 0502 	sub.w	r5, lr, #2
 8006b2c:	f804 1c01 	strb.w	r1, [r4, #-1]
 8006b30:	1c44      	adds	r4, r0, #1
 8006b32:	4629      	mov	r1, r5
 8006b34:	4561      	cmp	r1, ip
 8006b36:	d30a      	bcc.n	8006b4e <__exponent+0x66>
 8006b38:	f10d 0209 	add.w	r2, sp, #9
 8006b3c:	eba2 020e 	sub.w	r2, r2, lr
 8006b40:	4565      	cmp	r5, ip
 8006b42:	bf88      	it	hi
 8006b44:	2200      	movhi	r2, #0
 8006b46:	4413      	add	r3, r2
 8006b48:	1a18      	subs	r0, r3, r0
 8006b4a:	b003      	add	sp, #12
 8006b4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006b4e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006b52:	f804 2f01 	strb.w	r2, [r4, #1]!
 8006b56:	e7ed      	b.n	8006b34 <__exponent+0x4c>
 8006b58:	2330      	movs	r3, #48	; 0x30
 8006b5a:	3130      	adds	r1, #48	; 0x30
 8006b5c:	7083      	strb	r3, [r0, #2]
 8006b5e:	70c1      	strb	r1, [r0, #3]
 8006b60:	1d03      	adds	r3, r0, #4
 8006b62:	e7f1      	b.n	8006b48 <__exponent+0x60>

08006b64 <_printf_float>:
 8006b64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b68:	ed2d 8b02 	vpush	{d8}
 8006b6c:	b08d      	sub	sp, #52	; 0x34
 8006b6e:	460c      	mov	r4, r1
 8006b70:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8006b74:	4616      	mov	r6, r2
 8006b76:	461f      	mov	r7, r3
 8006b78:	4605      	mov	r5, r0
 8006b7a:	f001 fa55 	bl	8008028 <_localeconv_r>
 8006b7e:	f8d0 a000 	ldr.w	sl, [r0]
 8006b82:	4650      	mov	r0, sl
 8006b84:	f7f9 fb44 	bl	8000210 <strlen>
 8006b88:	2300      	movs	r3, #0
 8006b8a:	930a      	str	r3, [sp, #40]	; 0x28
 8006b8c:	6823      	ldr	r3, [r4, #0]
 8006b8e:	9305      	str	r3, [sp, #20]
 8006b90:	f8d8 3000 	ldr.w	r3, [r8]
 8006b94:	f894 b018 	ldrb.w	fp, [r4, #24]
 8006b98:	3307      	adds	r3, #7
 8006b9a:	f023 0307 	bic.w	r3, r3, #7
 8006b9e:	f103 0208 	add.w	r2, r3, #8
 8006ba2:	f8c8 2000 	str.w	r2, [r8]
 8006ba6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006baa:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8006bae:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8006bb2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006bb6:	9307      	str	r3, [sp, #28]
 8006bb8:	f8cd 8018 	str.w	r8, [sp, #24]
 8006bbc:	ee08 0a10 	vmov	s16, r0
 8006bc0:	4b9f      	ldr	r3, [pc, #636]	; (8006e40 <_printf_float+0x2dc>)
 8006bc2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006bc6:	f04f 32ff 	mov.w	r2, #4294967295
 8006bca:	f7f9 ffcf 	bl	8000b6c <__aeabi_dcmpun>
 8006bce:	bb88      	cbnz	r0, 8006c34 <_printf_float+0xd0>
 8006bd0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006bd4:	4b9a      	ldr	r3, [pc, #616]	; (8006e40 <_printf_float+0x2dc>)
 8006bd6:	f04f 32ff 	mov.w	r2, #4294967295
 8006bda:	f7f9 ffa9 	bl	8000b30 <__aeabi_dcmple>
 8006bde:	bb48      	cbnz	r0, 8006c34 <_printf_float+0xd0>
 8006be0:	2200      	movs	r2, #0
 8006be2:	2300      	movs	r3, #0
 8006be4:	4640      	mov	r0, r8
 8006be6:	4649      	mov	r1, r9
 8006be8:	f7f9 ff98 	bl	8000b1c <__aeabi_dcmplt>
 8006bec:	b110      	cbz	r0, 8006bf4 <_printf_float+0x90>
 8006bee:	232d      	movs	r3, #45	; 0x2d
 8006bf0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006bf4:	4b93      	ldr	r3, [pc, #588]	; (8006e44 <_printf_float+0x2e0>)
 8006bf6:	4894      	ldr	r0, [pc, #592]	; (8006e48 <_printf_float+0x2e4>)
 8006bf8:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8006bfc:	bf94      	ite	ls
 8006bfe:	4698      	movls	r8, r3
 8006c00:	4680      	movhi	r8, r0
 8006c02:	2303      	movs	r3, #3
 8006c04:	6123      	str	r3, [r4, #16]
 8006c06:	9b05      	ldr	r3, [sp, #20]
 8006c08:	f023 0204 	bic.w	r2, r3, #4
 8006c0c:	6022      	str	r2, [r4, #0]
 8006c0e:	f04f 0900 	mov.w	r9, #0
 8006c12:	9700      	str	r7, [sp, #0]
 8006c14:	4633      	mov	r3, r6
 8006c16:	aa0b      	add	r2, sp, #44	; 0x2c
 8006c18:	4621      	mov	r1, r4
 8006c1a:	4628      	mov	r0, r5
 8006c1c:	f000 f9d8 	bl	8006fd0 <_printf_common>
 8006c20:	3001      	adds	r0, #1
 8006c22:	f040 8090 	bne.w	8006d46 <_printf_float+0x1e2>
 8006c26:	f04f 30ff 	mov.w	r0, #4294967295
 8006c2a:	b00d      	add	sp, #52	; 0x34
 8006c2c:	ecbd 8b02 	vpop	{d8}
 8006c30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c34:	4642      	mov	r2, r8
 8006c36:	464b      	mov	r3, r9
 8006c38:	4640      	mov	r0, r8
 8006c3a:	4649      	mov	r1, r9
 8006c3c:	f7f9 ff96 	bl	8000b6c <__aeabi_dcmpun>
 8006c40:	b140      	cbz	r0, 8006c54 <_printf_float+0xf0>
 8006c42:	464b      	mov	r3, r9
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	bfbc      	itt	lt
 8006c48:	232d      	movlt	r3, #45	; 0x2d
 8006c4a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8006c4e:	487f      	ldr	r0, [pc, #508]	; (8006e4c <_printf_float+0x2e8>)
 8006c50:	4b7f      	ldr	r3, [pc, #508]	; (8006e50 <_printf_float+0x2ec>)
 8006c52:	e7d1      	b.n	8006bf8 <_printf_float+0x94>
 8006c54:	6863      	ldr	r3, [r4, #4]
 8006c56:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8006c5a:	9206      	str	r2, [sp, #24]
 8006c5c:	1c5a      	adds	r2, r3, #1
 8006c5e:	d13f      	bne.n	8006ce0 <_printf_float+0x17c>
 8006c60:	2306      	movs	r3, #6
 8006c62:	6063      	str	r3, [r4, #4]
 8006c64:	9b05      	ldr	r3, [sp, #20]
 8006c66:	6861      	ldr	r1, [r4, #4]
 8006c68:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8006c6c:	2300      	movs	r3, #0
 8006c6e:	9303      	str	r3, [sp, #12]
 8006c70:	ab0a      	add	r3, sp, #40	; 0x28
 8006c72:	e9cd b301 	strd	fp, r3, [sp, #4]
 8006c76:	ab09      	add	r3, sp, #36	; 0x24
 8006c78:	ec49 8b10 	vmov	d0, r8, r9
 8006c7c:	9300      	str	r3, [sp, #0]
 8006c7e:	6022      	str	r2, [r4, #0]
 8006c80:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006c84:	4628      	mov	r0, r5
 8006c86:	f7ff fecd 	bl	8006a24 <__cvt>
 8006c8a:	9b06      	ldr	r3, [sp, #24]
 8006c8c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006c8e:	2b47      	cmp	r3, #71	; 0x47
 8006c90:	4680      	mov	r8, r0
 8006c92:	d108      	bne.n	8006ca6 <_printf_float+0x142>
 8006c94:	1cc8      	adds	r0, r1, #3
 8006c96:	db02      	blt.n	8006c9e <_printf_float+0x13a>
 8006c98:	6863      	ldr	r3, [r4, #4]
 8006c9a:	4299      	cmp	r1, r3
 8006c9c:	dd41      	ble.n	8006d22 <_printf_float+0x1be>
 8006c9e:	f1ab 0b02 	sub.w	fp, fp, #2
 8006ca2:	fa5f fb8b 	uxtb.w	fp, fp
 8006ca6:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006caa:	d820      	bhi.n	8006cee <_printf_float+0x18a>
 8006cac:	3901      	subs	r1, #1
 8006cae:	465a      	mov	r2, fp
 8006cb0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006cb4:	9109      	str	r1, [sp, #36]	; 0x24
 8006cb6:	f7ff ff17 	bl	8006ae8 <__exponent>
 8006cba:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006cbc:	1813      	adds	r3, r2, r0
 8006cbe:	2a01      	cmp	r2, #1
 8006cc0:	4681      	mov	r9, r0
 8006cc2:	6123      	str	r3, [r4, #16]
 8006cc4:	dc02      	bgt.n	8006ccc <_printf_float+0x168>
 8006cc6:	6822      	ldr	r2, [r4, #0]
 8006cc8:	07d2      	lsls	r2, r2, #31
 8006cca:	d501      	bpl.n	8006cd0 <_printf_float+0x16c>
 8006ccc:	3301      	adds	r3, #1
 8006cce:	6123      	str	r3, [r4, #16]
 8006cd0:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d09c      	beq.n	8006c12 <_printf_float+0xae>
 8006cd8:	232d      	movs	r3, #45	; 0x2d
 8006cda:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006cde:	e798      	b.n	8006c12 <_printf_float+0xae>
 8006ce0:	9a06      	ldr	r2, [sp, #24]
 8006ce2:	2a47      	cmp	r2, #71	; 0x47
 8006ce4:	d1be      	bne.n	8006c64 <_printf_float+0x100>
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d1bc      	bne.n	8006c64 <_printf_float+0x100>
 8006cea:	2301      	movs	r3, #1
 8006cec:	e7b9      	b.n	8006c62 <_printf_float+0xfe>
 8006cee:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8006cf2:	d118      	bne.n	8006d26 <_printf_float+0x1c2>
 8006cf4:	2900      	cmp	r1, #0
 8006cf6:	6863      	ldr	r3, [r4, #4]
 8006cf8:	dd0b      	ble.n	8006d12 <_printf_float+0x1ae>
 8006cfa:	6121      	str	r1, [r4, #16]
 8006cfc:	b913      	cbnz	r3, 8006d04 <_printf_float+0x1a0>
 8006cfe:	6822      	ldr	r2, [r4, #0]
 8006d00:	07d0      	lsls	r0, r2, #31
 8006d02:	d502      	bpl.n	8006d0a <_printf_float+0x1a6>
 8006d04:	3301      	adds	r3, #1
 8006d06:	440b      	add	r3, r1
 8006d08:	6123      	str	r3, [r4, #16]
 8006d0a:	65a1      	str	r1, [r4, #88]	; 0x58
 8006d0c:	f04f 0900 	mov.w	r9, #0
 8006d10:	e7de      	b.n	8006cd0 <_printf_float+0x16c>
 8006d12:	b913      	cbnz	r3, 8006d1a <_printf_float+0x1b6>
 8006d14:	6822      	ldr	r2, [r4, #0]
 8006d16:	07d2      	lsls	r2, r2, #31
 8006d18:	d501      	bpl.n	8006d1e <_printf_float+0x1ba>
 8006d1a:	3302      	adds	r3, #2
 8006d1c:	e7f4      	b.n	8006d08 <_printf_float+0x1a4>
 8006d1e:	2301      	movs	r3, #1
 8006d20:	e7f2      	b.n	8006d08 <_printf_float+0x1a4>
 8006d22:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8006d26:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006d28:	4299      	cmp	r1, r3
 8006d2a:	db05      	blt.n	8006d38 <_printf_float+0x1d4>
 8006d2c:	6823      	ldr	r3, [r4, #0]
 8006d2e:	6121      	str	r1, [r4, #16]
 8006d30:	07d8      	lsls	r0, r3, #31
 8006d32:	d5ea      	bpl.n	8006d0a <_printf_float+0x1a6>
 8006d34:	1c4b      	adds	r3, r1, #1
 8006d36:	e7e7      	b.n	8006d08 <_printf_float+0x1a4>
 8006d38:	2900      	cmp	r1, #0
 8006d3a:	bfd4      	ite	le
 8006d3c:	f1c1 0202 	rsble	r2, r1, #2
 8006d40:	2201      	movgt	r2, #1
 8006d42:	4413      	add	r3, r2
 8006d44:	e7e0      	b.n	8006d08 <_printf_float+0x1a4>
 8006d46:	6823      	ldr	r3, [r4, #0]
 8006d48:	055a      	lsls	r2, r3, #21
 8006d4a:	d407      	bmi.n	8006d5c <_printf_float+0x1f8>
 8006d4c:	6923      	ldr	r3, [r4, #16]
 8006d4e:	4642      	mov	r2, r8
 8006d50:	4631      	mov	r1, r6
 8006d52:	4628      	mov	r0, r5
 8006d54:	47b8      	blx	r7
 8006d56:	3001      	adds	r0, #1
 8006d58:	d12c      	bne.n	8006db4 <_printf_float+0x250>
 8006d5a:	e764      	b.n	8006c26 <_printf_float+0xc2>
 8006d5c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006d60:	f240 80e0 	bls.w	8006f24 <_printf_float+0x3c0>
 8006d64:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006d68:	2200      	movs	r2, #0
 8006d6a:	2300      	movs	r3, #0
 8006d6c:	f7f9 fecc 	bl	8000b08 <__aeabi_dcmpeq>
 8006d70:	2800      	cmp	r0, #0
 8006d72:	d034      	beq.n	8006dde <_printf_float+0x27a>
 8006d74:	4a37      	ldr	r2, [pc, #220]	; (8006e54 <_printf_float+0x2f0>)
 8006d76:	2301      	movs	r3, #1
 8006d78:	4631      	mov	r1, r6
 8006d7a:	4628      	mov	r0, r5
 8006d7c:	47b8      	blx	r7
 8006d7e:	3001      	adds	r0, #1
 8006d80:	f43f af51 	beq.w	8006c26 <_printf_float+0xc2>
 8006d84:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006d88:	429a      	cmp	r2, r3
 8006d8a:	db02      	blt.n	8006d92 <_printf_float+0x22e>
 8006d8c:	6823      	ldr	r3, [r4, #0]
 8006d8e:	07d8      	lsls	r0, r3, #31
 8006d90:	d510      	bpl.n	8006db4 <_printf_float+0x250>
 8006d92:	ee18 3a10 	vmov	r3, s16
 8006d96:	4652      	mov	r2, sl
 8006d98:	4631      	mov	r1, r6
 8006d9a:	4628      	mov	r0, r5
 8006d9c:	47b8      	blx	r7
 8006d9e:	3001      	adds	r0, #1
 8006da0:	f43f af41 	beq.w	8006c26 <_printf_float+0xc2>
 8006da4:	f04f 0800 	mov.w	r8, #0
 8006da8:	f104 091a 	add.w	r9, r4, #26
 8006dac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006dae:	3b01      	subs	r3, #1
 8006db0:	4543      	cmp	r3, r8
 8006db2:	dc09      	bgt.n	8006dc8 <_printf_float+0x264>
 8006db4:	6823      	ldr	r3, [r4, #0]
 8006db6:	079b      	lsls	r3, r3, #30
 8006db8:	f100 8105 	bmi.w	8006fc6 <_printf_float+0x462>
 8006dbc:	68e0      	ldr	r0, [r4, #12]
 8006dbe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006dc0:	4298      	cmp	r0, r3
 8006dc2:	bfb8      	it	lt
 8006dc4:	4618      	movlt	r0, r3
 8006dc6:	e730      	b.n	8006c2a <_printf_float+0xc6>
 8006dc8:	2301      	movs	r3, #1
 8006dca:	464a      	mov	r2, r9
 8006dcc:	4631      	mov	r1, r6
 8006dce:	4628      	mov	r0, r5
 8006dd0:	47b8      	blx	r7
 8006dd2:	3001      	adds	r0, #1
 8006dd4:	f43f af27 	beq.w	8006c26 <_printf_float+0xc2>
 8006dd8:	f108 0801 	add.w	r8, r8, #1
 8006ddc:	e7e6      	b.n	8006dac <_printf_float+0x248>
 8006dde:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	dc39      	bgt.n	8006e58 <_printf_float+0x2f4>
 8006de4:	4a1b      	ldr	r2, [pc, #108]	; (8006e54 <_printf_float+0x2f0>)
 8006de6:	2301      	movs	r3, #1
 8006de8:	4631      	mov	r1, r6
 8006dea:	4628      	mov	r0, r5
 8006dec:	47b8      	blx	r7
 8006dee:	3001      	adds	r0, #1
 8006df0:	f43f af19 	beq.w	8006c26 <_printf_float+0xc2>
 8006df4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006df8:	4313      	orrs	r3, r2
 8006dfa:	d102      	bne.n	8006e02 <_printf_float+0x29e>
 8006dfc:	6823      	ldr	r3, [r4, #0]
 8006dfe:	07d9      	lsls	r1, r3, #31
 8006e00:	d5d8      	bpl.n	8006db4 <_printf_float+0x250>
 8006e02:	ee18 3a10 	vmov	r3, s16
 8006e06:	4652      	mov	r2, sl
 8006e08:	4631      	mov	r1, r6
 8006e0a:	4628      	mov	r0, r5
 8006e0c:	47b8      	blx	r7
 8006e0e:	3001      	adds	r0, #1
 8006e10:	f43f af09 	beq.w	8006c26 <_printf_float+0xc2>
 8006e14:	f04f 0900 	mov.w	r9, #0
 8006e18:	f104 0a1a 	add.w	sl, r4, #26
 8006e1c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006e1e:	425b      	negs	r3, r3
 8006e20:	454b      	cmp	r3, r9
 8006e22:	dc01      	bgt.n	8006e28 <_printf_float+0x2c4>
 8006e24:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006e26:	e792      	b.n	8006d4e <_printf_float+0x1ea>
 8006e28:	2301      	movs	r3, #1
 8006e2a:	4652      	mov	r2, sl
 8006e2c:	4631      	mov	r1, r6
 8006e2e:	4628      	mov	r0, r5
 8006e30:	47b8      	blx	r7
 8006e32:	3001      	adds	r0, #1
 8006e34:	f43f aef7 	beq.w	8006c26 <_printf_float+0xc2>
 8006e38:	f109 0901 	add.w	r9, r9, #1
 8006e3c:	e7ee      	b.n	8006e1c <_printf_float+0x2b8>
 8006e3e:	bf00      	nop
 8006e40:	7fefffff 	.word	0x7fefffff
 8006e44:	080097b8 	.word	0x080097b8
 8006e48:	080097bc 	.word	0x080097bc
 8006e4c:	080097c4 	.word	0x080097c4
 8006e50:	080097c0 	.word	0x080097c0
 8006e54:	080097c8 	.word	0x080097c8
 8006e58:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006e5a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006e5c:	429a      	cmp	r2, r3
 8006e5e:	bfa8      	it	ge
 8006e60:	461a      	movge	r2, r3
 8006e62:	2a00      	cmp	r2, #0
 8006e64:	4691      	mov	r9, r2
 8006e66:	dc37      	bgt.n	8006ed8 <_printf_float+0x374>
 8006e68:	f04f 0b00 	mov.w	fp, #0
 8006e6c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006e70:	f104 021a 	add.w	r2, r4, #26
 8006e74:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006e76:	9305      	str	r3, [sp, #20]
 8006e78:	eba3 0309 	sub.w	r3, r3, r9
 8006e7c:	455b      	cmp	r3, fp
 8006e7e:	dc33      	bgt.n	8006ee8 <_printf_float+0x384>
 8006e80:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006e84:	429a      	cmp	r2, r3
 8006e86:	db3b      	blt.n	8006f00 <_printf_float+0x39c>
 8006e88:	6823      	ldr	r3, [r4, #0]
 8006e8a:	07da      	lsls	r2, r3, #31
 8006e8c:	d438      	bmi.n	8006f00 <_printf_float+0x39c>
 8006e8e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006e90:	9b05      	ldr	r3, [sp, #20]
 8006e92:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006e94:	1ad3      	subs	r3, r2, r3
 8006e96:	eba2 0901 	sub.w	r9, r2, r1
 8006e9a:	4599      	cmp	r9, r3
 8006e9c:	bfa8      	it	ge
 8006e9e:	4699      	movge	r9, r3
 8006ea0:	f1b9 0f00 	cmp.w	r9, #0
 8006ea4:	dc35      	bgt.n	8006f12 <_printf_float+0x3ae>
 8006ea6:	f04f 0800 	mov.w	r8, #0
 8006eaa:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006eae:	f104 0a1a 	add.w	sl, r4, #26
 8006eb2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006eb6:	1a9b      	subs	r3, r3, r2
 8006eb8:	eba3 0309 	sub.w	r3, r3, r9
 8006ebc:	4543      	cmp	r3, r8
 8006ebe:	f77f af79 	ble.w	8006db4 <_printf_float+0x250>
 8006ec2:	2301      	movs	r3, #1
 8006ec4:	4652      	mov	r2, sl
 8006ec6:	4631      	mov	r1, r6
 8006ec8:	4628      	mov	r0, r5
 8006eca:	47b8      	blx	r7
 8006ecc:	3001      	adds	r0, #1
 8006ece:	f43f aeaa 	beq.w	8006c26 <_printf_float+0xc2>
 8006ed2:	f108 0801 	add.w	r8, r8, #1
 8006ed6:	e7ec      	b.n	8006eb2 <_printf_float+0x34e>
 8006ed8:	4613      	mov	r3, r2
 8006eda:	4631      	mov	r1, r6
 8006edc:	4642      	mov	r2, r8
 8006ede:	4628      	mov	r0, r5
 8006ee0:	47b8      	blx	r7
 8006ee2:	3001      	adds	r0, #1
 8006ee4:	d1c0      	bne.n	8006e68 <_printf_float+0x304>
 8006ee6:	e69e      	b.n	8006c26 <_printf_float+0xc2>
 8006ee8:	2301      	movs	r3, #1
 8006eea:	4631      	mov	r1, r6
 8006eec:	4628      	mov	r0, r5
 8006eee:	9205      	str	r2, [sp, #20]
 8006ef0:	47b8      	blx	r7
 8006ef2:	3001      	adds	r0, #1
 8006ef4:	f43f ae97 	beq.w	8006c26 <_printf_float+0xc2>
 8006ef8:	9a05      	ldr	r2, [sp, #20]
 8006efa:	f10b 0b01 	add.w	fp, fp, #1
 8006efe:	e7b9      	b.n	8006e74 <_printf_float+0x310>
 8006f00:	ee18 3a10 	vmov	r3, s16
 8006f04:	4652      	mov	r2, sl
 8006f06:	4631      	mov	r1, r6
 8006f08:	4628      	mov	r0, r5
 8006f0a:	47b8      	blx	r7
 8006f0c:	3001      	adds	r0, #1
 8006f0e:	d1be      	bne.n	8006e8e <_printf_float+0x32a>
 8006f10:	e689      	b.n	8006c26 <_printf_float+0xc2>
 8006f12:	9a05      	ldr	r2, [sp, #20]
 8006f14:	464b      	mov	r3, r9
 8006f16:	4442      	add	r2, r8
 8006f18:	4631      	mov	r1, r6
 8006f1a:	4628      	mov	r0, r5
 8006f1c:	47b8      	blx	r7
 8006f1e:	3001      	adds	r0, #1
 8006f20:	d1c1      	bne.n	8006ea6 <_printf_float+0x342>
 8006f22:	e680      	b.n	8006c26 <_printf_float+0xc2>
 8006f24:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006f26:	2a01      	cmp	r2, #1
 8006f28:	dc01      	bgt.n	8006f2e <_printf_float+0x3ca>
 8006f2a:	07db      	lsls	r3, r3, #31
 8006f2c:	d538      	bpl.n	8006fa0 <_printf_float+0x43c>
 8006f2e:	2301      	movs	r3, #1
 8006f30:	4642      	mov	r2, r8
 8006f32:	4631      	mov	r1, r6
 8006f34:	4628      	mov	r0, r5
 8006f36:	47b8      	blx	r7
 8006f38:	3001      	adds	r0, #1
 8006f3a:	f43f ae74 	beq.w	8006c26 <_printf_float+0xc2>
 8006f3e:	ee18 3a10 	vmov	r3, s16
 8006f42:	4652      	mov	r2, sl
 8006f44:	4631      	mov	r1, r6
 8006f46:	4628      	mov	r0, r5
 8006f48:	47b8      	blx	r7
 8006f4a:	3001      	adds	r0, #1
 8006f4c:	f43f ae6b 	beq.w	8006c26 <_printf_float+0xc2>
 8006f50:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006f54:	2200      	movs	r2, #0
 8006f56:	2300      	movs	r3, #0
 8006f58:	f7f9 fdd6 	bl	8000b08 <__aeabi_dcmpeq>
 8006f5c:	b9d8      	cbnz	r0, 8006f96 <_printf_float+0x432>
 8006f5e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006f60:	f108 0201 	add.w	r2, r8, #1
 8006f64:	3b01      	subs	r3, #1
 8006f66:	4631      	mov	r1, r6
 8006f68:	4628      	mov	r0, r5
 8006f6a:	47b8      	blx	r7
 8006f6c:	3001      	adds	r0, #1
 8006f6e:	d10e      	bne.n	8006f8e <_printf_float+0x42a>
 8006f70:	e659      	b.n	8006c26 <_printf_float+0xc2>
 8006f72:	2301      	movs	r3, #1
 8006f74:	4652      	mov	r2, sl
 8006f76:	4631      	mov	r1, r6
 8006f78:	4628      	mov	r0, r5
 8006f7a:	47b8      	blx	r7
 8006f7c:	3001      	adds	r0, #1
 8006f7e:	f43f ae52 	beq.w	8006c26 <_printf_float+0xc2>
 8006f82:	f108 0801 	add.w	r8, r8, #1
 8006f86:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006f88:	3b01      	subs	r3, #1
 8006f8a:	4543      	cmp	r3, r8
 8006f8c:	dcf1      	bgt.n	8006f72 <_printf_float+0x40e>
 8006f8e:	464b      	mov	r3, r9
 8006f90:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006f94:	e6dc      	b.n	8006d50 <_printf_float+0x1ec>
 8006f96:	f04f 0800 	mov.w	r8, #0
 8006f9a:	f104 0a1a 	add.w	sl, r4, #26
 8006f9e:	e7f2      	b.n	8006f86 <_printf_float+0x422>
 8006fa0:	2301      	movs	r3, #1
 8006fa2:	4642      	mov	r2, r8
 8006fa4:	e7df      	b.n	8006f66 <_printf_float+0x402>
 8006fa6:	2301      	movs	r3, #1
 8006fa8:	464a      	mov	r2, r9
 8006faa:	4631      	mov	r1, r6
 8006fac:	4628      	mov	r0, r5
 8006fae:	47b8      	blx	r7
 8006fb0:	3001      	adds	r0, #1
 8006fb2:	f43f ae38 	beq.w	8006c26 <_printf_float+0xc2>
 8006fb6:	f108 0801 	add.w	r8, r8, #1
 8006fba:	68e3      	ldr	r3, [r4, #12]
 8006fbc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006fbe:	1a5b      	subs	r3, r3, r1
 8006fc0:	4543      	cmp	r3, r8
 8006fc2:	dcf0      	bgt.n	8006fa6 <_printf_float+0x442>
 8006fc4:	e6fa      	b.n	8006dbc <_printf_float+0x258>
 8006fc6:	f04f 0800 	mov.w	r8, #0
 8006fca:	f104 0919 	add.w	r9, r4, #25
 8006fce:	e7f4      	b.n	8006fba <_printf_float+0x456>

08006fd0 <_printf_common>:
 8006fd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006fd4:	4616      	mov	r6, r2
 8006fd6:	4699      	mov	r9, r3
 8006fd8:	688a      	ldr	r2, [r1, #8]
 8006fda:	690b      	ldr	r3, [r1, #16]
 8006fdc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006fe0:	4293      	cmp	r3, r2
 8006fe2:	bfb8      	it	lt
 8006fe4:	4613      	movlt	r3, r2
 8006fe6:	6033      	str	r3, [r6, #0]
 8006fe8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006fec:	4607      	mov	r7, r0
 8006fee:	460c      	mov	r4, r1
 8006ff0:	b10a      	cbz	r2, 8006ff6 <_printf_common+0x26>
 8006ff2:	3301      	adds	r3, #1
 8006ff4:	6033      	str	r3, [r6, #0]
 8006ff6:	6823      	ldr	r3, [r4, #0]
 8006ff8:	0699      	lsls	r1, r3, #26
 8006ffa:	bf42      	ittt	mi
 8006ffc:	6833      	ldrmi	r3, [r6, #0]
 8006ffe:	3302      	addmi	r3, #2
 8007000:	6033      	strmi	r3, [r6, #0]
 8007002:	6825      	ldr	r5, [r4, #0]
 8007004:	f015 0506 	ands.w	r5, r5, #6
 8007008:	d106      	bne.n	8007018 <_printf_common+0x48>
 800700a:	f104 0a19 	add.w	sl, r4, #25
 800700e:	68e3      	ldr	r3, [r4, #12]
 8007010:	6832      	ldr	r2, [r6, #0]
 8007012:	1a9b      	subs	r3, r3, r2
 8007014:	42ab      	cmp	r3, r5
 8007016:	dc26      	bgt.n	8007066 <_printf_common+0x96>
 8007018:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800701c:	1e13      	subs	r3, r2, #0
 800701e:	6822      	ldr	r2, [r4, #0]
 8007020:	bf18      	it	ne
 8007022:	2301      	movne	r3, #1
 8007024:	0692      	lsls	r2, r2, #26
 8007026:	d42b      	bmi.n	8007080 <_printf_common+0xb0>
 8007028:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800702c:	4649      	mov	r1, r9
 800702e:	4638      	mov	r0, r7
 8007030:	47c0      	blx	r8
 8007032:	3001      	adds	r0, #1
 8007034:	d01e      	beq.n	8007074 <_printf_common+0xa4>
 8007036:	6823      	ldr	r3, [r4, #0]
 8007038:	68e5      	ldr	r5, [r4, #12]
 800703a:	6832      	ldr	r2, [r6, #0]
 800703c:	f003 0306 	and.w	r3, r3, #6
 8007040:	2b04      	cmp	r3, #4
 8007042:	bf08      	it	eq
 8007044:	1aad      	subeq	r5, r5, r2
 8007046:	68a3      	ldr	r3, [r4, #8]
 8007048:	6922      	ldr	r2, [r4, #16]
 800704a:	bf0c      	ite	eq
 800704c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007050:	2500      	movne	r5, #0
 8007052:	4293      	cmp	r3, r2
 8007054:	bfc4      	itt	gt
 8007056:	1a9b      	subgt	r3, r3, r2
 8007058:	18ed      	addgt	r5, r5, r3
 800705a:	2600      	movs	r6, #0
 800705c:	341a      	adds	r4, #26
 800705e:	42b5      	cmp	r5, r6
 8007060:	d11a      	bne.n	8007098 <_printf_common+0xc8>
 8007062:	2000      	movs	r0, #0
 8007064:	e008      	b.n	8007078 <_printf_common+0xa8>
 8007066:	2301      	movs	r3, #1
 8007068:	4652      	mov	r2, sl
 800706a:	4649      	mov	r1, r9
 800706c:	4638      	mov	r0, r7
 800706e:	47c0      	blx	r8
 8007070:	3001      	adds	r0, #1
 8007072:	d103      	bne.n	800707c <_printf_common+0xac>
 8007074:	f04f 30ff 	mov.w	r0, #4294967295
 8007078:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800707c:	3501      	adds	r5, #1
 800707e:	e7c6      	b.n	800700e <_printf_common+0x3e>
 8007080:	18e1      	adds	r1, r4, r3
 8007082:	1c5a      	adds	r2, r3, #1
 8007084:	2030      	movs	r0, #48	; 0x30
 8007086:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800708a:	4422      	add	r2, r4
 800708c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007090:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007094:	3302      	adds	r3, #2
 8007096:	e7c7      	b.n	8007028 <_printf_common+0x58>
 8007098:	2301      	movs	r3, #1
 800709a:	4622      	mov	r2, r4
 800709c:	4649      	mov	r1, r9
 800709e:	4638      	mov	r0, r7
 80070a0:	47c0      	blx	r8
 80070a2:	3001      	adds	r0, #1
 80070a4:	d0e6      	beq.n	8007074 <_printf_common+0xa4>
 80070a6:	3601      	adds	r6, #1
 80070a8:	e7d9      	b.n	800705e <_printf_common+0x8e>
	...

080070ac <_printf_i>:
 80070ac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80070b0:	460c      	mov	r4, r1
 80070b2:	4691      	mov	r9, r2
 80070b4:	7e27      	ldrb	r7, [r4, #24]
 80070b6:	990c      	ldr	r1, [sp, #48]	; 0x30
 80070b8:	2f78      	cmp	r7, #120	; 0x78
 80070ba:	4680      	mov	r8, r0
 80070bc:	469a      	mov	sl, r3
 80070be:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80070c2:	d807      	bhi.n	80070d4 <_printf_i+0x28>
 80070c4:	2f62      	cmp	r7, #98	; 0x62
 80070c6:	d80a      	bhi.n	80070de <_printf_i+0x32>
 80070c8:	2f00      	cmp	r7, #0
 80070ca:	f000 80d8 	beq.w	800727e <_printf_i+0x1d2>
 80070ce:	2f58      	cmp	r7, #88	; 0x58
 80070d0:	f000 80a3 	beq.w	800721a <_printf_i+0x16e>
 80070d4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80070d8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80070dc:	e03a      	b.n	8007154 <_printf_i+0xa8>
 80070de:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80070e2:	2b15      	cmp	r3, #21
 80070e4:	d8f6      	bhi.n	80070d4 <_printf_i+0x28>
 80070e6:	a001      	add	r0, pc, #4	; (adr r0, 80070ec <_printf_i+0x40>)
 80070e8:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80070ec:	08007145 	.word	0x08007145
 80070f0:	08007159 	.word	0x08007159
 80070f4:	080070d5 	.word	0x080070d5
 80070f8:	080070d5 	.word	0x080070d5
 80070fc:	080070d5 	.word	0x080070d5
 8007100:	080070d5 	.word	0x080070d5
 8007104:	08007159 	.word	0x08007159
 8007108:	080070d5 	.word	0x080070d5
 800710c:	080070d5 	.word	0x080070d5
 8007110:	080070d5 	.word	0x080070d5
 8007114:	080070d5 	.word	0x080070d5
 8007118:	08007265 	.word	0x08007265
 800711c:	08007189 	.word	0x08007189
 8007120:	08007247 	.word	0x08007247
 8007124:	080070d5 	.word	0x080070d5
 8007128:	080070d5 	.word	0x080070d5
 800712c:	08007287 	.word	0x08007287
 8007130:	080070d5 	.word	0x080070d5
 8007134:	08007189 	.word	0x08007189
 8007138:	080070d5 	.word	0x080070d5
 800713c:	080070d5 	.word	0x080070d5
 8007140:	0800724f 	.word	0x0800724f
 8007144:	680b      	ldr	r3, [r1, #0]
 8007146:	1d1a      	adds	r2, r3, #4
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	600a      	str	r2, [r1, #0]
 800714c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007150:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007154:	2301      	movs	r3, #1
 8007156:	e0a3      	b.n	80072a0 <_printf_i+0x1f4>
 8007158:	6825      	ldr	r5, [r4, #0]
 800715a:	6808      	ldr	r0, [r1, #0]
 800715c:	062e      	lsls	r6, r5, #24
 800715e:	f100 0304 	add.w	r3, r0, #4
 8007162:	d50a      	bpl.n	800717a <_printf_i+0xce>
 8007164:	6805      	ldr	r5, [r0, #0]
 8007166:	600b      	str	r3, [r1, #0]
 8007168:	2d00      	cmp	r5, #0
 800716a:	da03      	bge.n	8007174 <_printf_i+0xc8>
 800716c:	232d      	movs	r3, #45	; 0x2d
 800716e:	426d      	negs	r5, r5
 8007170:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007174:	485e      	ldr	r0, [pc, #376]	; (80072f0 <_printf_i+0x244>)
 8007176:	230a      	movs	r3, #10
 8007178:	e019      	b.n	80071ae <_printf_i+0x102>
 800717a:	f015 0f40 	tst.w	r5, #64	; 0x40
 800717e:	6805      	ldr	r5, [r0, #0]
 8007180:	600b      	str	r3, [r1, #0]
 8007182:	bf18      	it	ne
 8007184:	b22d      	sxthne	r5, r5
 8007186:	e7ef      	b.n	8007168 <_printf_i+0xbc>
 8007188:	680b      	ldr	r3, [r1, #0]
 800718a:	6825      	ldr	r5, [r4, #0]
 800718c:	1d18      	adds	r0, r3, #4
 800718e:	6008      	str	r0, [r1, #0]
 8007190:	0628      	lsls	r0, r5, #24
 8007192:	d501      	bpl.n	8007198 <_printf_i+0xec>
 8007194:	681d      	ldr	r5, [r3, #0]
 8007196:	e002      	b.n	800719e <_printf_i+0xf2>
 8007198:	0669      	lsls	r1, r5, #25
 800719a:	d5fb      	bpl.n	8007194 <_printf_i+0xe8>
 800719c:	881d      	ldrh	r5, [r3, #0]
 800719e:	4854      	ldr	r0, [pc, #336]	; (80072f0 <_printf_i+0x244>)
 80071a0:	2f6f      	cmp	r7, #111	; 0x6f
 80071a2:	bf0c      	ite	eq
 80071a4:	2308      	moveq	r3, #8
 80071a6:	230a      	movne	r3, #10
 80071a8:	2100      	movs	r1, #0
 80071aa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80071ae:	6866      	ldr	r6, [r4, #4]
 80071b0:	60a6      	str	r6, [r4, #8]
 80071b2:	2e00      	cmp	r6, #0
 80071b4:	bfa2      	ittt	ge
 80071b6:	6821      	ldrge	r1, [r4, #0]
 80071b8:	f021 0104 	bicge.w	r1, r1, #4
 80071bc:	6021      	strge	r1, [r4, #0]
 80071be:	b90d      	cbnz	r5, 80071c4 <_printf_i+0x118>
 80071c0:	2e00      	cmp	r6, #0
 80071c2:	d04d      	beq.n	8007260 <_printf_i+0x1b4>
 80071c4:	4616      	mov	r6, r2
 80071c6:	fbb5 f1f3 	udiv	r1, r5, r3
 80071ca:	fb03 5711 	mls	r7, r3, r1, r5
 80071ce:	5dc7      	ldrb	r7, [r0, r7]
 80071d0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80071d4:	462f      	mov	r7, r5
 80071d6:	42bb      	cmp	r3, r7
 80071d8:	460d      	mov	r5, r1
 80071da:	d9f4      	bls.n	80071c6 <_printf_i+0x11a>
 80071dc:	2b08      	cmp	r3, #8
 80071de:	d10b      	bne.n	80071f8 <_printf_i+0x14c>
 80071e0:	6823      	ldr	r3, [r4, #0]
 80071e2:	07df      	lsls	r7, r3, #31
 80071e4:	d508      	bpl.n	80071f8 <_printf_i+0x14c>
 80071e6:	6923      	ldr	r3, [r4, #16]
 80071e8:	6861      	ldr	r1, [r4, #4]
 80071ea:	4299      	cmp	r1, r3
 80071ec:	bfde      	ittt	le
 80071ee:	2330      	movle	r3, #48	; 0x30
 80071f0:	f806 3c01 	strble.w	r3, [r6, #-1]
 80071f4:	f106 36ff 	addle.w	r6, r6, #4294967295
 80071f8:	1b92      	subs	r2, r2, r6
 80071fa:	6122      	str	r2, [r4, #16]
 80071fc:	f8cd a000 	str.w	sl, [sp]
 8007200:	464b      	mov	r3, r9
 8007202:	aa03      	add	r2, sp, #12
 8007204:	4621      	mov	r1, r4
 8007206:	4640      	mov	r0, r8
 8007208:	f7ff fee2 	bl	8006fd0 <_printf_common>
 800720c:	3001      	adds	r0, #1
 800720e:	d14c      	bne.n	80072aa <_printf_i+0x1fe>
 8007210:	f04f 30ff 	mov.w	r0, #4294967295
 8007214:	b004      	add	sp, #16
 8007216:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800721a:	4835      	ldr	r0, [pc, #212]	; (80072f0 <_printf_i+0x244>)
 800721c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007220:	6823      	ldr	r3, [r4, #0]
 8007222:	680e      	ldr	r6, [r1, #0]
 8007224:	061f      	lsls	r7, r3, #24
 8007226:	f856 5b04 	ldr.w	r5, [r6], #4
 800722a:	600e      	str	r6, [r1, #0]
 800722c:	d514      	bpl.n	8007258 <_printf_i+0x1ac>
 800722e:	07d9      	lsls	r1, r3, #31
 8007230:	bf44      	itt	mi
 8007232:	f043 0320 	orrmi.w	r3, r3, #32
 8007236:	6023      	strmi	r3, [r4, #0]
 8007238:	b91d      	cbnz	r5, 8007242 <_printf_i+0x196>
 800723a:	6823      	ldr	r3, [r4, #0]
 800723c:	f023 0320 	bic.w	r3, r3, #32
 8007240:	6023      	str	r3, [r4, #0]
 8007242:	2310      	movs	r3, #16
 8007244:	e7b0      	b.n	80071a8 <_printf_i+0xfc>
 8007246:	6823      	ldr	r3, [r4, #0]
 8007248:	f043 0320 	orr.w	r3, r3, #32
 800724c:	6023      	str	r3, [r4, #0]
 800724e:	2378      	movs	r3, #120	; 0x78
 8007250:	4828      	ldr	r0, [pc, #160]	; (80072f4 <_printf_i+0x248>)
 8007252:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007256:	e7e3      	b.n	8007220 <_printf_i+0x174>
 8007258:	065e      	lsls	r6, r3, #25
 800725a:	bf48      	it	mi
 800725c:	b2ad      	uxthmi	r5, r5
 800725e:	e7e6      	b.n	800722e <_printf_i+0x182>
 8007260:	4616      	mov	r6, r2
 8007262:	e7bb      	b.n	80071dc <_printf_i+0x130>
 8007264:	680b      	ldr	r3, [r1, #0]
 8007266:	6826      	ldr	r6, [r4, #0]
 8007268:	6960      	ldr	r0, [r4, #20]
 800726a:	1d1d      	adds	r5, r3, #4
 800726c:	600d      	str	r5, [r1, #0]
 800726e:	0635      	lsls	r5, r6, #24
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	d501      	bpl.n	8007278 <_printf_i+0x1cc>
 8007274:	6018      	str	r0, [r3, #0]
 8007276:	e002      	b.n	800727e <_printf_i+0x1d2>
 8007278:	0671      	lsls	r1, r6, #25
 800727a:	d5fb      	bpl.n	8007274 <_printf_i+0x1c8>
 800727c:	8018      	strh	r0, [r3, #0]
 800727e:	2300      	movs	r3, #0
 8007280:	6123      	str	r3, [r4, #16]
 8007282:	4616      	mov	r6, r2
 8007284:	e7ba      	b.n	80071fc <_printf_i+0x150>
 8007286:	680b      	ldr	r3, [r1, #0]
 8007288:	1d1a      	adds	r2, r3, #4
 800728a:	600a      	str	r2, [r1, #0]
 800728c:	681e      	ldr	r6, [r3, #0]
 800728e:	6862      	ldr	r2, [r4, #4]
 8007290:	2100      	movs	r1, #0
 8007292:	4630      	mov	r0, r6
 8007294:	f7f8 ffc4 	bl	8000220 <memchr>
 8007298:	b108      	cbz	r0, 800729e <_printf_i+0x1f2>
 800729a:	1b80      	subs	r0, r0, r6
 800729c:	6060      	str	r0, [r4, #4]
 800729e:	6863      	ldr	r3, [r4, #4]
 80072a0:	6123      	str	r3, [r4, #16]
 80072a2:	2300      	movs	r3, #0
 80072a4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80072a8:	e7a8      	b.n	80071fc <_printf_i+0x150>
 80072aa:	6923      	ldr	r3, [r4, #16]
 80072ac:	4632      	mov	r2, r6
 80072ae:	4649      	mov	r1, r9
 80072b0:	4640      	mov	r0, r8
 80072b2:	47d0      	blx	sl
 80072b4:	3001      	adds	r0, #1
 80072b6:	d0ab      	beq.n	8007210 <_printf_i+0x164>
 80072b8:	6823      	ldr	r3, [r4, #0]
 80072ba:	079b      	lsls	r3, r3, #30
 80072bc:	d413      	bmi.n	80072e6 <_printf_i+0x23a>
 80072be:	68e0      	ldr	r0, [r4, #12]
 80072c0:	9b03      	ldr	r3, [sp, #12]
 80072c2:	4298      	cmp	r0, r3
 80072c4:	bfb8      	it	lt
 80072c6:	4618      	movlt	r0, r3
 80072c8:	e7a4      	b.n	8007214 <_printf_i+0x168>
 80072ca:	2301      	movs	r3, #1
 80072cc:	4632      	mov	r2, r6
 80072ce:	4649      	mov	r1, r9
 80072d0:	4640      	mov	r0, r8
 80072d2:	47d0      	blx	sl
 80072d4:	3001      	adds	r0, #1
 80072d6:	d09b      	beq.n	8007210 <_printf_i+0x164>
 80072d8:	3501      	adds	r5, #1
 80072da:	68e3      	ldr	r3, [r4, #12]
 80072dc:	9903      	ldr	r1, [sp, #12]
 80072de:	1a5b      	subs	r3, r3, r1
 80072e0:	42ab      	cmp	r3, r5
 80072e2:	dcf2      	bgt.n	80072ca <_printf_i+0x21e>
 80072e4:	e7eb      	b.n	80072be <_printf_i+0x212>
 80072e6:	2500      	movs	r5, #0
 80072e8:	f104 0619 	add.w	r6, r4, #25
 80072ec:	e7f5      	b.n	80072da <_printf_i+0x22e>
 80072ee:	bf00      	nop
 80072f0:	080097ca 	.word	0x080097ca
 80072f4:	080097db 	.word	0x080097db

080072f8 <siprintf>:
 80072f8:	b40e      	push	{r1, r2, r3}
 80072fa:	b500      	push	{lr}
 80072fc:	b09c      	sub	sp, #112	; 0x70
 80072fe:	ab1d      	add	r3, sp, #116	; 0x74
 8007300:	9002      	str	r0, [sp, #8]
 8007302:	9006      	str	r0, [sp, #24]
 8007304:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007308:	4809      	ldr	r0, [pc, #36]	; (8007330 <siprintf+0x38>)
 800730a:	9107      	str	r1, [sp, #28]
 800730c:	9104      	str	r1, [sp, #16]
 800730e:	4909      	ldr	r1, [pc, #36]	; (8007334 <siprintf+0x3c>)
 8007310:	f853 2b04 	ldr.w	r2, [r3], #4
 8007314:	9105      	str	r1, [sp, #20]
 8007316:	6800      	ldr	r0, [r0, #0]
 8007318:	9301      	str	r3, [sp, #4]
 800731a:	a902      	add	r1, sp, #8
 800731c:	f001 fb32 	bl	8008984 <_svfiprintf_r>
 8007320:	9b02      	ldr	r3, [sp, #8]
 8007322:	2200      	movs	r2, #0
 8007324:	701a      	strb	r2, [r3, #0]
 8007326:	b01c      	add	sp, #112	; 0x70
 8007328:	f85d eb04 	ldr.w	lr, [sp], #4
 800732c:	b003      	add	sp, #12
 800732e:	4770      	bx	lr
 8007330:	20000028 	.word	0x20000028
 8007334:	ffff0208 	.word	0xffff0208

08007338 <quorem>:
 8007338:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800733c:	6903      	ldr	r3, [r0, #16]
 800733e:	690c      	ldr	r4, [r1, #16]
 8007340:	42a3      	cmp	r3, r4
 8007342:	4607      	mov	r7, r0
 8007344:	f2c0 8081 	blt.w	800744a <quorem+0x112>
 8007348:	3c01      	subs	r4, #1
 800734a:	f101 0814 	add.w	r8, r1, #20
 800734e:	f100 0514 	add.w	r5, r0, #20
 8007352:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007356:	9301      	str	r3, [sp, #4]
 8007358:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800735c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007360:	3301      	adds	r3, #1
 8007362:	429a      	cmp	r2, r3
 8007364:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007368:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800736c:	fbb2 f6f3 	udiv	r6, r2, r3
 8007370:	d331      	bcc.n	80073d6 <quorem+0x9e>
 8007372:	f04f 0e00 	mov.w	lr, #0
 8007376:	4640      	mov	r0, r8
 8007378:	46ac      	mov	ip, r5
 800737a:	46f2      	mov	sl, lr
 800737c:	f850 2b04 	ldr.w	r2, [r0], #4
 8007380:	b293      	uxth	r3, r2
 8007382:	fb06 e303 	mla	r3, r6, r3, lr
 8007386:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800738a:	b29b      	uxth	r3, r3
 800738c:	ebaa 0303 	sub.w	r3, sl, r3
 8007390:	0c12      	lsrs	r2, r2, #16
 8007392:	f8dc a000 	ldr.w	sl, [ip]
 8007396:	fb06 e202 	mla	r2, r6, r2, lr
 800739a:	fa13 f38a 	uxtah	r3, r3, sl
 800739e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80073a2:	fa1f fa82 	uxth.w	sl, r2
 80073a6:	f8dc 2000 	ldr.w	r2, [ip]
 80073aa:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 80073ae:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80073b2:	b29b      	uxth	r3, r3
 80073b4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80073b8:	4581      	cmp	r9, r0
 80073ba:	f84c 3b04 	str.w	r3, [ip], #4
 80073be:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80073c2:	d2db      	bcs.n	800737c <quorem+0x44>
 80073c4:	f855 300b 	ldr.w	r3, [r5, fp]
 80073c8:	b92b      	cbnz	r3, 80073d6 <quorem+0x9e>
 80073ca:	9b01      	ldr	r3, [sp, #4]
 80073cc:	3b04      	subs	r3, #4
 80073ce:	429d      	cmp	r5, r3
 80073d0:	461a      	mov	r2, r3
 80073d2:	d32e      	bcc.n	8007432 <quorem+0xfa>
 80073d4:	613c      	str	r4, [r7, #16]
 80073d6:	4638      	mov	r0, r7
 80073d8:	f001 f8be 	bl	8008558 <__mcmp>
 80073dc:	2800      	cmp	r0, #0
 80073de:	db24      	blt.n	800742a <quorem+0xf2>
 80073e0:	3601      	adds	r6, #1
 80073e2:	4628      	mov	r0, r5
 80073e4:	f04f 0c00 	mov.w	ip, #0
 80073e8:	f858 2b04 	ldr.w	r2, [r8], #4
 80073ec:	f8d0 e000 	ldr.w	lr, [r0]
 80073f0:	b293      	uxth	r3, r2
 80073f2:	ebac 0303 	sub.w	r3, ip, r3
 80073f6:	0c12      	lsrs	r2, r2, #16
 80073f8:	fa13 f38e 	uxtah	r3, r3, lr
 80073fc:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007400:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007404:	b29b      	uxth	r3, r3
 8007406:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800740a:	45c1      	cmp	r9, r8
 800740c:	f840 3b04 	str.w	r3, [r0], #4
 8007410:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007414:	d2e8      	bcs.n	80073e8 <quorem+0xb0>
 8007416:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800741a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800741e:	b922      	cbnz	r2, 800742a <quorem+0xf2>
 8007420:	3b04      	subs	r3, #4
 8007422:	429d      	cmp	r5, r3
 8007424:	461a      	mov	r2, r3
 8007426:	d30a      	bcc.n	800743e <quorem+0x106>
 8007428:	613c      	str	r4, [r7, #16]
 800742a:	4630      	mov	r0, r6
 800742c:	b003      	add	sp, #12
 800742e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007432:	6812      	ldr	r2, [r2, #0]
 8007434:	3b04      	subs	r3, #4
 8007436:	2a00      	cmp	r2, #0
 8007438:	d1cc      	bne.n	80073d4 <quorem+0x9c>
 800743a:	3c01      	subs	r4, #1
 800743c:	e7c7      	b.n	80073ce <quorem+0x96>
 800743e:	6812      	ldr	r2, [r2, #0]
 8007440:	3b04      	subs	r3, #4
 8007442:	2a00      	cmp	r2, #0
 8007444:	d1f0      	bne.n	8007428 <quorem+0xf0>
 8007446:	3c01      	subs	r4, #1
 8007448:	e7eb      	b.n	8007422 <quorem+0xea>
 800744a:	2000      	movs	r0, #0
 800744c:	e7ee      	b.n	800742c <quorem+0xf4>
	...

08007450 <_dtoa_r>:
 8007450:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007454:	ed2d 8b02 	vpush	{d8}
 8007458:	ec57 6b10 	vmov	r6, r7, d0
 800745c:	b095      	sub	sp, #84	; 0x54
 800745e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007460:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8007464:	9105      	str	r1, [sp, #20]
 8007466:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800746a:	4604      	mov	r4, r0
 800746c:	9209      	str	r2, [sp, #36]	; 0x24
 800746e:	930f      	str	r3, [sp, #60]	; 0x3c
 8007470:	b975      	cbnz	r5, 8007490 <_dtoa_r+0x40>
 8007472:	2010      	movs	r0, #16
 8007474:	f000 fddc 	bl	8008030 <malloc>
 8007478:	4602      	mov	r2, r0
 800747a:	6260      	str	r0, [r4, #36]	; 0x24
 800747c:	b920      	cbnz	r0, 8007488 <_dtoa_r+0x38>
 800747e:	4bb2      	ldr	r3, [pc, #712]	; (8007748 <_dtoa_r+0x2f8>)
 8007480:	21ea      	movs	r1, #234	; 0xea
 8007482:	48b2      	ldr	r0, [pc, #712]	; (800774c <_dtoa_r+0x2fc>)
 8007484:	f001 fb8e 	bl	8008ba4 <__assert_func>
 8007488:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800748c:	6005      	str	r5, [r0, #0]
 800748e:	60c5      	str	r5, [r0, #12]
 8007490:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007492:	6819      	ldr	r1, [r3, #0]
 8007494:	b151      	cbz	r1, 80074ac <_dtoa_r+0x5c>
 8007496:	685a      	ldr	r2, [r3, #4]
 8007498:	604a      	str	r2, [r1, #4]
 800749a:	2301      	movs	r3, #1
 800749c:	4093      	lsls	r3, r2
 800749e:	608b      	str	r3, [r1, #8]
 80074a0:	4620      	mov	r0, r4
 80074a2:	f000 fe1b 	bl	80080dc <_Bfree>
 80074a6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80074a8:	2200      	movs	r2, #0
 80074aa:	601a      	str	r2, [r3, #0]
 80074ac:	1e3b      	subs	r3, r7, #0
 80074ae:	bfb9      	ittee	lt
 80074b0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80074b4:	9303      	strlt	r3, [sp, #12]
 80074b6:	2300      	movge	r3, #0
 80074b8:	f8c8 3000 	strge.w	r3, [r8]
 80074bc:	f8dd 900c 	ldr.w	r9, [sp, #12]
 80074c0:	4ba3      	ldr	r3, [pc, #652]	; (8007750 <_dtoa_r+0x300>)
 80074c2:	bfbc      	itt	lt
 80074c4:	2201      	movlt	r2, #1
 80074c6:	f8c8 2000 	strlt.w	r2, [r8]
 80074ca:	ea33 0309 	bics.w	r3, r3, r9
 80074ce:	d11b      	bne.n	8007508 <_dtoa_r+0xb8>
 80074d0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80074d2:	f242 730f 	movw	r3, #9999	; 0x270f
 80074d6:	6013      	str	r3, [r2, #0]
 80074d8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80074dc:	4333      	orrs	r3, r6
 80074de:	f000 857a 	beq.w	8007fd6 <_dtoa_r+0xb86>
 80074e2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80074e4:	b963      	cbnz	r3, 8007500 <_dtoa_r+0xb0>
 80074e6:	4b9b      	ldr	r3, [pc, #620]	; (8007754 <_dtoa_r+0x304>)
 80074e8:	e024      	b.n	8007534 <_dtoa_r+0xe4>
 80074ea:	4b9b      	ldr	r3, [pc, #620]	; (8007758 <_dtoa_r+0x308>)
 80074ec:	9300      	str	r3, [sp, #0]
 80074ee:	3308      	adds	r3, #8
 80074f0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80074f2:	6013      	str	r3, [r2, #0]
 80074f4:	9800      	ldr	r0, [sp, #0]
 80074f6:	b015      	add	sp, #84	; 0x54
 80074f8:	ecbd 8b02 	vpop	{d8}
 80074fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007500:	4b94      	ldr	r3, [pc, #592]	; (8007754 <_dtoa_r+0x304>)
 8007502:	9300      	str	r3, [sp, #0]
 8007504:	3303      	adds	r3, #3
 8007506:	e7f3      	b.n	80074f0 <_dtoa_r+0xa0>
 8007508:	ed9d 7b02 	vldr	d7, [sp, #8]
 800750c:	2200      	movs	r2, #0
 800750e:	ec51 0b17 	vmov	r0, r1, d7
 8007512:	2300      	movs	r3, #0
 8007514:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8007518:	f7f9 faf6 	bl	8000b08 <__aeabi_dcmpeq>
 800751c:	4680      	mov	r8, r0
 800751e:	b158      	cbz	r0, 8007538 <_dtoa_r+0xe8>
 8007520:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007522:	2301      	movs	r3, #1
 8007524:	6013      	str	r3, [r2, #0]
 8007526:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007528:	2b00      	cmp	r3, #0
 800752a:	f000 8551 	beq.w	8007fd0 <_dtoa_r+0xb80>
 800752e:	488b      	ldr	r0, [pc, #556]	; (800775c <_dtoa_r+0x30c>)
 8007530:	6018      	str	r0, [r3, #0]
 8007532:	1e43      	subs	r3, r0, #1
 8007534:	9300      	str	r3, [sp, #0]
 8007536:	e7dd      	b.n	80074f4 <_dtoa_r+0xa4>
 8007538:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800753c:	aa12      	add	r2, sp, #72	; 0x48
 800753e:	a913      	add	r1, sp, #76	; 0x4c
 8007540:	4620      	mov	r0, r4
 8007542:	f001 f8ad 	bl	80086a0 <__d2b>
 8007546:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800754a:	4683      	mov	fp, r0
 800754c:	2d00      	cmp	r5, #0
 800754e:	d07c      	beq.n	800764a <_dtoa_r+0x1fa>
 8007550:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007552:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8007556:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800755a:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 800755e:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8007562:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8007566:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800756a:	4b7d      	ldr	r3, [pc, #500]	; (8007760 <_dtoa_r+0x310>)
 800756c:	2200      	movs	r2, #0
 800756e:	4630      	mov	r0, r6
 8007570:	4639      	mov	r1, r7
 8007572:	f7f8 fea9 	bl	80002c8 <__aeabi_dsub>
 8007576:	a36e      	add	r3, pc, #440	; (adr r3, 8007730 <_dtoa_r+0x2e0>)
 8007578:	e9d3 2300 	ldrd	r2, r3, [r3]
 800757c:	f7f9 f85c 	bl	8000638 <__aeabi_dmul>
 8007580:	a36d      	add	r3, pc, #436	; (adr r3, 8007738 <_dtoa_r+0x2e8>)
 8007582:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007586:	f7f8 fea1 	bl	80002cc <__adddf3>
 800758a:	4606      	mov	r6, r0
 800758c:	4628      	mov	r0, r5
 800758e:	460f      	mov	r7, r1
 8007590:	f7f8 ffe8 	bl	8000564 <__aeabi_i2d>
 8007594:	a36a      	add	r3, pc, #424	; (adr r3, 8007740 <_dtoa_r+0x2f0>)
 8007596:	e9d3 2300 	ldrd	r2, r3, [r3]
 800759a:	f7f9 f84d 	bl	8000638 <__aeabi_dmul>
 800759e:	4602      	mov	r2, r0
 80075a0:	460b      	mov	r3, r1
 80075a2:	4630      	mov	r0, r6
 80075a4:	4639      	mov	r1, r7
 80075a6:	f7f8 fe91 	bl	80002cc <__adddf3>
 80075aa:	4606      	mov	r6, r0
 80075ac:	460f      	mov	r7, r1
 80075ae:	f7f9 faf3 	bl	8000b98 <__aeabi_d2iz>
 80075b2:	2200      	movs	r2, #0
 80075b4:	4682      	mov	sl, r0
 80075b6:	2300      	movs	r3, #0
 80075b8:	4630      	mov	r0, r6
 80075ba:	4639      	mov	r1, r7
 80075bc:	f7f9 faae 	bl	8000b1c <__aeabi_dcmplt>
 80075c0:	b148      	cbz	r0, 80075d6 <_dtoa_r+0x186>
 80075c2:	4650      	mov	r0, sl
 80075c4:	f7f8 ffce 	bl	8000564 <__aeabi_i2d>
 80075c8:	4632      	mov	r2, r6
 80075ca:	463b      	mov	r3, r7
 80075cc:	f7f9 fa9c 	bl	8000b08 <__aeabi_dcmpeq>
 80075d0:	b908      	cbnz	r0, 80075d6 <_dtoa_r+0x186>
 80075d2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80075d6:	f1ba 0f16 	cmp.w	sl, #22
 80075da:	d854      	bhi.n	8007686 <_dtoa_r+0x236>
 80075dc:	4b61      	ldr	r3, [pc, #388]	; (8007764 <_dtoa_r+0x314>)
 80075de:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80075e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075e6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80075ea:	f7f9 fa97 	bl	8000b1c <__aeabi_dcmplt>
 80075ee:	2800      	cmp	r0, #0
 80075f0:	d04b      	beq.n	800768a <_dtoa_r+0x23a>
 80075f2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80075f6:	2300      	movs	r3, #0
 80075f8:	930e      	str	r3, [sp, #56]	; 0x38
 80075fa:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80075fc:	1b5d      	subs	r5, r3, r5
 80075fe:	1e6b      	subs	r3, r5, #1
 8007600:	9304      	str	r3, [sp, #16]
 8007602:	bf43      	ittte	mi
 8007604:	2300      	movmi	r3, #0
 8007606:	f1c5 0801 	rsbmi	r8, r5, #1
 800760a:	9304      	strmi	r3, [sp, #16]
 800760c:	f04f 0800 	movpl.w	r8, #0
 8007610:	f1ba 0f00 	cmp.w	sl, #0
 8007614:	db3b      	blt.n	800768e <_dtoa_r+0x23e>
 8007616:	9b04      	ldr	r3, [sp, #16]
 8007618:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800761c:	4453      	add	r3, sl
 800761e:	9304      	str	r3, [sp, #16]
 8007620:	2300      	movs	r3, #0
 8007622:	9306      	str	r3, [sp, #24]
 8007624:	9b05      	ldr	r3, [sp, #20]
 8007626:	2b09      	cmp	r3, #9
 8007628:	d869      	bhi.n	80076fe <_dtoa_r+0x2ae>
 800762a:	2b05      	cmp	r3, #5
 800762c:	bfc4      	itt	gt
 800762e:	3b04      	subgt	r3, #4
 8007630:	9305      	strgt	r3, [sp, #20]
 8007632:	9b05      	ldr	r3, [sp, #20]
 8007634:	f1a3 0302 	sub.w	r3, r3, #2
 8007638:	bfcc      	ite	gt
 800763a:	2500      	movgt	r5, #0
 800763c:	2501      	movle	r5, #1
 800763e:	2b03      	cmp	r3, #3
 8007640:	d869      	bhi.n	8007716 <_dtoa_r+0x2c6>
 8007642:	e8df f003 	tbb	[pc, r3]
 8007646:	4e2c      	.short	0x4e2c
 8007648:	5a4c      	.short	0x5a4c
 800764a:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800764e:	441d      	add	r5, r3
 8007650:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8007654:	2b20      	cmp	r3, #32
 8007656:	bfc1      	itttt	gt
 8007658:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800765c:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8007660:	fa09 f303 	lslgt.w	r3, r9, r3
 8007664:	fa26 f000 	lsrgt.w	r0, r6, r0
 8007668:	bfda      	itte	le
 800766a:	f1c3 0320 	rsble	r3, r3, #32
 800766e:	fa06 f003 	lslle.w	r0, r6, r3
 8007672:	4318      	orrgt	r0, r3
 8007674:	f7f8 ff66 	bl	8000544 <__aeabi_ui2d>
 8007678:	2301      	movs	r3, #1
 800767a:	4606      	mov	r6, r0
 800767c:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8007680:	3d01      	subs	r5, #1
 8007682:	9310      	str	r3, [sp, #64]	; 0x40
 8007684:	e771      	b.n	800756a <_dtoa_r+0x11a>
 8007686:	2301      	movs	r3, #1
 8007688:	e7b6      	b.n	80075f8 <_dtoa_r+0x1a8>
 800768a:	900e      	str	r0, [sp, #56]	; 0x38
 800768c:	e7b5      	b.n	80075fa <_dtoa_r+0x1aa>
 800768e:	f1ca 0300 	rsb	r3, sl, #0
 8007692:	9306      	str	r3, [sp, #24]
 8007694:	2300      	movs	r3, #0
 8007696:	eba8 080a 	sub.w	r8, r8, sl
 800769a:	930d      	str	r3, [sp, #52]	; 0x34
 800769c:	e7c2      	b.n	8007624 <_dtoa_r+0x1d4>
 800769e:	2300      	movs	r3, #0
 80076a0:	9308      	str	r3, [sp, #32]
 80076a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	dc39      	bgt.n	800771c <_dtoa_r+0x2cc>
 80076a8:	f04f 0901 	mov.w	r9, #1
 80076ac:	f8cd 9004 	str.w	r9, [sp, #4]
 80076b0:	464b      	mov	r3, r9
 80076b2:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 80076b6:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80076b8:	2200      	movs	r2, #0
 80076ba:	6042      	str	r2, [r0, #4]
 80076bc:	2204      	movs	r2, #4
 80076be:	f102 0614 	add.w	r6, r2, #20
 80076c2:	429e      	cmp	r6, r3
 80076c4:	6841      	ldr	r1, [r0, #4]
 80076c6:	d92f      	bls.n	8007728 <_dtoa_r+0x2d8>
 80076c8:	4620      	mov	r0, r4
 80076ca:	f000 fcc7 	bl	800805c <_Balloc>
 80076ce:	9000      	str	r0, [sp, #0]
 80076d0:	2800      	cmp	r0, #0
 80076d2:	d14b      	bne.n	800776c <_dtoa_r+0x31c>
 80076d4:	4b24      	ldr	r3, [pc, #144]	; (8007768 <_dtoa_r+0x318>)
 80076d6:	4602      	mov	r2, r0
 80076d8:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80076dc:	e6d1      	b.n	8007482 <_dtoa_r+0x32>
 80076de:	2301      	movs	r3, #1
 80076e0:	e7de      	b.n	80076a0 <_dtoa_r+0x250>
 80076e2:	2300      	movs	r3, #0
 80076e4:	9308      	str	r3, [sp, #32]
 80076e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80076e8:	eb0a 0903 	add.w	r9, sl, r3
 80076ec:	f109 0301 	add.w	r3, r9, #1
 80076f0:	2b01      	cmp	r3, #1
 80076f2:	9301      	str	r3, [sp, #4]
 80076f4:	bfb8      	it	lt
 80076f6:	2301      	movlt	r3, #1
 80076f8:	e7dd      	b.n	80076b6 <_dtoa_r+0x266>
 80076fa:	2301      	movs	r3, #1
 80076fc:	e7f2      	b.n	80076e4 <_dtoa_r+0x294>
 80076fe:	2501      	movs	r5, #1
 8007700:	2300      	movs	r3, #0
 8007702:	9305      	str	r3, [sp, #20]
 8007704:	9508      	str	r5, [sp, #32]
 8007706:	f04f 39ff 	mov.w	r9, #4294967295
 800770a:	2200      	movs	r2, #0
 800770c:	f8cd 9004 	str.w	r9, [sp, #4]
 8007710:	2312      	movs	r3, #18
 8007712:	9209      	str	r2, [sp, #36]	; 0x24
 8007714:	e7cf      	b.n	80076b6 <_dtoa_r+0x266>
 8007716:	2301      	movs	r3, #1
 8007718:	9308      	str	r3, [sp, #32]
 800771a:	e7f4      	b.n	8007706 <_dtoa_r+0x2b6>
 800771c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8007720:	f8cd 9004 	str.w	r9, [sp, #4]
 8007724:	464b      	mov	r3, r9
 8007726:	e7c6      	b.n	80076b6 <_dtoa_r+0x266>
 8007728:	3101      	adds	r1, #1
 800772a:	6041      	str	r1, [r0, #4]
 800772c:	0052      	lsls	r2, r2, #1
 800772e:	e7c6      	b.n	80076be <_dtoa_r+0x26e>
 8007730:	636f4361 	.word	0x636f4361
 8007734:	3fd287a7 	.word	0x3fd287a7
 8007738:	8b60c8b3 	.word	0x8b60c8b3
 800773c:	3fc68a28 	.word	0x3fc68a28
 8007740:	509f79fb 	.word	0x509f79fb
 8007744:	3fd34413 	.word	0x3fd34413
 8007748:	080097f9 	.word	0x080097f9
 800774c:	08009810 	.word	0x08009810
 8007750:	7ff00000 	.word	0x7ff00000
 8007754:	080097f5 	.word	0x080097f5
 8007758:	080097ec 	.word	0x080097ec
 800775c:	080097c9 	.word	0x080097c9
 8007760:	3ff80000 	.word	0x3ff80000
 8007764:	08009908 	.word	0x08009908
 8007768:	0800986f 	.word	0x0800986f
 800776c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800776e:	9a00      	ldr	r2, [sp, #0]
 8007770:	601a      	str	r2, [r3, #0]
 8007772:	9b01      	ldr	r3, [sp, #4]
 8007774:	2b0e      	cmp	r3, #14
 8007776:	f200 80ad 	bhi.w	80078d4 <_dtoa_r+0x484>
 800777a:	2d00      	cmp	r5, #0
 800777c:	f000 80aa 	beq.w	80078d4 <_dtoa_r+0x484>
 8007780:	f1ba 0f00 	cmp.w	sl, #0
 8007784:	dd36      	ble.n	80077f4 <_dtoa_r+0x3a4>
 8007786:	4ac3      	ldr	r2, [pc, #780]	; (8007a94 <_dtoa_r+0x644>)
 8007788:	f00a 030f 	and.w	r3, sl, #15
 800778c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8007790:	ed93 7b00 	vldr	d7, [r3]
 8007794:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8007798:	ea4f 172a 	mov.w	r7, sl, asr #4
 800779c:	eeb0 8a47 	vmov.f32	s16, s14
 80077a0:	eef0 8a67 	vmov.f32	s17, s15
 80077a4:	d016      	beq.n	80077d4 <_dtoa_r+0x384>
 80077a6:	4bbc      	ldr	r3, [pc, #752]	; (8007a98 <_dtoa_r+0x648>)
 80077a8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80077ac:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80077b0:	f7f9 f86c 	bl	800088c <__aeabi_ddiv>
 80077b4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80077b8:	f007 070f 	and.w	r7, r7, #15
 80077bc:	2503      	movs	r5, #3
 80077be:	4eb6      	ldr	r6, [pc, #728]	; (8007a98 <_dtoa_r+0x648>)
 80077c0:	b957      	cbnz	r7, 80077d8 <_dtoa_r+0x388>
 80077c2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80077c6:	ec53 2b18 	vmov	r2, r3, d8
 80077ca:	f7f9 f85f 	bl	800088c <__aeabi_ddiv>
 80077ce:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80077d2:	e029      	b.n	8007828 <_dtoa_r+0x3d8>
 80077d4:	2502      	movs	r5, #2
 80077d6:	e7f2      	b.n	80077be <_dtoa_r+0x36e>
 80077d8:	07f9      	lsls	r1, r7, #31
 80077da:	d508      	bpl.n	80077ee <_dtoa_r+0x39e>
 80077dc:	ec51 0b18 	vmov	r0, r1, d8
 80077e0:	e9d6 2300 	ldrd	r2, r3, [r6]
 80077e4:	f7f8 ff28 	bl	8000638 <__aeabi_dmul>
 80077e8:	ec41 0b18 	vmov	d8, r0, r1
 80077ec:	3501      	adds	r5, #1
 80077ee:	107f      	asrs	r7, r7, #1
 80077f0:	3608      	adds	r6, #8
 80077f2:	e7e5      	b.n	80077c0 <_dtoa_r+0x370>
 80077f4:	f000 80a6 	beq.w	8007944 <_dtoa_r+0x4f4>
 80077f8:	f1ca 0600 	rsb	r6, sl, #0
 80077fc:	4ba5      	ldr	r3, [pc, #660]	; (8007a94 <_dtoa_r+0x644>)
 80077fe:	4fa6      	ldr	r7, [pc, #664]	; (8007a98 <_dtoa_r+0x648>)
 8007800:	f006 020f 	and.w	r2, r6, #15
 8007804:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007808:	e9d3 2300 	ldrd	r2, r3, [r3]
 800780c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007810:	f7f8 ff12 	bl	8000638 <__aeabi_dmul>
 8007814:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007818:	1136      	asrs	r6, r6, #4
 800781a:	2300      	movs	r3, #0
 800781c:	2502      	movs	r5, #2
 800781e:	2e00      	cmp	r6, #0
 8007820:	f040 8085 	bne.w	800792e <_dtoa_r+0x4de>
 8007824:	2b00      	cmp	r3, #0
 8007826:	d1d2      	bne.n	80077ce <_dtoa_r+0x37e>
 8007828:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800782a:	2b00      	cmp	r3, #0
 800782c:	f000 808c 	beq.w	8007948 <_dtoa_r+0x4f8>
 8007830:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8007834:	4b99      	ldr	r3, [pc, #612]	; (8007a9c <_dtoa_r+0x64c>)
 8007836:	2200      	movs	r2, #0
 8007838:	4630      	mov	r0, r6
 800783a:	4639      	mov	r1, r7
 800783c:	f7f9 f96e 	bl	8000b1c <__aeabi_dcmplt>
 8007840:	2800      	cmp	r0, #0
 8007842:	f000 8081 	beq.w	8007948 <_dtoa_r+0x4f8>
 8007846:	9b01      	ldr	r3, [sp, #4]
 8007848:	2b00      	cmp	r3, #0
 800784a:	d07d      	beq.n	8007948 <_dtoa_r+0x4f8>
 800784c:	f1b9 0f00 	cmp.w	r9, #0
 8007850:	dd3c      	ble.n	80078cc <_dtoa_r+0x47c>
 8007852:	f10a 33ff 	add.w	r3, sl, #4294967295
 8007856:	9307      	str	r3, [sp, #28]
 8007858:	2200      	movs	r2, #0
 800785a:	4b91      	ldr	r3, [pc, #580]	; (8007aa0 <_dtoa_r+0x650>)
 800785c:	4630      	mov	r0, r6
 800785e:	4639      	mov	r1, r7
 8007860:	f7f8 feea 	bl	8000638 <__aeabi_dmul>
 8007864:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007868:	3501      	adds	r5, #1
 800786a:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800786e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8007872:	4628      	mov	r0, r5
 8007874:	f7f8 fe76 	bl	8000564 <__aeabi_i2d>
 8007878:	4632      	mov	r2, r6
 800787a:	463b      	mov	r3, r7
 800787c:	f7f8 fedc 	bl	8000638 <__aeabi_dmul>
 8007880:	4b88      	ldr	r3, [pc, #544]	; (8007aa4 <_dtoa_r+0x654>)
 8007882:	2200      	movs	r2, #0
 8007884:	f7f8 fd22 	bl	80002cc <__adddf3>
 8007888:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800788c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007890:	9303      	str	r3, [sp, #12]
 8007892:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007894:	2b00      	cmp	r3, #0
 8007896:	d15c      	bne.n	8007952 <_dtoa_r+0x502>
 8007898:	4b83      	ldr	r3, [pc, #524]	; (8007aa8 <_dtoa_r+0x658>)
 800789a:	2200      	movs	r2, #0
 800789c:	4630      	mov	r0, r6
 800789e:	4639      	mov	r1, r7
 80078a0:	f7f8 fd12 	bl	80002c8 <__aeabi_dsub>
 80078a4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80078a8:	4606      	mov	r6, r0
 80078aa:	460f      	mov	r7, r1
 80078ac:	f7f9 f954 	bl	8000b58 <__aeabi_dcmpgt>
 80078b0:	2800      	cmp	r0, #0
 80078b2:	f040 8296 	bne.w	8007de2 <_dtoa_r+0x992>
 80078b6:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80078ba:	4630      	mov	r0, r6
 80078bc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80078c0:	4639      	mov	r1, r7
 80078c2:	f7f9 f92b 	bl	8000b1c <__aeabi_dcmplt>
 80078c6:	2800      	cmp	r0, #0
 80078c8:	f040 8288 	bne.w	8007ddc <_dtoa_r+0x98c>
 80078cc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80078d0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80078d4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	f2c0 8158 	blt.w	8007b8c <_dtoa_r+0x73c>
 80078dc:	f1ba 0f0e 	cmp.w	sl, #14
 80078e0:	f300 8154 	bgt.w	8007b8c <_dtoa_r+0x73c>
 80078e4:	4b6b      	ldr	r3, [pc, #428]	; (8007a94 <_dtoa_r+0x644>)
 80078e6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80078ea:	e9d3 8900 	ldrd	r8, r9, [r3]
 80078ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	f280 80e3 	bge.w	8007abc <_dtoa_r+0x66c>
 80078f6:	9b01      	ldr	r3, [sp, #4]
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	f300 80df 	bgt.w	8007abc <_dtoa_r+0x66c>
 80078fe:	f040 826d 	bne.w	8007ddc <_dtoa_r+0x98c>
 8007902:	4b69      	ldr	r3, [pc, #420]	; (8007aa8 <_dtoa_r+0x658>)
 8007904:	2200      	movs	r2, #0
 8007906:	4640      	mov	r0, r8
 8007908:	4649      	mov	r1, r9
 800790a:	f7f8 fe95 	bl	8000638 <__aeabi_dmul>
 800790e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007912:	f7f9 f917 	bl	8000b44 <__aeabi_dcmpge>
 8007916:	9e01      	ldr	r6, [sp, #4]
 8007918:	4637      	mov	r7, r6
 800791a:	2800      	cmp	r0, #0
 800791c:	f040 8243 	bne.w	8007da6 <_dtoa_r+0x956>
 8007920:	9d00      	ldr	r5, [sp, #0]
 8007922:	2331      	movs	r3, #49	; 0x31
 8007924:	f805 3b01 	strb.w	r3, [r5], #1
 8007928:	f10a 0a01 	add.w	sl, sl, #1
 800792c:	e23f      	b.n	8007dae <_dtoa_r+0x95e>
 800792e:	07f2      	lsls	r2, r6, #31
 8007930:	d505      	bpl.n	800793e <_dtoa_r+0x4ee>
 8007932:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007936:	f7f8 fe7f 	bl	8000638 <__aeabi_dmul>
 800793a:	3501      	adds	r5, #1
 800793c:	2301      	movs	r3, #1
 800793e:	1076      	asrs	r6, r6, #1
 8007940:	3708      	adds	r7, #8
 8007942:	e76c      	b.n	800781e <_dtoa_r+0x3ce>
 8007944:	2502      	movs	r5, #2
 8007946:	e76f      	b.n	8007828 <_dtoa_r+0x3d8>
 8007948:	9b01      	ldr	r3, [sp, #4]
 800794a:	f8cd a01c 	str.w	sl, [sp, #28]
 800794e:	930c      	str	r3, [sp, #48]	; 0x30
 8007950:	e78d      	b.n	800786e <_dtoa_r+0x41e>
 8007952:	9900      	ldr	r1, [sp, #0]
 8007954:	980c      	ldr	r0, [sp, #48]	; 0x30
 8007956:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007958:	4b4e      	ldr	r3, [pc, #312]	; (8007a94 <_dtoa_r+0x644>)
 800795a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800795e:	4401      	add	r1, r0
 8007960:	9102      	str	r1, [sp, #8]
 8007962:	9908      	ldr	r1, [sp, #32]
 8007964:	eeb0 8a47 	vmov.f32	s16, s14
 8007968:	eef0 8a67 	vmov.f32	s17, s15
 800796c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007970:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007974:	2900      	cmp	r1, #0
 8007976:	d045      	beq.n	8007a04 <_dtoa_r+0x5b4>
 8007978:	494c      	ldr	r1, [pc, #304]	; (8007aac <_dtoa_r+0x65c>)
 800797a:	2000      	movs	r0, #0
 800797c:	f7f8 ff86 	bl	800088c <__aeabi_ddiv>
 8007980:	ec53 2b18 	vmov	r2, r3, d8
 8007984:	f7f8 fca0 	bl	80002c8 <__aeabi_dsub>
 8007988:	9d00      	ldr	r5, [sp, #0]
 800798a:	ec41 0b18 	vmov	d8, r0, r1
 800798e:	4639      	mov	r1, r7
 8007990:	4630      	mov	r0, r6
 8007992:	f7f9 f901 	bl	8000b98 <__aeabi_d2iz>
 8007996:	900c      	str	r0, [sp, #48]	; 0x30
 8007998:	f7f8 fde4 	bl	8000564 <__aeabi_i2d>
 800799c:	4602      	mov	r2, r0
 800799e:	460b      	mov	r3, r1
 80079a0:	4630      	mov	r0, r6
 80079a2:	4639      	mov	r1, r7
 80079a4:	f7f8 fc90 	bl	80002c8 <__aeabi_dsub>
 80079a8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80079aa:	3330      	adds	r3, #48	; 0x30
 80079ac:	f805 3b01 	strb.w	r3, [r5], #1
 80079b0:	ec53 2b18 	vmov	r2, r3, d8
 80079b4:	4606      	mov	r6, r0
 80079b6:	460f      	mov	r7, r1
 80079b8:	f7f9 f8b0 	bl	8000b1c <__aeabi_dcmplt>
 80079bc:	2800      	cmp	r0, #0
 80079be:	d165      	bne.n	8007a8c <_dtoa_r+0x63c>
 80079c0:	4632      	mov	r2, r6
 80079c2:	463b      	mov	r3, r7
 80079c4:	4935      	ldr	r1, [pc, #212]	; (8007a9c <_dtoa_r+0x64c>)
 80079c6:	2000      	movs	r0, #0
 80079c8:	f7f8 fc7e 	bl	80002c8 <__aeabi_dsub>
 80079cc:	ec53 2b18 	vmov	r2, r3, d8
 80079d0:	f7f9 f8a4 	bl	8000b1c <__aeabi_dcmplt>
 80079d4:	2800      	cmp	r0, #0
 80079d6:	f040 80b9 	bne.w	8007b4c <_dtoa_r+0x6fc>
 80079da:	9b02      	ldr	r3, [sp, #8]
 80079dc:	429d      	cmp	r5, r3
 80079de:	f43f af75 	beq.w	80078cc <_dtoa_r+0x47c>
 80079e2:	4b2f      	ldr	r3, [pc, #188]	; (8007aa0 <_dtoa_r+0x650>)
 80079e4:	ec51 0b18 	vmov	r0, r1, d8
 80079e8:	2200      	movs	r2, #0
 80079ea:	f7f8 fe25 	bl	8000638 <__aeabi_dmul>
 80079ee:	4b2c      	ldr	r3, [pc, #176]	; (8007aa0 <_dtoa_r+0x650>)
 80079f0:	ec41 0b18 	vmov	d8, r0, r1
 80079f4:	2200      	movs	r2, #0
 80079f6:	4630      	mov	r0, r6
 80079f8:	4639      	mov	r1, r7
 80079fa:	f7f8 fe1d 	bl	8000638 <__aeabi_dmul>
 80079fe:	4606      	mov	r6, r0
 8007a00:	460f      	mov	r7, r1
 8007a02:	e7c4      	b.n	800798e <_dtoa_r+0x53e>
 8007a04:	ec51 0b17 	vmov	r0, r1, d7
 8007a08:	f7f8 fe16 	bl	8000638 <__aeabi_dmul>
 8007a0c:	9b02      	ldr	r3, [sp, #8]
 8007a0e:	9d00      	ldr	r5, [sp, #0]
 8007a10:	930c      	str	r3, [sp, #48]	; 0x30
 8007a12:	ec41 0b18 	vmov	d8, r0, r1
 8007a16:	4639      	mov	r1, r7
 8007a18:	4630      	mov	r0, r6
 8007a1a:	f7f9 f8bd 	bl	8000b98 <__aeabi_d2iz>
 8007a1e:	9011      	str	r0, [sp, #68]	; 0x44
 8007a20:	f7f8 fda0 	bl	8000564 <__aeabi_i2d>
 8007a24:	4602      	mov	r2, r0
 8007a26:	460b      	mov	r3, r1
 8007a28:	4630      	mov	r0, r6
 8007a2a:	4639      	mov	r1, r7
 8007a2c:	f7f8 fc4c 	bl	80002c8 <__aeabi_dsub>
 8007a30:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007a32:	3330      	adds	r3, #48	; 0x30
 8007a34:	f805 3b01 	strb.w	r3, [r5], #1
 8007a38:	9b02      	ldr	r3, [sp, #8]
 8007a3a:	429d      	cmp	r5, r3
 8007a3c:	4606      	mov	r6, r0
 8007a3e:	460f      	mov	r7, r1
 8007a40:	f04f 0200 	mov.w	r2, #0
 8007a44:	d134      	bne.n	8007ab0 <_dtoa_r+0x660>
 8007a46:	4b19      	ldr	r3, [pc, #100]	; (8007aac <_dtoa_r+0x65c>)
 8007a48:	ec51 0b18 	vmov	r0, r1, d8
 8007a4c:	f7f8 fc3e 	bl	80002cc <__adddf3>
 8007a50:	4602      	mov	r2, r0
 8007a52:	460b      	mov	r3, r1
 8007a54:	4630      	mov	r0, r6
 8007a56:	4639      	mov	r1, r7
 8007a58:	f7f9 f87e 	bl	8000b58 <__aeabi_dcmpgt>
 8007a5c:	2800      	cmp	r0, #0
 8007a5e:	d175      	bne.n	8007b4c <_dtoa_r+0x6fc>
 8007a60:	ec53 2b18 	vmov	r2, r3, d8
 8007a64:	4911      	ldr	r1, [pc, #68]	; (8007aac <_dtoa_r+0x65c>)
 8007a66:	2000      	movs	r0, #0
 8007a68:	f7f8 fc2e 	bl	80002c8 <__aeabi_dsub>
 8007a6c:	4602      	mov	r2, r0
 8007a6e:	460b      	mov	r3, r1
 8007a70:	4630      	mov	r0, r6
 8007a72:	4639      	mov	r1, r7
 8007a74:	f7f9 f852 	bl	8000b1c <__aeabi_dcmplt>
 8007a78:	2800      	cmp	r0, #0
 8007a7a:	f43f af27 	beq.w	80078cc <_dtoa_r+0x47c>
 8007a7e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007a80:	1e6b      	subs	r3, r5, #1
 8007a82:	930c      	str	r3, [sp, #48]	; 0x30
 8007a84:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007a88:	2b30      	cmp	r3, #48	; 0x30
 8007a8a:	d0f8      	beq.n	8007a7e <_dtoa_r+0x62e>
 8007a8c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8007a90:	e04a      	b.n	8007b28 <_dtoa_r+0x6d8>
 8007a92:	bf00      	nop
 8007a94:	08009908 	.word	0x08009908
 8007a98:	080098e0 	.word	0x080098e0
 8007a9c:	3ff00000 	.word	0x3ff00000
 8007aa0:	40240000 	.word	0x40240000
 8007aa4:	401c0000 	.word	0x401c0000
 8007aa8:	40140000 	.word	0x40140000
 8007aac:	3fe00000 	.word	0x3fe00000
 8007ab0:	4baf      	ldr	r3, [pc, #700]	; (8007d70 <_dtoa_r+0x920>)
 8007ab2:	f7f8 fdc1 	bl	8000638 <__aeabi_dmul>
 8007ab6:	4606      	mov	r6, r0
 8007ab8:	460f      	mov	r7, r1
 8007aba:	e7ac      	b.n	8007a16 <_dtoa_r+0x5c6>
 8007abc:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8007ac0:	9d00      	ldr	r5, [sp, #0]
 8007ac2:	4642      	mov	r2, r8
 8007ac4:	464b      	mov	r3, r9
 8007ac6:	4630      	mov	r0, r6
 8007ac8:	4639      	mov	r1, r7
 8007aca:	f7f8 fedf 	bl	800088c <__aeabi_ddiv>
 8007ace:	f7f9 f863 	bl	8000b98 <__aeabi_d2iz>
 8007ad2:	9002      	str	r0, [sp, #8]
 8007ad4:	f7f8 fd46 	bl	8000564 <__aeabi_i2d>
 8007ad8:	4642      	mov	r2, r8
 8007ada:	464b      	mov	r3, r9
 8007adc:	f7f8 fdac 	bl	8000638 <__aeabi_dmul>
 8007ae0:	4602      	mov	r2, r0
 8007ae2:	460b      	mov	r3, r1
 8007ae4:	4630      	mov	r0, r6
 8007ae6:	4639      	mov	r1, r7
 8007ae8:	f7f8 fbee 	bl	80002c8 <__aeabi_dsub>
 8007aec:	9e02      	ldr	r6, [sp, #8]
 8007aee:	9f01      	ldr	r7, [sp, #4]
 8007af0:	3630      	adds	r6, #48	; 0x30
 8007af2:	f805 6b01 	strb.w	r6, [r5], #1
 8007af6:	9e00      	ldr	r6, [sp, #0]
 8007af8:	1bae      	subs	r6, r5, r6
 8007afa:	42b7      	cmp	r7, r6
 8007afc:	4602      	mov	r2, r0
 8007afe:	460b      	mov	r3, r1
 8007b00:	d137      	bne.n	8007b72 <_dtoa_r+0x722>
 8007b02:	f7f8 fbe3 	bl	80002cc <__adddf3>
 8007b06:	4642      	mov	r2, r8
 8007b08:	464b      	mov	r3, r9
 8007b0a:	4606      	mov	r6, r0
 8007b0c:	460f      	mov	r7, r1
 8007b0e:	f7f9 f823 	bl	8000b58 <__aeabi_dcmpgt>
 8007b12:	b9c8      	cbnz	r0, 8007b48 <_dtoa_r+0x6f8>
 8007b14:	4642      	mov	r2, r8
 8007b16:	464b      	mov	r3, r9
 8007b18:	4630      	mov	r0, r6
 8007b1a:	4639      	mov	r1, r7
 8007b1c:	f7f8 fff4 	bl	8000b08 <__aeabi_dcmpeq>
 8007b20:	b110      	cbz	r0, 8007b28 <_dtoa_r+0x6d8>
 8007b22:	9b02      	ldr	r3, [sp, #8]
 8007b24:	07d9      	lsls	r1, r3, #31
 8007b26:	d40f      	bmi.n	8007b48 <_dtoa_r+0x6f8>
 8007b28:	4620      	mov	r0, r4
 8007b2a:	4659      	mov	r1, fp
 8007b2c:	f000 fad6 	bl	80080dc <_Bfree>
 8007b30:	2300      	movs	r3, #0
 8007b32:	702b      	strb	r3, [r5, #0]
 8007b34:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007b36:	f10a 0001 	add.w	r0, sl, #1
 8007b3a:	6018      	str	r0, [r3, #0]
 8007b3c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	f43f acd8 	beq.w	80074f4 <_dtoa_r+0xa4>
 8007b44:	601d      	str	r5, [r3, #0]
 8007b46:	e4d5      	b.n	80074f4 <_dtoa_r+0xa4>
 8007b48:	f8cd a01c 	str.w	sl, [sp, #28]
 8007b4c:	462b      	mov	r3, r5
 8007b4e:	461d      	mov	r5, r3
 8007b50:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007b54:	2a39      	cmp	r2, #57	; 0x39
 8007b56:	d108      	bne.n	8007b6a <_dtoa_r+0x71a>
 8007b58:	9a00      	ldr	r2, [sp, #0]
 8007b5a:	429a      	cmp	r2, r3
 8007b5c:	d1f7      	bne.n	8007b4e <_dtoa_r+0x6fe>
 8007b5e:	9a07      	ldr	r2, [sp, #28]
 8007b60:	9900      	ldr	r1, [sp, #0]
 8007b62:	3201      	adds	r2, #1
 8007b64:	9207      	str	r2, [sp, #28]
 8007b66:	2230      	movs	r2, #48	; 0x30
 8007b68:	700a      	strb	r2, [r1, #0]
 8007b6a:	781a      	ldrb	r2, [r3, #0]
 8007b6c:	3201      	adds	r2, #1
 8007b6e:	701a      	strb	r2, [r3, #0]
 8007b70:	e78c      	b.n	8007a8c <_dtoa_r+0x63c>
 8007b72:	4b7f      	ldr	r3, [pc, #508]	; (8007d70 <_dtoa_r+0x920>)
 8007b74:	2200      	movs	r2, #0
 8007b76:	f7f8 fd5f 	bl	8000638 <__aeabi_dmul>
 8007b7a:	2200      	movs	r2, #0
 8007b7c:	2300      	movs	r3, #0
 8007b7e:	4606      	mov	r6, r0
 8007b80:	460f      	mov	r7, r1
 8007b82:	f7f8 ffc1 	bl	8000b08 <__aeabi_dcmpeq>
 8007b86:	2800      	cmp	r0, #0
 8007b88:	d09b      	beq.n	8007ac2 <_dtoa_r+0x672>
 8007b8a:	e7cd      	b.n	8007b28 <_dtoa_r+0x6d8>
 8007b8c:	9a08      	ldr	r2, [sp, #32]
 8007b8e:	2a00      	cmp	r2, #0
 8007b90:	f000 80c4 	beq.w	8007d1c <_dtoa_r+0x8cc>
 8007b94:	9a05      	ldr	r2, [sp, #20]
 8007b96:	2a01      	cmp	r2, #1
 8007b98:	f300 80a8 	bgt.w	8007cec <_dtoa_r+0x89c>
 8007b9c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007b9e:	2a00      	cmp	r2, #0
 8007ba0:	f000 80a0 	beq.w	8007ce4 <_dtoa_r+0x894>
 8007ba4:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007ba8:	9e06      	ldr	r6, [sp, #24]
 8007baa:	4645      	mov	r5, r8
 8007bac:	9a04      	ldr	r2, [sp, #16]
 8007bae:	2101      	movs	r1, #1
 8007bb0:	441a      	add	r2, r3
 8007bb2:	4620      	mov	r0, r4
 8007bb4:	4498      	add	r8, r3
 8007bb6:	9204      	str	r2, [sp, #16]
 8007bb8:	f000 fb4c 	bl	8008254 <__i2b>
 8007bbc:	4607      	mov	r7, r0
 8007bbe:	2d00      	cmp	r5, #0
 8007bc0:	dd0b      	ble.n	8007bda <_dtoa_r+0x78a>
 8007bc2:	9b04      	ldr	r3, [sp, #16]
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	dd08      	ble.n	8007bda <_dtoa_r+0x78a>
 8007bc8:	42ab      	cmp	r3, r5
 8007bca:	9a04      	ldr	r2, [sp, #16]
 8007bcc:	bfa8      	it	ge
 8007bce:	462b      	movge	r3, r5
 8007bd0:	eba8 0803 	sub.w	r8, r8, r3
 8007bd4:	1aed      	subs	r5, r5, r3
 8007bd6:	1ad3      	subs	r3, r2, r3
 8007bd8:	9304      	str	r3, [sp, #16]
 8007bda:	9b06      	ldr	r3, [sp, #24]
 8007bdc:	b1fb      	cbz	r3, 8007c1e <_dtoa_r+0x7ce>
 8007bde:	9b08      	ldr	r3, [sp, #32]
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	f000 809f 	beq.w	8007d24 <_dtoa_r+0x8d4>
 8007be6:	2e00      	cmp	r6, #0
 8007be8:	dd11      	ble.n	8007c0e <_dtoa_r+0x7be>
 8007bea:	4639      	mov	r1, r7
 8007bec:	4632      	mov	r2, r6
 8007bee:	4620      	mov	r0, r4
 8007bf0:	f000 fbec 	bl	80083cc <__pow5mult>
 8007bf4:	465a      	mov	r2, fp
 8007bf6:	4601      	mov	r1, r0
 8007bf8:	4607      	mov	r7, r0
 8007bfa:	4620      	mov	r0, r4
 8007bfc:	f000 fb40 	bl	8008280 <__multiply>
 8007c00:	4659      	mov	r1, fp
 8007c02:	9007      	str	r0, [sp, #28]
 8007c04:	4620      	mov	r0, r4
 8007c06:	f000 fa69 	bl	80080dc <_Bfree>
 8007c0a:	9b07      	ldr	r3, [sp, #28]
 8007c0c:	469b      	mov	fp, r3
 8007c0e:	9b06      	ldr	r3, [sp, #24]
 8007c10:	1b9a      	subs	r2, r3, r6
 8007c12:	d004      	beq.n	8007c1e <_dtoa_r+0x7ce>
 8007c14:	4659      	mov	r1, fp
 8007c16:	4620      	mov	r0, r4
 8007c18:	f000 fbd8 	bl	80083cc <__pow5mult>
 8007c1c:	4683      	mov	fp, r0
 8007c1e:	2101      	movs	r1, #1
 8007c20:	4620      	mov	r0, r4
 8007c22:	f000 fb17 	bl	8008254 <__i2b>
 8007c26:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	4606      	mov	r6, r0
 8007c2c:	dd7c      	ble.n	8007d28 <_dtoa_r+0x8d8>
 8007c2e:	461a      	mov	r2, r3
 8007c30:	4601      	mov	r1, r0
 8007c32:	4620      	mov	r0, r4
 8007c34:	f000 fbca 	bl	80083cc <__pow5mult>
 8007c38:	9b05      	ldr	r3, [sp, #20]
 8007c3a:	2b01      	cmp	r3, #1
 8007c3c:	4606      	mov	r6, r0
 8007c3e:	dd76      	ble.n	8007d2e <_dtoa_r+0x8de>
 8007c40:	2300      	movs	r3, #0
 8007c42:	9306      	str	r3, [sp, #24]
 8007c44:	6933      	ldr	r3, [r6, #16]
 8007c46:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8007c4a:	6918      	ldr	r0, [r3, #16]
 8007c4c:	f000 fab2 	bl	80081b4 <__hi0bits>
 8007c50:	f1c0 0020 	rsb	r0, r0, #32
 8007c54:	9b04      	ldr	r3, [sp, #16]
 8007c56:	4418      	add	r0, r3
 8007c58:	f010 001f 	ands.w	r0, r0, #31
 8007c5c:	f000 8086 	beq.w	8007d6c <_dtoa_r+0x91c>
 8007c60:	f1c0 0320 	rsb	r3, r0, #32
 8007c64:	2b04      	cmp	r3, #4
 8007c66:	dd7f      	ble.n	8007d68 <_dtoa_r+0x918>
 8007c68:	f1c0 001c 	rsb	r0, r0, #28
 8007c6c:	9b04      	ldr	r3, [sp, #16]
 8007c6e:	4403      	add	r3, r0
 8007c70:	4480      	add	r8, r0
 8007c72:	4405      	add	r5, r0
 8007c74:	9304      	str	r3, [sp, #16]
 8007c76:	f1b8 0f00 	cmp.w	r8, #0
 8007c7a:	dd05      	ble.n	8007c88 <_dtoa_r+0x838>
 8007c7c:	4659      	mov	r1, fp
 8007c7e:	4642      	mov	r2, r8
 8007c80:	4620      	mov	r0, r4
 8007c82:	f000 fbfd 	bl	8008480 <__lshift>
 8007c86:	4683      	mov	fp, r0
 8007c88:	9b04      	ldr	r3, [sp, #16]
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	dd05      	ble.n	8007c9a <_dtoa_r+0x84a>
 8007c8e:	4631      	mov	r1, r6
 8007c90:	461a      	mov	r2, r3
 8007c92:	4620      	mov	r0, r4
 8007c94:	f000 fbf4 	bl	8008480 <__lshift>
 8007c98:	4606      	mov	r6, r0
 8007c9a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d069      	beq.n	8007d74 <_dtoa_r+0x924>
 8007ca0:	4631      	mov	r1, r6
 8007ca2:	4658      	mov	r0, fp
 8007ca4:	f000 fc58 	bl	8008558 <__mcmp>
 8007ca8:	2800      	cmp	r0, #0
 8007caa:	da63      	bge.n	8007d74 <_dtoa_r+0x924>
 8007cac:	2300      	movs	r3, #0
 8007cae:	4659      	mov	r1, fp
 8007cb0:	220a      	movs	r2, #10
 8007cb2:	4620      	mov	r0, r4
 8007cb4:	f000 fa34 	bl	8008120 <__multadd>
 8007cb8:	9b08      	ldr	r3, [sp, #32]
 8007cba:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007cbe:	4683      	mov	fp, r0
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	f000 818f 	beq.w	8007fe4 <_dtoa_r+0xb94>
 8007cc6:	4639      	mov	r1, r7
 8007cc8:	2300      	movs	r3, #0
 8007cca:	220a      	movs	r2, #10
 8007ccc:	4620      	mov	r0, r4
 8007cce:	f000 fa27 	bl	8008120 <__multadd>
 8007cd2:	f1b9 0f00 	cmp.w	r9, #0
 8007cd6:	4607      	mov	r7, r0
 8007cd8:	f300 808e 	bgt.w	8007df8 <_dtoa_r+0x9a8>
 8007cdc:	9b05      	ldr	r3, [sp, #20]
 8007cde:	2b02      	cmp	r3, #2
 8007ce0:	dc50      	bgt.n	8007d84 <_dtoa_r+0x934>
 8007ce2:	e089      	b.n	8007df8 <_dtoa_r+0x9a8>
 8007ce4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007ce6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007cea:	e75d      	b.n	8007ba8 <_dtoa_r+0x758>
 8007cec:	9b01      	ldr	r3, [sp, #4]
 8007cee:	1e5e      	subs	r6, r3, #1
 8007cf0:	9b06      	ldr	r3, [sp, #24]
 8007cf2:	42b3      	cmp	r3, r6
 8007cf4:	bfbf      	itttt	lt
 8007cf6:	9b06      	ldrlt	r3, [sp, #24]
 8007cf8:	9606      	strlt	r6, [sp, #24]
 8007cfa:	1af2      	sublt	r2, r6, r3
 8007cfc:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8007cfe:	bfb6      	itet	lt
 8007d00:	189b      	addlt	r3, r3, r2
 8007d02:	1b9e      	subge	r6, r3, r6
 8007d04:	930d      	strlt	r3, [sp, #52]	; 0x34
 8007d06:	9b01      	ldr	r3, [sp, #4]
 8007d08:	bfb8      	it	lt
 8007d0a:	2600      	movlt	r6, #0
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	bfb5      	itete	lt
 8007d10:	eba8 0503 	sublt.w	r5, r8, r3
 8007d14:	9b01      	ldrge	r3, [sp, #4]
 8007d16:	2300      	movlt	r3, #0
 8007d18:	4645      	movge	r5, r8
 8007d1a:	e747      	b.n	8007bac <_dtoa_r+0x75c>
 8007d1c:	9e06      	ldr	r6, [sp, #24]
 8007d1e:	9f08      	ldr	r7, [sp, #32]
 8007d20:	4645      	mov	r5, r8
 8007d22:	e74c      	b.n	8007bbe <_dtoa_r+0x76e>
 8007d24:	9a06      	ldr	r2, [sp, #24]
 8007d26:	e775      	b.n	8007c14 <_dtoa_r+0x7c4>
 8007d28:	9b05      	ldr	r3, [sp, #20]
 8007d2a:	2b01      	cmp	r3, #1
 8007d2c:	dc18      	bgt.n	8007d60 <_dtoa_r+0x910>
 8007d2e:	9b02      	ldr	r3, [sp, #8]
 8007d30:	b9b3      	cbnz	r3, 8007d60 <_dtoa_r+0x910>
 8007d32:	9b03      	ldr	r3, [sp, #12]
 8007d34:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007d38:	b9a3      	cbnz	r3, 8007d64 <_dtoa_r+0x914>
 8007d3a:	9b03      	ldr	r3, [sp, #12]
 8007d3c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007d40:	0d1b      	lsrs	r3, r3, #20
 8007d42:	051b      	lsls	r3, r3, #20
 8007d44:	b12b      	cbz	r3, 8007d52 <_dtoa_r+0x902>
 8007d46:	9b04      	ldr	r3, [sp, #16]
 8007d48:	3301      	adds	r3, #1
 8007d4a:	9304      	str	r3, [sp, #16]
 8007d4c:	f108 0801 	add.w	r8, r8, #1
 8007d50:	2301      	movs	r3, #1
 8007d52:	9306      	str	r3, [sp, #24]
 8007d54:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	f47f af74 	bne.w	8007c44 <_dtoa_r+0x7f4>
 8007d5c:	2001      	movs	r0, #1
 8007d5e:	e779      	b.n	8007c54 <_dtoa_r+0x804>
 8007d60:	2300      	movs	r3, #0
 8007d62:	e7f6      	b.n	8007d52 <_dtoa_r+0x902>
 8007d64:	9b02      	ldr	r3, [sp, #8]
 8007d66:	e7f4      	b.n	8007d52 <_dtoa_r+0x902>
 8007d68:	d085      	beq.n	8007c76 <_dtoa_r+0x826>
 8007d6a:	4618      	mov	r0, r3
 8007d6c:	301c      	adds	r0, #28
 8007d6e:	e77d      	b.n	8007c6c <_dtoa_r+0x81c>
 8007d70:	40240000 	.word	0x40240000
 8007d74:	9b01      	ldr	r3, [sp, #4]
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	dc38      	bgt.n	8007dec <_dtoa_r+0x99c>
 8007d7a:	9b05      	ldr	r3, [sp, #20]
 8007d7c:	2b02      	cmp	r3, #2
 8007d7e:	dd35      	ble.n	8007dec <_dtoa_r+0x99c>
 8007d80:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8007d84:	f1b9 0f00 	cmp.w	r9, #0
 8007d88:	d10d      	bne.n	8007da6 <_dtoa_r+0x956>
 8007d8a:	4631      	mov	r1, r6
 8007d8c:	464b      	mov	r3, r9
 8007d8e:	2205      	movs	r2, #5
 8007d90:	4620      	mov	r0, r4
 8007d92:	f000 f9c5 	bl	8008120 <__multadd>
 8007d96:	4601      	mov	r1, r0
 8007d98:	4606      	mov	r6, r0
 8007d9a:	4658      	mov	r0, fp
 8007d9c:	f000 fbdc 	bl	8008558 <__mcmp>
 8007da0:	2800      	cmp	r0, #0
 8007da2:	f73f adbd 	bgt.w	8007920 <_dtoa_r+0x4d0>
 8007da6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007da8:	9d00      	ldr	r5, [sp, #0]
 8007daa:	ea6f 0a03 	mvn.w	sl, r3
 8007dae:	f04f 0800 	mov.w	r8, #0
 8007db2:	4631      	mov	r1, r6
 8007db4:	4620      	mov	r0, r4
 8007db6:	f000 f991 	bl	80080dc <_Bfree>
 8007dba:	2f00      	cmp	r7, #0
 8007dbc:	f43f aeb4 	beq.w	8007b28 <_dtoa_r+0x6d8>
 8007dc0:	f1b8 0f00 	cmp.w	r8, #0
 8007dc4:	d005      	beq.n	8007dd2 <_dtoa_r+0x982>
 8007dc6:	45b8      	cmp	r8, r7
 8007dc8:	d003      	beq.n	8007dd2 <_dtoa_r+0x982>
 8007dca:	4641      	mov	r1, r8
 8007dcc:	4620      	mov	r0, r4
 8007dce:	f000 f985 	bl	80080dc <_Bfree>
 8007dd2:	4639      	mov	r1, r7
 8007dd4:	4620      	mov	r0, r4
 8007dd6:	f000 f981 	bl	80080dc <_Bfree>
 8007dda:	e6a5      	b.n	8007b28 <_dtoa_r+0x6d8>
 8007ddc:	2600      	movs	r6, #0
 8007dde:	4637      	mov	r7, r6
 8007de0:	e7e1      	b.n	8007da6 <_dtoa_r+0x956>
 8007de2:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8007de4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8007de8:	4637      	mov	r7, r6
 8007dea:	e599      	b.n	8007920 <_dtoa_r+0x4d0>
 8007dec:	9b08      	ldr	r3, [sp, #32]
 8007dee:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	f000 80fd 	beq.w	8007ff2 <_dtoa_r+0xba2>
 8007df8:	2d00      	cmp	r5, #0
 8007dfa:	dd05      	ble.n	8007e08 <_dtoa_r+0x9b8>
 8007dfc:	4639      	mov	r1, r7
 8007dfe:	462a      	mov	r2, r5
 8007e00:	4620      	mov	r0, r4
 8007e02:	f000 fb3d 	bl	8008480 <__lshift>
 8007e06:	4607      	mov	r7, r0
 8007e08:	9b06      	ldr	r3, [sp, #24]
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d05c      	beq.n	8007ec8 <_dtoa_r+0xa78>
 8007e0e:	6879      	ldr	r1, [r7, #4]
 8007e10:	4620      	mov	r0, r4
 8007e12:	f000 f923 	bl	800805c <_Balloc>
 8007e16:	4605      	mov	r5, r0
 8007e18:	b928      	cbnz	r0, 8007e26 <_dtoa_r+0x9d6>
 8007e1a:	4b80      	ldr	r3, [pc, #512]	; (800801c <_dtoa_r+0xbcc>)
 8007e1c:	4602      	mov	r2, r0
 8007e1e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8007e22:	f7ff bb2e 	b.w	8007482 <_dtoa_r+0x32>
 8007e26:	693a      	ldr	r2, [r7, #16]
 8007e28:	3202      	adds	r2, #2
 8007e2a:	0092      	lsls	r2, r2, #2
 8007e2c:	f107 010c 	add.w	r1, r7, #12
 8007e30:	300c      	adds	r0, #12
 8007e32:	f000 f905 	bl	8008040 <memcpy>
 8007e36:	2201      	movs	r2, #1
 8007e38:	4629      	mov	r1, r5
 8007e3a:	4620      	mov	r0, r4
 8007e3c:	f000 fb20 	bl	8008480 <__lshift>
 8007e40:	9b00      	ldr	r3, [sp, #0]
 8007e42:	3301      	adds	r3, #1
 8007e44:	9301      	str	r3, [sp, #4]
 8007e46:	9b00      	ldr	r3, [sp, #0]
 8007e48:	444b      	add	r3, r9
 8007e4a:	9307      	str	r3, [sp, #28]
 8007e4c:	9b02      	ldr	r3, [sp, #8]
 8007e4e:	f003 0301 	and.w	r3, r3, #1
 8007e52:	46b8      	mov	r8, r7
 8007e54:	9306      	str	r3, [sp, #24]
 8007e56:	4607      	mov	r7, r0
 8007e58:	9b01      	ldr	r3, [sp, #4]
 8007e5a:	4631      	mov	r1, r6
 8007e5c:	3b01      	subs	r3, #1
 8007e5e:	4658      	mov	r0, fp
 8007e60:	9302      	str	r3, [sp, #8]
 8007e62:	f7ff fa69 	bl	8007338 <quorem>
 8007e66:	4603      	mov	r3, r0
 8007e68:	3330      	adds	r3, #48	; 0x30
 8007e6a:	9004      	str	r0, [sp, #16]
 8007e6c:	4641      	mov	r1, r8
 8007e6e:	4658      	mov	r0, fp
 8007e70:	9308      	str	r3, [sp, #32]
 8007e72:	f000 fb71 	bl	8008558 <__mcmp>
 8007e76:	463a      	mov	r2, r7
 8007e78:	4681      	mov	r9, r0
 8007e7a:	4631      	mov	r1, r6
 8007e7c:	4620      	mov	r0, r4
 8007e7e:	f000 fb87 	bl	8008590 <__mdiff>
 8007e82:	68c2      	ldr	r2, [r0, #12]
 8007e84:	9b08      	ldr	r3, [sp, #32]
 8007e86:	4605      	mov	r5, r0
 8007e88:	bb02      	cbnz	r2, 8007ecc <_dtoa_r+0xa7c>
 8007e8a:	4601      	mov	r1, r0
 8007e8c:	4658      	mov	r0, fp
 8007e8e:	f000 fb63 	bl	8008558 <__mcmp>
 8007e92:	9b08      	ldr	r3, [sp, #32]
 8007e94:	4602      	mov	r2, r0
 8007e96:	4629      	mov	r1, r5
 8007e98:	4620      	mov	r0, r4
 8007e9a:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8007e9e:	f000 f91d 	bl	80080dc <_Bfree>
 8007ea2:	9b05      	ldr	r3, [sp, #20]
 8007ea4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007ea6:	9d01      	ldr	r5, [sp, #4]
 8007ea8:	ea43 0102 	orr.w	r1, r3, r2
 8007eac:	9b06      	ldr	r3, [sp, #24]
 8007eae:	430b      	orrs	r3, r1
 8007eb0:	9b08      	ldr	r3, [sp, #32]
 8007eb2:	d10d      	bne.n	8007ed0 <_dtoa_r+0xa80>
 8007eb4:	2b39      	cmp	r3, #57	; 0x39
 8007eb6:	d029      	beq.n	8007f0c <_dtoa_r+0xabc>
 8007eb8:	f1b9 0f00 	cmp.w	r9, #0
 8007ebc:	dd01      	ble.n	8007ec2 <_dtoa_r+0xa72>
 8007ebe:	9b04      	ldr	r3, [sp, #16]
 8007ec0:	3331      	adds	r3, #49	; 0x31
 8007ec2:	9a02      	ldr	r2, [sp, #8]
 8007ec4:	7013      	strb	r3, [r2, #0]
 8007ec6:	e774      	b.n	8007db2 <_dtoa_r+0x962>
 8007ec8:	4638      	mov	r0, r7
 8007eca:	e7b9      	b.n	8007e40 <_dtoa_r+0x9f0>
 8007ecc:	2201      	movs	r2, #1
 8007ece:	e7e2      	b.n	8007e96 <_dtoa_r+0xa46>
 8007ed0:	f1b9 0f00 	cmp.w	r9, #0
 8007ed4:	db06      	blt.n	8007ee4 <_dtoa_r+0xa94>
 8007ed6:	9905      	ldr	r1, [sp, #20]
 8007ed8:	ea41 0909 	orr.w	r9, r1, r9
 8007edc:	9906      	ldr	r1, [sp, #24]
 8007ede:	ea59 0101 	orrs.w	r1, r9, r1
 8007ee2:	d120      	bne.n	8007f26 <_dtoa_r+0xad6>
 8007ee4:	2a00      	cmp	r2, #0
 8007ee6:	ddec      	ble.n	8007ec2 <_dtoa_r+0xa72>
 8007ee8:	4659      	mov	r1, fp
 8007eea:	2201      	movs	r2, #1
 8007eec:	4620      	mov	r0, r4
 8007eee:	9301      	str	r3, [sp, #4]
 8007ef0:	f000 fac6 	bl	8008480 <__lshift>
 8007ef4:	4631      	mov	r1, r6
 8007ef6:	4683      	mov	fp, r0
 8007ef8:	f000 fb2e 	bl	8008558 <__mcmp>
 8007efc:	2800      	cmp	r0, #0
 8007efe:	9b01      	ldr	r3, [sp, #4]
 8007f00:	dc02      	bgt.n	8007f08 <_dtoa_r+0xab8>
 8007f02:	d1de      	bne.n	8007ec2 <_dtoa_r+0xa72>
 8007f04:	07da      	lsls	r2, r3, #31
 8007f06:	d5dc      	bpl.n	8007ec2 <_dtoa_r+0xa72>
 8007f08:	2b39      	cmp	r3, #57	; 0x39
 8007f0a:	d1d8      	bne.n	8007ebe <_dtoa_r+0xa6e>
 8007f0c:	9a02      	ldr	r2, [sp, #8]
 8007f0e:	2339      	movs	r3, #57	; 0x39
 8007f10:	7013      	strb	r3, [r2, #0]
 8007f12:	462b      	mov	r3, r5
 8007f14:	461d      	mov	r5, r3
 8007f16:	3b01      	subs	r3, #1
 8007f18:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8007f1c:	2a39      	cmp	r2, #57	; 0x39
 8007f1e:	d050      	beq.n	8007fc2 <_dtoa_r+0xb72>
 8007f20:	3201      	adds	r2, #1
 8007f22:	701a      	strb	r2, [r3, #0]
 8007f24:	e745      	b.n	8007db2 <_dtoa_r+0x962>
 8007f26:	2a00      	cmp	r2, #0
 8007f28:	dd03      	ble.n	8007f32 <_dtoa_r+0xae2>
 8007f2a:	2b39      	cmp	r3, #57	; 0x39
 8007f2c:	d0ee      	beq.n	8007f0c <_dtoa_r+0xabc>
 8007f2e:	3301      	adds	r3, #1
 8007f30:	e7c7      	b.n	8007ec2 <_dtoa_r+0xa72>
 8007f32:	9a01      	ldr	r2, [sp, #4]
 8007f34:	9907      	ldr	r1, [sp, #28]
 8007f36:	f802 3c01 	strb.w	r3, [r2, #-1]
 8007f3a:	428a      	cmp	r2, r1
 8007f3c:	d02a      	beq.n	8007f94 <_dtoa_r+0xb44>
 8007f3e:	4659      	mov	r1, fp
 8007f40:	2300      	movs	r3, #0
 8007f42:	220a      	movs	r2, #10
 8007f44:	4620      	mov	r0, r4
 8007f46:	f000 f8eb 	bl	8008120 <__multadd>
 8007f4a:	45b8      	cmp	r8, r7
 8007f4c:	4683      	mov	fp, r0
 8007f4e:	f04f 0300 	mov.w	r3, #0
 8007f52:	f04f 020a 	mov.w	r2, #10
 8007f56:	4641      	mov	r1, r8
 8007f58:	4620      	mov	r0, r4
 8007f5a:	d107      	bne.n	8007f6c <_dtoa_r+0xb1c>
 8007f5c:	f000 f8e0 	bl	8008120 <__multadd>
 8007f60:	4680      	mov	r8, r0
 8007f62:	4607      	mov	r7, r0
 8007f64:	9b01      	ldr	r3, [sp, #4]
 8007f66:	3301      	adds	r3, #1
 8007f68:	9301      	str	r3, [sp, #4]
 8007f6a:	e775      	b.n	8007e58 <_dtoa_r+0xa08>
 8007f6c:	f000 f8d8 	bl	8008120 <__multadd>
 8007f70:	4639      	mov	r1, r7
 8007f72:	4680      	mov	r8, r0
 8007f74:	2300      	movs	r3, #0
 8007f76:	220a      	movs	r2, #10
 8007f78:	4620      	mov	r0, r4
 8007f7a:	f000 f8d1 	bl	8008120 <__multadd>
 8007f7e:	4607      	mov	r7, r0
 8007f80:	e7f0      	b.n	8007f64 <_dtoa_r+0xb14>
 8007f82:	f1b9 0f00 	cmp.w	r9, #0
 8007f86:	9a00      	ldr	r2, [sp, #0]
 8007f88:	bfcc      	ite	gt
 8007f8a:	464d      	movgt	r5, r9
 8007f8c:	2501      	movle	r5, #1
 8007f8e:	4415      	add	r5, r2
 8007f90:	f04f 0800 	mov.w	r8, #0
 8007f94:	4659      	mov	r1, fp
 8007f96:	2201      	movs	r2, #1
 8007f98:	4620      	mov	r0, r4
 8007f9a:	9301      	str	r3, [sp, #4]
 8007f9c:	f000 fa70 	bl	8008480 <__lshift>
 8007fa0:	4631      	mov	r1, r6
 8007fa2:	4683      	mov	fp, r0
 8007fa4:	f000 fad8 	bl	8008558 <__mcmp>
 8007fa8:	2800      	cmp	r0, #0
 8007faa:	dcb2      	bgt.n	8007f12 <_dtoa_r+0xac2>
 8007fac:	d102      	bne.n	8007fb4 <_dtoa_r+0xb64>
 8007fae:	9b01      	ldr	r3, [sp, #4]
 8007fb0:	07db      	lsls	r3, r3, #31
 8007fb2:	d4ae      	bmi.n	8007f12 <_dtoa_r+0xac2>
 8007fb4:	462b      	mov	r3, r5
 8007fb6:	461d      	mov	r5, r3
 8007fb8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007fbc:	2a30      	cmp	r2, #48	; 0x30
 8007fbe:	d0fa      	beq.n	8007fb6 <_dtoa_r+0xb66>
 8007fc0:	e6f7      	b.n	8007db2 <_dtoa_r+0x962>
 8007fc2:	9a00      	ldr	r2, [sp, #0]
 8007fc4:	429a      	cmp	r2, r3
 8007fc6:	d1a5      	bne.n	8007f14 <_dtoa_r+0xac4>
 8007fc8:	f10a 0a01 	add.w	sl, sl, #1
 8007fcc:	2331      	movs	r3, #49	; 0x31
 8007fce:	e779      	b.n	8007ec4 <_dtoa_r+0xa74>
 8007fd0:	4b13      	ldr	r3, [pc, #76]	; (8008020 <_dtoa_r+0xbd0>)
 8007fd2:	f7ff baaf 	b.w	8007534 <_dtoa_r+0xe4>
 8007fd6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	f47f aa86 	bne.w	80074ea <_dtoa_r+0x9a>
 8007fde:	4b11      	ldr	r3, [pc, #68]	; (8008024 <_dtoa_r+0xbd4>)
 8007fe0:	f7ff baa8 	b.w	8007534 <_dtoa_r+0xe4>
 8007fe4:	f1b9 0f00 	cmp.w	r9, #0
 8007fe8:	dc03      	bgt.n	8007ff2 <_dtoa_r+0xba2>
 8007fea:	9b05      	ldr	r3, [sp, #20]
 8007fec:	2b02      	cmp	r3, #2
 8007fee:	f73f aec9 	bgt.w	8007d84 <_dtoa_r+0x934>
 8007ff2:	9d00      	ldr	r5, [sp, #0]
 8007ff4:	4631      	mov	r1, r6
 8007ff6:	4658      	mov	r0, fp
 8007ff8:	f7ff f99e 	bl	8007338 <quorem>
 8007ffc:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8008000:	f805 3b01 	strb.w	r3, [r5], #1
 8008004:	9a00      	ldr	r2, [sp, #0]
 8008006:	1aaa      	subs	r2, r5, r2
 8008008:	4591      	cmp	r9, r2
 800800a:	ddba      	ble.n	8007f82 <_dtoa_r+0xb32>
 800800c:	4659      	mov	r1, fp
 800800e:	2300      	movs	r3, #0
 8008010:	220a      	movs	r2, #10
 8008012:	4620      	mov	r0, r4
 8008014:	f000 f884 	bl	8008120 <__multadd>
 8008018:	4683      	mov	fp, r0
 800801a:	e7eb      	b.n	8007ff4 <_dtoa_r+0xba4>
 800801c:	0800986f 	.word	0x0800986f
 8008020:	080097c8 	.word	0x080097c8
 8008024:	080097ec 	.word	0x080097ec

08008028 <_localeconv_r>:
 8008028:	4800      	ldr	r0, [pc, #0]	; (800802c <_localeconv_r+0x4>)
 800802a:	4770      	bx	lr
 800802c:	2000017c 	.word	0x2000017c

08008030 <malloc>:
 8008030:	4b02      	ldr	r3, [pc, #8]	; (800803c <malloc+0xc>)
 8008032:	4601      	mov	r1, r0
 8008034:	6818      	ldr	r0, [r3, #0]
 8008036:	f000 bbef 	b.w	8008818 <_malloc_r>
 800803a:	bf00      	nop
 800803c:	20000028 	.word	0x20000028

08008040 <memcpy>:
 8008040:	440a      	add	r2, r1
 8008042:	4291      	cmp	r1, r2
 8008044:	f100 33ff 	add.w	r3, r0, #4294967295
 8008048:	d100      	bne.n	800804c <memcpy+0xc>
 800804a:	4770      	bx	lr
 800804c:	b510      	push	{r4, lr}
 800804e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008052:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008056:	4291      	cmp	r1, r2
 8008058:	d1f9      	bne.n	800804e <memcpy+0xe>
 800805a:	bd10      	pop	{r4, pc}

0800805c <_Balloc>:
 800805c:	b570      	push	{r4, r5, r6, lr}
 800805e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008060:	4604      	mov	r4, r0
 8008062:	460d      	mov	r5, r1
 8008064:	b976      	cbnz	r6, 8008084 <_Balloc+0x28>
 8008066:	2010      	movs	r0, #16
 8008068:	f7ff ffe2 	bl	8008030 <malloc>
 800806c:	4602      	mov	r2, r0
 800806e:	6260      	str	r0, [r4, #36]	; 0x24
 8008070:	b920      	cbnz	r0, 800807c <_Balloc+0x20>
 8008072:	4b18      	ldr	r3, [pc, #96]	; (80080d4 <_Balloc+0x78>)
 8008074:	4818      	ldr	r0, [pc, #96]	; (80080d8 <_Balloc+0x7c>)
 8008076:	2166      	movs	r1, #102	; 0x66
 8008078:	f000 fd94 	bl	8008ba4 <__assert_func>
 800807c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008080:	6006      	str	r6, [r0, #0]
 8008082:	60c6      	str	r6, [r0, #12]
 8008084:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8008086:	68f3      	ldr	r3, [r6, #12]
 8008088:	b183      	cbz	r3, 80080ac <_Balloc+0x50>
 800808a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800808c:	68db      	ldr	r3, [r3, #12]
 800808e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008092:	b9b8      	cbnz	r0, 80080c4 <_Balloc+0x68>
 8008094:	2101      	movs	r1, #1
 8008096:	fa01 f605 	lsl.w	r6, r1, r5
 800809a:	1d72      	adds	r2, r6, #5
 800809c:	0092      	lsls	r2, r2, #2
 800809e:	4620      	mov	r0, r4
 80080a0:	f000 fb5a 	bl	8008758 <_calloc_r>
 80080a4:	b160      	cbz	r0, 80080c0 <_Balloc+0x64>
 80080a6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80080aa:	e00e      	b.n	80080ca <_Balloc+0x6e>
 80080ac:	2221      	movs	r2, #33	; 0x21
 80080ae:	2104      	movs	r1, #4
 80080b0:	4620      	mov	r0, r4
 80080b2:	f000 fb51 	bl	8008758 <_calloc_r>
 80080b6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80080b8:	60f0      	str	r0, [r6, #12]
 80080ba:	68db      	ldr	r3, [r3, #12]
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d1e4      	bne.n	800808a <_Balloc+0x2e>
 80080c0:	2000      	movs	r0, #0
 80080c2:	bd70      	pop	{r4, r5, r6, pc}
 80080c4:	6802      	ldr	r2, [r0, #0]
 80080c6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80080ca:	2300      	movs	r3, #0
 80080cc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80080d0:	e7f7      	b.n	80080c2 <_Balloc+0x66>
 80080d2:	bf00      	nop
 80080d4:	080097f9 	.word	0x080097f9
 80080d8:	08009880 	.word	0x08009880

080080dc <_Bfree>:
 80080dc:	b570      	push	{r4, r5, r6, lr}
 80080de:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80080e0:	4605      	mov	r5, r0
 80080e2:	460c      	mov	r4, r1
 80080e4:	b976      	cbnz	r6, 8008104 <_Bfree+0x28>
 80080e6:	2010      	movs	r0, #16
 80080e8:	f7ff ffa2 	bl	8008030 <malloc>
 80080ec:	4602      	mov	r2, r0
 80080ee:	6268      	str	r0, [r5, #36]	; 0x24
 80080f0:	b920      	cbnz	r0, 80080fc <_Bfree+0x20>
 80080f2:	4b09      	ldr	r3, [pc, #36]	; (8008118 <_Bfree+0x3c>)
 80080f4:	4809      	ldr	r0, [pc, #36]	; (800811c <_Bfree+0x40>)
 80080f6:	218a      	movs	r1, #138	; 0x8a
 80080f8:	f000 fd54 	bl	8008ba4 <__assert_func>
 80080fc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008100:	6006      	str	r6, [r0, #0]
 8008102:	60c6      	str	r6, [r0, #12]
 8008104:	b13c      	cbz	r4, 8008116 <_Bfree+0x3a>
 8008106:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008108:	6862      	ldr	r2, [r4, #4]
 800810a:	68db      	ldr	r3, [r3, #12]
 800810c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008110:	6021      	str	r1, [r4, #0]
 8008112:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008116:	bd70      	pop	{r4, r5, r6, pc}
 8008118:	080097f9 	.word	0x080097f9
 800811c:	08009880 	.word	0x08009880

08008120 <__multadd>:
 8008120:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008124:	690e      	ldr	r6, [r1, #16]
 8008126:	4607      	mov	r7, r0
 8008128:	4698      	mov	r8, r3
 800812a:	460c      	mov	r4, r1
 800812c:	f101 0014 	add.w	r0, r1, #20
 8008130:	2300      	movs	r3, #0
 8008132:	6805      	ldr	r5, [r0, #0]
 8008134:	b2a9      	uxth	r1, r5
 8008136:	fb02 8101 	mla	r1, r2, r1, r8
 800813a:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800813e:	0c2d      	lsrs	r5, r5, #16
 8008140:	fb02 c505 	mla	r5, r2, r5, ip
 8008144:	b289      	uxth	r1, r1
 8008146:	3301      	adds	r3, #1
 8008148:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800814c:	429e      	cmp	r6, r3
 800814e:	f840 1b04 	str.w	r1, [r0], #4
 8008152:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8008156:	dcec      	bgt.n	8008132 <__multadd+0x12>
 8008158:	f1b8 0f00 	cmp.w	r8, #0
 800815c:	d022      	beq.n	80081a4 <__multadd+0x84>
 800815e:	68a3      	ldr	r3, [r4, #8]
 8008160:	42b3      	cmp	r3, r6
 8008162:	dc19      	bgt.n	8008198 <__multadd+0x78>
 8008164:	6861      	ldr	r1, [r4, #4]
 8008166:	4638      	mov	r0, r7
 8008168:	3101      	adds	r1, #1
 800816a:	f7ff ff77 	bl	800805c <_Balloc>
 800816e:	4605      	mov	r5, r0
 8008170:	b928      	cbnz	r0, 800817e <__multadd+0x5e>
 8008172:	4602      	mov	r2, r0
 8008174:	4b0d      	ldr	r3, [pc, #52]	; (80081ac <__multadd+0x8c>)
 8008176:	480e      	ldr	r0, [pc, #56]	; (80081b0 <__multadd+0x90>)
 8008178:	21b5      	movs	r1, #181	; 0xb5
 800817a:	f000 fd13 	bl	8008ba4 <__assert_func>
 800817e:	6922      	ldr	r2, [r4, #16]
 8008180:	3202      	adds	r2, #2
 8008182:	f104 010c 	add.w	r1, r4, #12
 8008186:	0092      	lsls	r2, r2, #2
 8008188:	300c      	adds	r0, #12
 800818a:	f7ff ff59 	bl	8008040 <memcpy>
 800818e:	4621      	mov	r1, r4
 8008190:	4638      	mov	r0, r7
 8008192:	f7ff ffa3 	bl	80080dc <_Bfree>
 8008196:	462c      	mov	r4, r5
 8008198:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800819c:	3601      	adds	r6, #1
 800819e:	f8c3 8014 	str.w	r8, [r3, #20]
 80081a2:	6126      	str	r6, [r4, #16]
 80081a4:	4620      	mov	r0, r4
 80081a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80081aa:	bf00      	nop
 80081ac:	0800986f 	.word	0x0800986f
 80081b0:	08009880 	.word	0x08009880

080081b4 <__hi0bits>:
 80081b4:	0c03      	lsrs	r3, r0, #16
 80081b6:	041b      	lsls	r3, r3, #16
 80081b8:	b9d3      	cbnz	r3, 80081f0 <__hi0bits+0x3c>
 80081ba:	0400      	lsls	r0, r0, #16
 80081bc:	2310      	movs	r3, #16
 80081be:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80081c2:	bf04      	itt	eq
 80081c4:	0200      	lsleq	r0, r0, #8
 80081c6:	3308      	addeq	r3, #8
 80081c8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80081cc:	bf04      	itt	eq
 80081ce:	0100      	lsleq	r0, r0, #4
 80081d0:	3304      	addeq	r3, #4
 80081d2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80081d6:	bf04      	itt	eq
 80081d8:	0080      	lsleq	r0, r0, #2
 80081da:	3302      	addeq	r3, #2
 80081dc:	2800      	cmp	r0, #0
 80081de:	db05      	blt.n	80081ec <__hi0bits+0x38>
 80081e0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80081e4:	f103 0301 	add.w	r3, r3, #1
 80081e8:	bf08      	it	eq
 80081ea:	2320      	moveq	r3, #32
 80081ec:	4618      	mov	r0, r3
 80081ee:	4770      	bx	lr
 80081f0:	2300      	movs	r3, #0
 80081f2:	e7e4      	b.n	80081be <__hi0bits+0xa>

080081f4 <__lo0bits>:
 80081f4:	6803      	ldr	r3, [r0, #0]
 80081f6:	f013 0207 	ands.w	r2, r3, #7
 80081fa:	4601      	mov	r1, r0
 80081fc:	d00b      	beq.n	8008216 <__lo0bits+0x22>
 80081fe:	07da      	lsls	r2, r3, #31
 8008200:	d424      	bmi.n	800824c <__lo0bits+0x58>
 8008202:	0798      	lsls	r0, r3, #30
 8008204:	bf49      	itett	mi
 8008206:	085b      	lsrmi	r3, r3, #1
 8008208:	089b      	lsrpl	r3, r3, #2
 800820a:	2001      	movmi	r0, #1
 800820c:	600b      	strmi	r3, [r1, #0]
 800820e:	bf5c      	itt	pl
 8008210:	600b      	strpl	r3, [r1, #0]
 8008212:	2002      	movpl	r0, #2
 8008214:	4770      	bx	lr
 8008216:	b298      	uxth	r0, r3
 8008218:	b9b0      	cbnz	r0, 8008248 <__lo0bits+0x54>
 800821a:	0c1b      	lsrs	r3, r3, #16
 800821c:	2010      	movs	r0, #16
 800821e:	f013 0fff 	tst.w	r3, #255	; 0xff
 8008222:	bf04      	itt	eq
 8008224:	0a1b      	lsreq	r3, r3, #8
 8008226:	3008      	addeq	r0, #8
 8008228:	071a      	lsls	r2, r3, #28
 800822a:	bf04      	itt	eq
 800822c:	091b      	lsreq	r3, r3, #4
 800822e:	3004      	addeq	r0, #4
 8008230:	079a      	lsls	r2, r3, #30
 8008232:	bf04      	itt	eq
 8008234:	089b      	lsreq	r3, r3, #2
 8008236:	3002      	addeq	r0, #2
 8008238:	07da      	lsls	r2, r3, #31
 800823a:	d403      	bmi.n	8008244 <__lo0bits+0x50>
 800823c:	085b      	lsrs	r3, r3, #1
 800823e:	f100 0001 	add.w	r0, r0, #1
 8008242:	d005      	beq.n	8008250 <__lo0bits+0x5c>
 8008244:	600b      	str	r3, [r1, #0]
 8008246:	4770      	bx	lr
 8008248:	4610      	mov	r0, r2
 800824a:	e7e8      	b.n	800821e <__lo0bits+0x2a>
 800824c:	2000      	movs	r0, #0
 800824e:	4770      	bx	lr
 8008250:	2020      	movs	r0, #32
 8008252:	4770      	bx	lr

08008254 <__i2b>:
 8008254:	b510      	push	{r4, lr}
 8008256:	460c      	mov	r4, r1
 8008258:	2101      	movs	r1, #1
 800825a:	f7ff feff 	bl	800805c <_Balloc>
 800825e:	4602      	mov	r2, r0
 8008260:	b928      	cbnz	r0, 800826e <__i2b+0x1a>
 8008262:	4b05      	ldr	r3, [pc, #20]	; (8008278 <__i2b+0x24>)
 8008264:	4805      	ldr	r0, [pc, #20]	; (800827c <__i2b+0x28>)
 8008266:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800826a:	f000 fc9b 	bl	8008ba4 <__assert_func>
 800826e:	2301      	movs	r3, #1
 8008270:	6144      	str	r4, [r0, #20]
 8008272:	6103      	str	r3, [r0, #16]
 8008274:	bd10      	pop	{r4, pc}
 8008276:	bf00      	nop
 8008278:	0800986f 	.word	0x0800986f
 800827c:	08009880 	.word	0x08009880

08008280 <__multiply>:
 8008280:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008284:	4614      	mov	r4, r2
 8008286:	690a      	ldr	r2, [r1, #16]
 8008288:	6923      	ldr	r3, [r4, #16]
 800828a:	429a      	cmp	r2, r3
 800828c:	bfb8      	it	lt
 800828e:	460b      	movlt	r3, r1
 8008290:	460d      	mov	r5, r1
 8008292:	bfbc      	itt	lt
 8008294:	4625      	movlt	r5, r4
 8008296:	461c      	movlt	r4, r3
 8008298:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800829c:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80082a0:	68ab      	ldr	r3, [r5, #8]
 80082a2:	6869      	ldr	r1, [r5, #4]
 80082a4:	eb0a 0709 	add.w	r7, sl, r9
 80082a8:	42bb      	cmp	r3, r7
 80082aa:	b085      	sub	sp, #20
 80082ac:	bfb8      	it	lt
 80082ae:	3101      	addlt	r1, #1
 80082b0:	f7ff fed4 	bl	800805c <_Balloc>
 80082b4:	b930      	cbnz	r0, 80082c4 <__multiply+0x44>
 80082b6:	4602      	mov	r2, r0
 80082b8:	4b42      	ldr	r3, [pc, #264]	; (80083c4 <__multiply+0x144>)
 80082ba:	4843      	ldr	r0, [pc, #268]	; (80083c8 <__multiply+0x148>)
 80082bc:	f240 115d 	movw	r1, #349	; 0x15d
 80082c0:	f000 fc70 	bl	8008ba4 <__assert_func>
 80082c4:	f100 0614 	add.w	r6, r0, #20
 80082c8:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 80082cc:	4633      	mov	r3, r6
 80082ce:	2200      	movs	r2, #0
 80082d0:	4543      	cmp	r3, r8
 80082d2:	d31e      	bcc.n	8008312 <__multiply+0x92>
 80082d4:	f105 0c14 	add.w	ip, r5, #20
 80082d8:	f104 0314 	add.w	r3, r4, #20
 80082dc:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 80082e0:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 80082e4:	9202      	str	r2, [sp, #8]
 80082e6:	ebac 0205 	sub.w	r2, ip, r5
 80082ea:	3a15      	subs	r2, #21
 80082ec:	f022 0203 	bic.w	r2, r2, #3
 80082f0:	3204      	adds	r2, #4
 80082f2:	f105 0115 	add.w	r1, r5, #21
 80082f6:	458c      	cmp	ip, r1
 80082f8:	bf38      	it	cc
 80082fa:	2204      	movcc	r2, #4
 80082fc:	9201      	str	r2, [sp, #4]
 80082fe:	9a02      	ldr	r2, [sp, #8]
 8008300:	9303      	str	r3, [sp, #12]
 8008302:	429a      	cmp	r2, r3
 8008304:	d808      	bhi.n	8008318 <__multiply+0x98>
 8008306:	2f00      	cmp	r7, #0
 8008308:	dc55      	bgt.n	80083b6 <__multiply+0x136>
 800830a:	6107      	str	r7, [r0, #16]
 800830c:	b005      	add	sp, #20
 800830e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008312:	f843 2b04 	str.w	r2, [r3], #4
 8008316:	e7db      	b.n	80082d0 <__multiply+0x50>
 8008318:	f8b3 a000 	ldrh.w	sl, [r3]
 800831c:	f1ba 0f00 	cmp.w	sl, #0
 8008320:	d020      	beq.n	8008364 <__multiply+0xe4>
 8008322:	f105 0e14 	add.w	lr, r5, #20
 8008326:	46b1      	mov	r9, r6
 8008328:	2200      	movs	r2, #0
 800832a:	f85e 4b04 	ldr.w	r4, [lr], #4
 800832e:	f8d9 b000 	ldr.w	fp, [r9]
 8008332:	b2a1      	uxth	r1, r4
 8008334:	fa1f fb8b 	uxth.w	fp, fp
 8008338:	fb0a b101 	mla	r1, sl, r1, fp
 800833c:	4411      	add	r1, r2
 800833e:	f8d9 2000 	ldr.w	r2, [r9]
 8008342:	0c24      	lsrs	r4, r4, #16
 8008344:	0c12      	lsrs	r2, r2, #16
 8008346:	fb0a 2404 	mla	r4, sl, r4, r2
 800834a:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800834e:	b289      	uxth	r1, r1
 8008350:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8008354:	45f4      	cmp	ip, lr
 8008356:	f849 1b04 	str.w	r1, [r9], #4
 800835a:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800835e:	d8e4      	bhi.n	800832a <__multiply+0xaa>
 8008360:	9901      	ldr	r1, [sp, #4]
 8008362:	5072      	str	r2, [r6, r1]
 8008364:	9a03      	ldr	r2, [sp, #12]
 8008366:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800836a:	3304      	adds	r3, #4
 800836c:	f1b9 0f00 	cmp.w	r9, #0
 8008370:	d01f      	beq.n	80083b2 <__multiply+0x132>
 8008372:	6834      	ldr	r4, [r6, #0]
 8008374:	f105 0114 	add.w	r1, r5, #20
 8008378:	46b6      	mov	lr, r6
 800837a:	f04f 0a00 	mov.w	sl, #0
 800837e:	880a      	ldrh	r2, [r1, #0]
 8008380:	f8be b002 	ldrh.w	fp, [lr, #2]
 8008384:	fb09 b202 	mla	r2, r9, r2, fp
 8008388:	4492      	add	sl, r2
 800838a:	b2a4      	uxth	r4, r4
 800838c:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8008390:	f84e 4b04 	str.w	r4, [lr], #4
 8008394:	f851 4b04 	ldr.w	r4, [r1], #4
 8008398:	f8be 2000 	ldrh.w	r2, [lr]
 800839c:	0c24      	lsrs	r4, r4, #16
 800839e:	fb09 2404 	mla	r4, r9, r4, r2
 80083a2:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 80083a6:	458c      	cmp	ip, r1
 80083a8:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80083ac:	d8e7      	bhi.n	800837e <__multiply+0xfe>
 80083ae:	9a01      	ldr	r2, [sp, #4]
 80083b0:	50b4      	str	r4, [r6, r2]
 80083b2:	3604      	adds	r6, #4
 80083b4:	e7a3      	b.n	80082fe <__multiply+0x7e>
 80083b6:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d1a5      	bne.n	800830a <__multiply+0x8a>
 80083be:	3f01      	subs	r7, #1
 80083c0:	e7a1      	b.n	8008306 <__multiply+0x86>
 80083c2:	bf00      	nop
 80083c4:	0800986f 	.word	0x0800986f
 80083c8:	08009880 	.word	0x08009880

080083cc <__pow5mult>:
 80083cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80083d0:	4615      	mov	r5, r2
 80083d2:	f012 0203 	ands.w	r2, r2, #3
 80083d6:	4606      	mov	r6, r0
 80083d8:	460f      	mov	r7, r1
 80083da:	d007      	beq.n	80083ec <__pow5mult+0x20>
 80083dc:	4c25      	ldr	r4, [pc, #148]	; (8008474 <__pow5mult+0xa8>)
 80083de:	3a01      	subs	r2, #1
 80083e0:	2300      	movs	r3, #0
 80083e2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80083e6:	f7ff fe9b 	bl	8008120 <__multadd>
 80083ea:	4607      	mov	r7, r0
 80083ec:	10ad      	asrs	r5, r5, #2
 80083ee:	d03d      	beq.n	800846c <__pow5mult+0xa0>
 80083f0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80083f2:	b97c      	cbnz	r4, 8008414 <__pow5mult+0x48>
 80083f4:	2010      	movs	r0, #16
 80083f6:	f7ff fe1b 	bl	8008030 <malloc>
 80083fa:	4602      	mov	r2, r0
 80083fc:	6270      	str	r0, [r6, #36]	; 0x24
 80083fe:	b928      	cbnz	r0, 800840c <__pow5mult+0x40>
 8008400:	4b1d      	ldr	r3, [pc, #116]	; (8008478 <__pow5mult+0xac>)
 8008402:	481e      	ldr	r0, [pc, #120]	; (800847c <__pow5mult+0xb0>)
 8008404:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8008408:	f000 fbcc 	bl	8008ba4 <__assert_func>
 800840c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008410:	6004      	str	r4, [r0, #0]
 8008412:	60c4      	str	r4, [r0, #12]
 8008414:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8008418:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800841c:	b94c      	cbnz	r4, 8008432 <__pow5mult+0x66>
 800841e:	f240 2171 	movw	r1, #625	; 0x271
 8008422:	4630      	mov	r0, r6
 8008424:	f7ff ff16 	bl	8008254 <__i2b>
 8008428:	2300      	movs	r3, #0
 800842a:	f8c8 0008 	str.w	r0, [r8, #8]
 800842e:	4604      	mov	r4, r0
 8008430:	6003      	str	r3, [r0, #0]
 8008432:	f04f 0900 	mov.w	r9, #0
 8008436:	07eb      	lsls	r3, r5, #31
 8008438:	d50a      	bpl.n	8008450 <__pow5mult+0x84>
 800843a:	4639      	mov	r1, r7
 800843c:	4622      	mov	r2, r4
 800843e:	4630      	mov	r0, r6
 8008440:	f7ff ff1e 	bl	8008280 <__multiply>
 8008444:	4639      	mov	r1, r7
 8008446:	4680      	mov	r8, r0
 8008448:	4630      	mov	r0, r6
 800844a:	f7ff fe47 	bl	80080dc <_Bfree>
 800844e:	4647      	mov	r7, r8
 8008450:	106d      	asrs	r5, r5, #1
 8008452:	d00b      	beq.n	800846c <__pow5mult+0xa0>
 8008454:	6820      	ldr	r0, [r4, #0]
 8008456:	b938      	cbnz	r0, 8008468 <__pow5mult+0x9c>
 8008458:	4622      	mov	r2, r4
 800845a:	4621      	mov	r1, r4
 800845c:	4630      	mov	r0, r6
 800845e:	f7ff ff0f 	bl	8008280 <__multiply>
 8008462:	6020      	str	r0, [r4, #0]
 8008464:	f8c0 9000 	str.w	r9, [r0]
 8008468:	4604      	mov	r4, r0
 800846a:	e7e4      	b.n	8008436 <__pow5mult+0x6a>
 800846c:	4638      	mov	r0, r7
 800846e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008472:	bf00      	nop
 8008474:	080099d0 	.word	0x080099d0
 8008478:	080097f9 	.word	0x080097f9
 800847c:	08009880 	.word	0x08009880

08008480 <__lshift>:
 8008480:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008484:	460c      	mov	r4, r1
 8008486:	6849      	ldr	r1, [r1, #4]
 8008488:	6923      	ldr	r3, [r4, #16]
 800848a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800848e:	68a3      	ldr	r3, [r4, #8]
 8008490:	4607      	mov	r7, r0
 8008492:	4691      	mov	r9, r2
 8008494:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008498:	f108 0601 	add.w	r6, r8, #1
 800849c:	42b3      	cmp	r3, r6
 800849e:	db0b      	blt.n	80084b8 <__lshift+0x38>
 80084a0:	4638      	mov	r0, r7
 80084a2:	f7ff fddb 	bl	800805c <_Balloc>
 80084a6:	4605      	mov	r5, r0
 80084a8:	b948      	cbnz	r0, 80084be <__lshift+0x3e>
 80084aa:	4602      	mov	r2, r0
 80084ac:	4b28      	ldr	r3, [pc, #160]	; (8008550 <__lshift+0xd0>)
 80084ae:	4829      	ldr	r0, [pc, #164]	; (8008554 <__lshift+0xd4>)
 80084b0:	f240 11d9 	movw	r1, #473	; 0x1d9
 80084b4:	f000 fb76 	bl	8008ba4 <__assert_func>
 80084b8:	3101      	adds	r1, #1
 80084ba:	005b      	lsls	r3, r3, #1
 80084bc:	e7ee      	b.n	800849c <__lshift+0x1c>
 80084be:	2300      	movs	r3, #0
 80084c0:	f100 0114 	add.w	r1, r0, #20
 80084c4:	f100 0210 	add.w	r2, r0, #16
 80084c8:	4618      	mov	r0, r3
 80084ca:	4553      	cmp	r3, sl
 80084cc:	db33      	blt.n	8008536 <__lshift+0xb6>
 80084ce:	6920      	ldr	r0, [r4, #16]
 80084d0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80084d4:	f104 0314 	add.w	r3, r4, #20
 80084d8:	f019 091f 	ands.w	r9, r9, #31
 80084dc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80084e0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80084e4:	d02b      	beq.n	800853e <__lshift+0xbe>
 80084e6:	f1c9 0e20 	rsb	lr, r9, #32
 80084ea:	468a      	mov	sl, r1
 80084ec:	2200      	movs	r2, #0
 80084ee:	6818      	ldr	r0, [r3, #0]
 80084f0:	fa00 f009 	lsl.w	r0, r0, r9
 80084f4:	4302      	orrs	r2, r0
 80084f6:	f84a 2b04 	str.w	r2, [sl], #4
 80084fa:	f853 2b04 	ldr.w	r2, [r3], #4
 80084fe:	459c      	cmp	ip, r3
 8008500:	fa22 f20e 	lsr.w	r2, r2, lr
 8008504:	d8f3      	bhi.n	80084ee <__lshift+0x6e>
 8008506:	ebac 0304 	sub.w	r3, ip, r4
 800850a:	3b15      	subs	r3, #21
 800850c:	f023 0303 	bic.w	r3, r3, #3
 8008510:	3304      	adds	r3, #4
 8008512:	f104 0015 	add.w	r0, r4, #21
 8008516:	4584      	cmp	ip, r0
 8008518:	bf38      	it	cc
 800851a:	2304      	movcc	r3, #4
 800851c:	50ca      	str	r2, [r1, r3]
 800851e:	b10a      	cbz	r2, 8008524 <__lshift+0xa4>
 8008520:	f108 0602 	add.w	r6, r8, #2
 8008524:	3e01      	subs	r6, #1
 8008526:	4638      	mov	r0, r7
 8008528:	612e      	str	r6, [r5, #16]
 800852a:	4621      	mov	r1, r4
 800852c:	f7ff fdd6 	bl	80080dc <_Bfree>
 8008530:	4628      	mov	r0, r5
 8008532:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008536:	f842 0f04 	str.w	r0, [r2, #4]!
 800853a:	3301      	adds	r3, #1
 800853c:	e7c5      	b.n	80084ca <__lshift+0x4a>
 800853e:	3904      	subs	r1, #4
 8008540:	f853 2b04 	ldr.w	r2, [r3], #4
 8008544:	f841 2f04 	str.w	r2, [r1, #4]!
 8008548:	459c      	cmp	ip, r3
 800854a:	d8f9      	bhi.n	8008540 <__lshift+0xc0>
 800854c:	e7ea      	b.n	8008524 <__lshift+0xa4>
 800854e:	bf00      	nop
 8008550:	0800986f 	.word	0x0800986f
 8008554:	08009880 	.word	0x08009880

08008558 <__mcmp>:
 8008558:	b530      	push	{r4, r5, lr}
 800855a:	6902      	ldr	r2, [r0, #16]
 800855c:	690c      	ldr	r4, [r1, #16]
 800855e:	1b12      	subs	r2, r2, r4
 8008560:	d10e      	bne.n	8008580 <__mcmp+0x28>
 8008562:	f100 0314 	add.w	r3, r0, #20
 8008566:	3114      	adds	r1, #20
 8008568:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800856c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8008570:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8008574:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8008578:	42a5      	cmp	r5, r4
 800857a:	d003      	beq.n	8008584 <__mcmp+0x2c>
 800857c:	d305      	bcc.n	800858a <__mcmp+0x32>
 800857e:	2201      	movs	r2, #1
 8008580:	4610      	mov	r0, r2
 8008582:	bd30      	pop	{r4, r5, pc}
 8008584:	4283      	cmp	r3, r0
 8008586:	d3f3      	bcc.n	8008570 <__mcmp+0x18>
 8008588:	e7fa      	b.n	8008580 <__mcmp+0x28>
 800858a:	f04f 32ff 	mov.w	r2, #4294967295
 800858e:	e7f7      	b.n	8008580 <__mcmp+0x28>

08008590 <__mdiff>:
 8008590:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008594:	460c      	mov	r4, r1
 8008596:	4606      	mov	r6, r0
 8008598:	4611      	mov	r1, r2
 800859a:	4620      	mov	r0, r4
 800859c:	4617      	mov	r7, r2
 800859e:	f7ff ffdb 	bl	8008558 <__mcmp>
 80085a2:	1e05      	subs	r5, r0, #0
 80085a4:	d110      	bne.n	80085c8 <__mdiff+0x38>
 80085a6:	4629      	mov	r1, r5
 80085a8:	4630      	mov	r0, r6
 80085aa:	f7ff fd57 	bl	800805c <_Balloc>
 80085ae:	b930      	cbnz	r0, 80085be <__mdiff+0x2e>
 80085b0:	4b39      	ldr	r3, [pc, #228]	; (8008698 <__mdiff+0x108>)
 80085b2:	4602      	mov	r2, r0
 80085b4:	f240 2132 	movw	r1, #562	; 0x232
 80085b8:	4838      	ldr	r0, [pc, #224]	; (800869c <__mdiff+0x10c>)
 80085ba:	f000 faf3 	bl	8008ba4 <__assert_func>
 80085be:	2301      	movs	r3, #1
 80085c0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80085c4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80085c8:	bfa4      	itt	ge
 80085ca:	463b      	movge	r3, r7
 80085cc:	4627      	movge	r7, r4
 80085ce:	4630      	mov	r0, r6
 80085d0:	6879      	ldr	r1, [r7, #4]
 80085d2:	bfa6      	itte	ge
 80085d4:	461c      	movge	r4, r3
 80085d6:	2500      	movge	r5, #0
 80085d8:	2501      	movlt	r5, #1
 80085da:	f7ff fd3f 	bl	800805c <_Balloc>
 80085de:	b920      	cbnz	r0, 80085ea <__mdiff+0x5a>
 80085e0:	4b2d      	ldr	r3, [pc, #180]	; (8008698 <__mdiff+0x108>)
 80085e2:	4602      	mov	r2, r0
 80085e4:	f44f 7110 	mov.w	r1, #576	; 0x240
 80085e8:	e7e6      	b.n	80085b8 <__mdiff+0x28>
 80085ea:	693e      	ldr	r6, [r7, #16]
 80085ec:	60c5      	str	r5, [r0, #12]
 80085ee:	6925      	ldr	r5, [r4, #16]
 80085f0:	f107 0114 	add.w	r1, r7, #20
 80085f4:	f104 0914 	add.w	r9, r4, #20
 80085f8:	f100 0e14 	add.w	lr, r0, #20
 80085fc:	f107 0210 	add.w	r2, r7, #16
 8008600:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8008604:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8008608:	46f2      	mov	sl, lr
 800860a:	2700      	movs	r7, #0
 800860c:	f859 3b04 	ldr.w	r3, [r9], #4
 8008610:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8008614:	fa1f f883 	uxth.w	r8, r3
 8008618:	fa17 f78b 	uxtah	r7, r7, fp
 800861c:	0c1b      	lsrs	r3, r3, #16
 800861e:	eba7 0808 	sub.w	r8, r7, r8
 8008622:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8008626:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800862a:	fa1f f888 	uxth.w	r8, r8
 800862e:	141f      	asrs	r7, r3, #16
 8008630:	454d      	cmp	r5, r9
 8008632:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8008636:	f84a 3b04 	str.w	r3, [sl], #4
 800863a:	d8e7      	bhi.n	800860c <__mdiff+0x7c>
 800863c:	1b2b      	subs	r3, r5, r4
 800863e:	3b15      	subs	r3, #21
 8008640:	f023 0303 	bic.w	r3, r3, #3
 8008644:	3304      	adds	r3, #4
 8008646:	3415      	adds	r4, #21
 8008648:	42a5      	cmp	r5, r4
 800864a:	bf38      	it	cc
 800864c:	2304      	movcc	r3, #4
 800864e:	4419      	add	r1, r3
 8008650:	4473      	add	r3, lr
 8008652:	469e      	mov	lr, r3
 8008654:	460d      	mov	r5, r1
 8008656:	4565      	cmp	r5, ip
 8008658:	d30e      	bcc.n	8008678 <__mdiff+0xe8>
 800865a:	f10c 0203 	add.w	r2, ip, #3
 800865e:	1a52      	subs	r2, r2, r1
 8008660:	f022 0203 	bic.w	r2, r2, #3
 8008664:	3903      	subs	r1, #3
 8008666:	458c      	cmp	ip, r1
 8008668:	bf38      	it	cc
 800866a:	2200      	movcc	r2, #0
 800866c:	441a      	add	r2, r3
 800866e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8008672:	b17b      	cbz	r3, 8008694 <__mdiff+0x104>
 8008674:	6106      	str	r6, [r0, #16]
 8008676:	e7a5      	b.n	80085c4 <__mdiff+0x34>
 8008678:	f855 8b04 	ldr.w	r8, [r5], #4
 800867c:	fa17 f488 	uxtah	r4, r7, r8
 8008680:	1422      	asrs	r2, r4, #16
 8008682:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8008686:	b2a4      	uxth	r4, r4
 8008688:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800868c:	f84e 4b04 	str.w	r4, [lr], #4
 8008690:	1417      	asrs	r7, r2, #16
 8008692:	e7e0      	b.n	8008656 <__mdiff+0xc6>
 8008694:	3e01      	subs	r6, #1
 8008696:	e7ea      	b.n	800866e <__mdiff+0xde>
 8008698:	0800986f 	.word	0x0800986f
 800869c:	08009880 	.word	0x08009880

080086a0 <__d2b>:
 80086a0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80086a4:	4689      	mov	r9, r1
 80086a6:	2101      	movs	r1, #1
 80086a8:	ec57 6b10 	vmov	r6, r7, d0
 80086ac:	4690      	mov	r8, r2
 80086ae:	f7ff fcd5 	bl	800805c <_Balloc>
 80086b2:	4604      	mov	r4, r0
 80086b4:	b930      	cbnz	r0, 80086c4 <__d2b+0x24>
 80086b6:	4602      	mov	r2, r0
 80086b8:	4b25      	ldr	r3, [pc, #148]	; (8008750 <__d2b+0xb0>)
 80086ba:	4826      	ldr	r0, [pc, #152]	; (8008754 <__d2b+0xb4>)
 80086bc:	f240 310a 	movw	r1, #778	; 0x30a
 80086c0:	f000 fa70 	bl	8008ba4 <__assert_func>
 80086c4:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80086c8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80086cc:	bb35      	cbnz	r5, 800871c <__d2b+0x7c>
 80086ce:	2e00      	cmp	r6, #0
 80086d0:	9301      	str	r3, [sp, #4]
 80086d2:	d028      	beq.n	8008726 <__d2b+0x86>
 80086d4:	4668      	mov	r0, sp
 80086d6:	9600      	str	r6, [sp, #0]
 80086d8:	f7ff fd8c 	bl	80081f4 <__lo0bits>
 80086dc:	9900      	ldr	r1, [sp, #0]
 80086de:	b300      	cbz	r0, 8008722 <__d2b+0x82>
 80086e0:	9a01      	ldr	r2, [sp, #4]
 80086e2:	f1c0 0320 	rsb	r3, r0, #32
 80086e6:	fa02 f303 	lsl.w	r3, r2, r3
 80086ea:	430b      	orrs	r3, r1
 80086ec:	40c2      	lsrs	r2, r0
 80086ee:	6163      	str	r3, [r4, #20]
 80086f0:	9201      	str	r2, [sp, #4]
 80086f2:	9b01      	ldr	r3, [sp, #4]
 80086f4:	61a3      	str	r3, [r4, #24]
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	bf14      	ite	ne
 80086fa:	2202      	movne	r2, #2
 80086fc:	2201      	moveq	r2, #1
 80086fe:	6122      	str	r2, [r4, #16]
 8008700:	b1d5      	cbz	r5, 8008738 <__d2b+0x98>
 8008702:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8008706:	4405      	add	r5, r0
 8008708:	f8c9 5000 	str.w	r5, [r9]
 800870c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008710:	f8c8 0000 	str.w	r0, [r8]
 8008714:	4620      	mov	r0, r4
 8008716:	b003      	add	sp, #12
 8008718:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800871c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008720:	e7d5      	b.n	80086ce <__d2b+0x2e>
 8008722:	6161      	str	r1, [r4, #20]
 8008724:	e7e5      	b.n	80086f2 <__d2b+0x52>
 8008726:	a801      	add	r0, sp, #4
 8008728:	f7ff fd64 	bl	80081f4 <__lo0bits>
 800872c:	9b01      	ldr	r3, [sp, #4]
 800872e:	6163      	str	r3, [r4, #20]
 8008730:	2201      	movs	r2, #1
 8008732:	6122      	str	r2, [r4, #16]
 8008734:	3020      	adds	r0, #32
 8008736:	e7e3      	b.n	8008700 <__d2b+0x60>
 8008738:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800873c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008740:	f8c9 0000 	str.w	r0, [r9]
 8008744:	6918      	ldr	r0, [r3, #16]
 8008746:	f7ff fd35 	bl	80081b4 <__hi0bits>
 800874a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800874e:	e7df      	b.n	8008710 <__d2b+0x70>
 8008750:	0800986f 	.word	0x0800986f
 8008754:	08009880 	.word	0x08009880

08008758 <_calloc_r>:
 8008758:	b513      	push	{r0, r1, r4, lr}
 800875a:	434a      	muls	r2, r1
 800875c:	4611      	mov	r1, r2
 800875e:	9201      	str	r2, [sp, #4]
 8008760:	f000 f85a 	bl	8008818 <_malloc_r>
 8008764:	4604      	mov	r4, r0
 8008766:	b118      	cbz	r0, 8008770 <_calloc_r+0x18>
 8008768:	9a01      	ldr	r2, [sp, #4]
 800876a:	2100      	movs	r1, #0
 800876c:	f7fe f952 	bl	8006a14 <memset>
 8008770:	4620      	mov	r0, r4
 8008772:	b002      	add	sp, #8
 8008774:	bd10      	pop	{r4, pc}
	...

08008778 <_free_r>:
 8008778:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800877a:	2900      	cmp	r1, #0
 800877c:	d048      	beq.n	8008810 <_free_r+0x98>
 800877e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008782:	9001      	str	r0, [sp, #4]
 8008784:	2b00      	cmp	r3, #0
 8008786:	f1a1 0404 	sub.w	r4, r1, #4
 800878a:	bfb8      	it	lt
 800878c:	18e4      	addlt	r4, r4, r3
 800878e:	f000 fa65 	bl	8008c5c <__malloc_lock>
 8008792:	4a20      	ldr	r2, [pc, #128]	; (8008814 <_free_r+0x9c>)
 8008794:	9801      	ldr	r0, [sp, #4]
 8008796:	6813      	ldr	r3, [r2, #0]
 8008798:	4615      	mov	r5, r2
 800879a:	b933      	cbnz	r3, 80087aa <_free_r+0x32>
 800879c:	6063      	str	r3, [r4, #4]
 800879e:	6014      	str	r4, [r2, #0]
 80087a0:	b003      	add	sp, #12
 80087a2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80087a6:	f000 ba5f 	b.w	8008c68 <__malloc_unlock>
 80087aa:	42a3      	cmp	r3, r4
 80087ac:	d90b      	bls.n	80087c6 <_free_r+0x4e>
 80087ae:	6821      	ldr	r1, [r4, #0]
 80087b0:	1862      	adds	r2, r4, r1
 80087b2:	4293      	cmp	r3, r2
 80087b4:	bf04      	itt	eq
 80087b6:	681a      	ldreq	r2, [r3, #0]
 80087b8:	685b      	ldreq	r3, [r3, #4]
 80087ba:	6063      	str	r3, [r4, #4]
 80087bc:	bf04      	itt	eq
 80087be:	1852      	addeq	r2, r2, r1
 80087c0:	6022      	streq	r2, [r4, #0]
 80087c2:	602c      	str	r4, [r5, #0]
 80087c4:	e7ec      	b.n	80087a0 <_free_r+0x28>
 80087c6:	461a      	mov	r2, r3
 80087c8:	685b      	ldr	r3, [r3, #4]
 80087ca:	b10b      	cbz	r3, 80087d0 <_free_r+0x58>
 80087cc:	42a3      	cmp	r3, r4
 80087ce:	d9fa      	bls.n	80087c6 <_free_r+0x4e>
 80087d0:	6811      	ldr	r1, [r2, #0]
 80087d2:	1855      	adds	r5, r2, r1
 80087d4:	42a5      	cmp	r5, r4
 80087d6:	d10b      	bne.n	80087f0 <_free_r+0x78>
 80087d8:	6824      	ldr	r4, [r4, #0]
 80087da:	4421      	add	r1, r4
 80087dc:	1854      	adds	r4, r2, r1
 80087de:	42a3      	cmp	r3, r4
 80087e0:	6011      	str	r1, [r2, #0]
 80087e2:	d1dd      	bne.n	80087a0 <_free_r+0x28>
 80087e4:	681c      	ldr	r4, [r3, #0]
 80087e6:	685b      	ldr	r3, [r3, #4]
 80087e8:	6053      	str	r3, [r2, #4]
 80087ea:	4421      	add	r1, r4
 80087ec:	6011      	str	r1, [r2, #0]
 80087ee:	e7d7      	b.n	80087a0 <_free_r+0x28>
 80087f0:	d902      	bls.n	80087f8 <_free_r+0x80>
 80087f2:	230c      	movs	r3, #12
 80087f4:	6003      	str	r3, [r0, #0]
 80087f6:	e7d3      	b.n	80087a0 <_free_r+0x28>
 80087f8:	6825      	ldr	r5, [r4, #0]
 80087fa:	1961      	adds	r1, r4, r5
 80087fc:	428b      	cmp	r3, r1
 80087fe:	bf04      	itt	eq
 8008800:	6819      	ldreq	r1, [r3, #0]
 8008802:	685b      	ldreq	r3, [r3, #4]
 8008804:	6063      	str	r3, [r4, #4]
 8008806:	bf04      	itt	eq
 8008808:	1949      	addeq	r1, r1, r5
 800880a:	6021      	streq	r1, [r4, #0]
 800880c:	6054      	str	r4, [r2, #4]
 800880e:	e7c7      	b.n	80087a0 <_free_r+0x28>
 8008810:	b003      	add	sp, #12
 8008812:	bd30      	pop	{r4, r5, pc}
 8008814:	20000220 	.word	0x20000220

08008818 <_malloc_r>:
 8008818:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800881a:	1ccd      	adds	r5, r1, #3
 800881c:	f025 0503 	bic.w	r5, r5, #3
 8008820:	3508      	adds	r5, #8
 8008822:	2d0c      	cmp	r5, #12
 8008824:	bf38      	it	cc
 8008826:	250c      	movcc	r5, #12
 8008828:	2d00      	cmp	r5, #0
 800882a:	4606      	mov	r6, r0
 800882c:	db01      	blt.n	8008832 <_malloc_r+0x1a>
 800882e:	42a9      	cmp	r1, r5
 8008830:	d903      	bls.n	800883a <_malloc_r+0x22>
 8008832:	230c      	movs	r3, #12
 8008834:	6033      	str	r3, [r6, #0]
 8008836:	2000      	movs	r0, #0
 8008838:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800883a:	f000 fa0f 	bl	8008c5c <__malloc_lock>
 800883e:	4921      	ldr	r1, [pc, #132]	; (80088c4 <_malloc_r+0xac>)
 8008840:	680a      	ldr	r2, [r1, #0]
 8008842:	4614      	mov	r4, r2
 8008844:	b99c      	cbnz	r4, 800886e <_malloc_r+0x56>
 8008846:	4f20      	ldr	r7, [pc, #128]	; (80088c8 <_malloc_r+0xb0>)
 8008848:	683b      	ldr	r3, [r7, #0]
 800884a:	b923      	cbnz	r3, 8008856 <_malloc_r+0x3e>
 800884c:	4621      	mov	r1, r4
 800884e:	4630      	mov	r0, r6
 8008850:	f000 f998 	bl	8008b84 <_sbrk_r>
 8008854:	6038      	str	r0, [r7, #0]
 8008856:	4629      	mov	r1, r5
 8008858:	4630      	mov	r0, r6
 800885a:	f000 f993 	bl	8008b84 <_sbrk_r>
 800885e:	1c43      	adds	r3, r0, #1
 8008860:	d123      	bne.n	80088aa <_malloc_r+0x92>
 8008862:	230c      	movs	r3, #12
 8008864:	6033      	str	r3, [r6, #0]
 8008866:	4630      	mov	r0, r6
 8008868:	f000 f9fe 	bl	8008c68 <__malloc_unlock>
 800886c:	e7e3      	b.n	8008836 <_malloc_r+0x1e>
 800886e:	6823      	ldr	r3, [r4, #0]
 8008870:	1b5b      	subs	r3, r3, r5
 8008872:	d417      	bmi.n	80088a4 <_malloc_r+0x8c>
 8008874:	2b0b      	cmp	r3, #11
 8008876:	d903      	bls.n	8008880 <_malloc_r+0x68>
 8008878:	6023      	str	r3, [r4, #0]
 800887a:	441c      	add	r4, r3
 800887c:	6025      	str	r5, [r4, #0]
 800887e:	e004      	b.n	800888a <_malloc_r+0x72>
 8008880:	6863      	ldr	r3, [r4, #4]
 8008882:	42a2      	cmp	r2, r4
 8008884:	bf0c      	ite	eq
 8008886:	600b      	streq	r3, [r1, #0]
 8008888:	6053      	strne	r3, [r2, #4]
 800888a:	4630      	mov	r0, r6
 800888c:	f000 f9ec 	bl	8008c68 <__malloc_unlock>
 8008890:	f104 000b 	add.w	r0, r4, #11
 8008894:	1d23      	adds	r3, r4, #4
 8008896:	f020 0007 	bic.w	r0, r0, #7
 800889a:	1ac2      	subs	r2, r0, r3
 800889c:	d0cc      	beq.n	8008838 <_malloc_r+0x20>
 800889e:	1a1b      	subs	r3, r3, r0
 80088a0:	50a3      	str	r3, [r4, r2]
 80088a2:	e7c9      	b.n	8008838 <_malloc_r+0x20>
 80088a4:	4622      	mov	r2, r4
 80088a6:	6864      	ldr	r4, [r4, #4]
 80088a8:	e7cc      	b.n	8008844 <_malloc_r+0x2c>
 80088aa:	1cc4      	adds	r4, r0, #3
 80088ac:	f024 0403 	bic.w	r4, r4, #3
 80088b0:	42a0      	cmp	r0, r4
 80088b2:	d0e3      	beq.n	800887c <_malloc_r+0x64>
 80088b4:	1a21      	subs	r1, r4, r0
 80088b6:	4630      	mov	r0, r6
 80088b8:	f000 f964 	bl	8008b84 <_sbrk_r>
 80088bc:	3001      	adds	r0, #1
 80088be:	d1dd      	bne.n	800887c <_malloc_r+0x64>
 80088c0:	e7cf      	b.n	8008862 <_malloc_r+0x4a>
 80088c2:	bf00      	nop
 80088c4:	20000220 	.word	0x20000220
 80088c8:	20000224 	.word	0x20000224

080088cc <__ssputs_r>:
 80088cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80088d0:	688e      	ldr	r6, [r1, #8]
 80088d2:	429e      	cmp	r6, r3
 80088d4:	4682      	mov	sl, r0
 80088d6:	460c      	mov	r4, r1
 80088d8:	4690      	mov	r8, r2
 80088da:	461f      	mov	r7, r3
 80088dc:	d838      	bhi.n	8008950 <__ssputs_r+0x84>
 80088de:	898a      	ldrh	r2, [r1, #12]
 80088e0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80088e4:	d032      	beq.n	800894c <__ssputs_r+0x80>
 80088e6:	6825      	ldr	r5, [r4, #0]
 80088e8:	6909      	ldr	r1, [r1, #16]
 80088ea:	eba5 0901 	sub.w	r9, r5, r1
 80088ee:	6965      	ldr	r5, [r4, #20]
 80088f0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80088f4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80088f8:	3301      	adds	r3, #1
 80088fa:	444b      	add	r3, r9
 80088fc:	106d      	asrs	r5, r5, #1
 80088fe:	429d      	cmp	r5, r3
 8008900:	bf38      	it	cc
 8008902:	461d      	movcc	r5, r3
 8008904:	0553      	lsls	r3, r2, #21
 8008906:	d531      	bpl.n	800896c <__ssputs_r+0xa0>
 8008908:	4629      	mov	r1, r5
 800890a:	f7ff ff85 	bl	8008818 <_malloc_r>
 800890e:	4606      	mov	r6, r0
 8008910:	b950      	cbnz	r0, 8008928 <__ssputs_r+0x5c>
 8008912:	230c      	movs	r3, #12
 8008914:	f8ca 3000 	str.w	r3, [sl]
 8008918:	89a3      	ldrh	r3, [r4, #12]
 800891a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800891e:	81a3      	strh	r3, [r4, #12]
 8008920:	f04f 30ff 	mov.w	r0, #4294967295
 8008924:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008928:	6921      	ldr	r1, [r4, #16]
 800892a:	464a      	mov	r2, r9
 800892c:	f7ff fb88 	bl	8008040 <memcpy>
 8008930:	89a3      	ldrh	r3, [r4, #12]
 8008932:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008936:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800893a:	81a3      	strh	r3, [r4, #12]
 800893c:	6126      	str	r6, [r4, #16]
 800893e:	6165      	str	r5, [r4, #20]
 8008940:	444e      	add	r6, r9
 8008942:	eba5 0509 	sub.w	r5, r5, r9
 8008946:	6026      	str	r6, [r4, #0]
 8008948:	60a5      	str	r5, [r4, #8]
 800894a:	463e      	mov	r6, r7
 800894c:	42be      	cmp	r6, r7
 800894e:	d900      	bls.n	8008952 <__ssputs_r+0x86>
 8008950:	463e      	mov	r6, r7
 8008952:	4632      	mov	r2, r6
 8008954:	6820      	ldr	r0, [r4, #0]
 8008956:	4641      	mov	r1, r8
 8008958:	f000 f966 	bl	8008c28 <memmove>
 800895c:	68a3      	ldr	r3, [r4, #8]
 800895e:	6822      	ldr	r2, [r4, #0]
 8008960:	1b9b      	subs	r3, r3, r6
 8008962:	4432      	add	r2, r6
 8008964:	60a3      	str	r3, [r4, #8]
 8008966:	6022      	str	r2, [r4, #0]
 8008968:	2000      	movs	r0, #0
 800896a:	e7db      	b.n	8008924 <__ssputs_r+0x58>
 800896c:	462a      	mov	r2, r5
 800896e:	f000 f981 	bl	8008c74 <_realloc_r>
 8008972:	4606      	mov	r6, r0
 8008974:	2800      	cmp	r0, #0
 8008976:	d1e1      	bne.n	800893c <__ssputs_r+0x70>
 8008978:	6921      	ldr	r1, [r4, #16]
 800897a:	4650      	mov	r0, sl
 800897c:	f7ff fefc 	bl	8008778 <_free_r>
 8008980:	e7c7      	b.n	8008912 <__ssputs_r+0x46>
	...

08008984 <_svfiprintf_r>:
 8008984:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008988:	4698      	mov	r8, r3
 800898a:	898b      	ldrh	r3, [r1, #12]
 800898c:	061b      	lsls	r3, r3, #24
 800898e:	b09d      	sub	sp, #116	; 0x74
 8008990:	4607      	mov	r7, r0
 8008992:	460d      	mov	r5, r1
 8008994:	4614      	mov	r4, r2
 8008996:	d50e      	bpl.n	80089b6 <_svfiprintf_r+0x32>
 8008998:	690b      	ldr	r3, [r1, #16]
 800899a:	b963      	cbnz	r3, 80089b6 <_svfiprintf_r+0x32>
 800899c:	2140      	movs	r1, #64	; 0x40
 800899e:	f7ff ff3b 	bl	8008818 <_malloc_r>
 80089a2:	6028      	str	r0, [r5, #0]
 80089a4:	6128      	str	r0, [r5, #16]
 80089a6:	b920      	cbnz	r0, 80089b2 <_svfiprintf_r+0x2e>
 80089a8:	230c      	movs	r3, #12
 80089aa:	603b      	str	r3, [r7, #0]
 80089ac:	f04f 30ff 	mov.w	r0, #4294967295
 80089b0:	e0d1      	b.n	8008b56 <_svfiprintf_r+0x1d2>
 80089b2:	2340      	movs	r3, #64	; 0x40
 80089b4:	616b      	str	r3, [r5, #20]
 80089b6:	2300      	movs	r3, #0
 80089b8:	9309      	str	r3, [sp, #36]	; 0x24
 80089ba:	2320      	movs	r3, #32
 80089bc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80089c0:	f8cd 800c 	str.w	r8, [sp, #12]
 80089c4:	2330      	movs	r3, #48	; 0x30
 80089c6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8008b70 <_svfiprintf_r+0x1ec>
 80089ca:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80089ce:	f04f 0901 	mov.w	r9, #1
 80089d2:	4623      	mov	r3, r4
 80089d4:	469a      	mov	sl, r3
 80089d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80089da:	b10a      	cbz	r2, 80089e0 <_svfiprintf_r+0x5c>
 80089dc:	2a25      	cmp	r2, #37	; 0x25
 80089de:	d1f9      	bne.n	80089d4 <_svfiprintf_r+0x50>
 80089e0:	ebba 0b04 	subs.w	fp, sl, r4
 80089e4:	d00b      	beq.n	80089fe <_svfiprintf_r+0x7a>
 80089e6:	465b      	mov	r3, fp
 80089e8:	4622      	mov	r2, r4
 80089ea:	4629      	mov	r1, r5
 80089ec:	4638      	mov	r0, r7
 80089ee:	f7ff ff6d 	bl	80088cc <__ssputs_r>
 80089f2:	3001      	adds	r0, #1
 80089f4:	f000 80aa 	beq.w	8008b4c <_svfiprintf_r+0x1c8>
 80089f8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80089fa:	445a      	add	r2, fp
 80089fc:	9209      	str	r2, [sp, #36]	; 0x24
 80089fe:	f89a 3000 	ldrb.w	r3, [sl]
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	f000 80a2 	beq.w	8008b4c <_svfiprintf_r+0x1c8>
 8008a08:	2300      	movs	r3, #0
 8008a0a:	f04f 32ff 	mov.w	r2, #4294967295
 8008a0e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008a12:	f10a 0a01 	add.w	sl, sl, #1
 8008a16:	9304      	str	r3, [sp, #16]
 8008a18:	9307      	str	r3, [sp, #28]
 8008a1a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008a1e:	931a      	str	r3, [sp, #104]	; 0x68
 8008a20:	4654      	mov	r4, sl
 8008a22:	2205      	movs	r2, #5
 8008a24:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008a28:	4851      	ldr	r0, [pc, #324]	; (8008b70 <_svfiprintf_r+0x1ec>)
 8008a2a:	f7f7 fbf9 	bl	8000220 <memchr>
 8008a2e:	9a04      	ldr	r2, [sp, #16]
 8008a30:	b9d8      	cbnz	r0, 8008a6a <_svfiprintf_r+0xe6>
 8008a32:	06d0      	lsls	r0, r2, #27
 8008a34:	bf44      	itt	mi
 8008a36:	2320      	movmi	r3, #32
 8008a38:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008a3c:	0711      	lsls	r1, r2, #28
 8008a3e:	bf44      	itt	mi
 8008a40:	232b      	movmi	r3, #43	; 0x2b
 8008a42:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008a46:	f89a 3000 	ldrb.w	r3, [sl]
 8008a4a:	2b2a      	cmp	r3, #42	; 0x2a
 8008a4c:	d015      	beq.n	8008a7a <_svfiprintf_r+0xf6>
 8008a4e:	9a07      	ldr	r2, [sp, #28]
 8008a50:	4654      	mov	r4, sl
 8008a52:	2000      	movs	r0, #0
 8008a54:	f04f 0c0a 	mov.w	ip, #10
 8008a58:	4621      	mov	r1, r4
 8008a5a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008a5e:	3b30      	subs	r3, #48	; 0x30
 8008a60:	2b09      	cmp	r3, #9
 8008a62:	d94e      	bls.n	8008b02 <_svfiprintf_r+0x17e>
 8008a64:	b1b0      	cbz	r0, 8008a94 <_svfiprintf_r+0x110>
 8008a66:	9207      	str	r2, [sp, #28]
 8008a68:	e014      	b.n	8008a94 <_svfiprintf_r+0x110>
 8008a6a:	eba0 0308 	sub.w	r3, r0, r8
 8008a6e:	fa09 f303 	lsl.w	r3, r9, r3
 8008a72:	4313      	orrs	r3, r2
 8008a74:	9304      	str	r3, [sp, #16]
 8008a76:	46a2      	mov	sl, r4
 8008a78:	e7d2      	b.n	8008a20 <_svfiprintf_r+0x9c>
 8008a7a:	9b03      	ldr	r3, [sp, #12]
 8008a7c:	1d19      	adds	r1, r3, #4
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	9103      	str	r1, [sp, #12]
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	bfbb      	ittet	lt
 8008a86:	425b      	neglt	r3, r3
 8008a88:	f042 0202 	orrlt.w	r2, r2, #2
 8008a8c:	9307      	strge	r3, [sp, #28]
 8008a8e:	9307      	strlt	r3, [sp, #28]
 8008a90:	bfb8      	it	lt
 8008a92:	9204      	strlt	r2, [sp, #16]
 8008a94:	7823      	ldrb	r3, [r4, #0]
 8008a96:	2b2e      	cmp	r3, #46	; 0x2e
 8008a98:	d10c      	bne.n	8008ab4 <_svfiprintf_r+0x130>
 8008a9a:	7863      	ldrb	r3, [r4, #1]
 8008a9c:	2b2a      	cmp	r3, #42	; 0x2a
 8008a9e:	d135      	bne.n	8008b0c <_svfiprintf_r+0x188>
 8008aa0:	9b03      	ldr	r3, [sp, #12]
 8008aa2:	1d1a      	adds	r2, r3, #4
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	9203      	str	r2, [sp, #12]
 8008aa8:	2b00      	cmp	r3, #0
 8008aaa:	bfb8      	it	lt
 8008aac:	f04f 33ff 	movlt.w	r3, #4294967295
 8008ab0:	3402      	adds	r4, #2
 8008ab2:	9305      	str	r3, [sp, #20]
 8008ab4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008b80 <_svfiprintf_r+0x1fc>
 8008ab8:	7821      	ldrb	r1, [r4, #0]
 8008aba:	2203      	movs	r2, #3
 8008abc:	4650      	mov	r0, sl
 8008abe:	f7f7 fbaf 	bl	8000220 <memchr>
 8008ac2:	b140      	cbz	r0, 8008ad6 <_svfiprintf_r+0x152>
 8008ac4:	2340      	movs	r3, #64	; 0x40
 8008ac6:	eba0 000a 	sub.w	r0, r0, sl
 8008aca:	fa03 f000 	lsl.w	r0, r3, r0
 8008ace:	9b04      	ldr	r3, [sp, #16]
 8008ad0:	4303      	orrs	r3, r0
 8008ad2:	3401      	adds	r4, #1
 8008ad4:	9304      	str	r3, [sp, #16]
 8008ad6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008ada:	4826      	ldr	r0, [pc, #152]	; (8008b74 <_svfiprintf_r+0x1f0>)
 8008adc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008ae0:	2206      	movs	r2, #6
 8008ae2:	f7f7 fb9d 	bl	8000220 <memchr>
 8008ae6:	2800      	cmp	r0, #0
 8008ae8:	d038      	beq.n	8008b5c <_svfiprintf_r+0x1d8>
 8008aea:	4b23      	ldr	r3, [pc, #140]	; (8008b78 <_svfiprintf_r+0x1f4>)
 8008aec:	bb1b      	cbnz	r3, 8008b36 <_svfiprintf_r+0x1b2>
 8008aee:	9b03      	ldr	r3, [sp, #12]
 8008af0:	3307      	adds	r3, #7
 8008af2:	f023 0307 	bic.w	r3, r3, #7
 8008af6:	3308      	adds	r3, #8
 8008af8:	9303      	str	r3, [sp, #12]
 8008afa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008afc:	4433      	add	r3, r6
 8008afe:	9309      	str	r3, [sp, #36]	; 0x24
 8008b00:	e767      	b.n	80089d2 <_svfiprintf_r+0x4e>
 8008b02:	fb0c 3202 	mla	r2, ip, r2, r3
 8008b06:	460c      	mov	r4, r1
 8008b08:	2001      	movs	r0, #1
 8008b0a:	e7a5      	b.n	8008a58 <_svfiprintf_r+0xd4>
 8008b0c:	2300      	movs	r3, #0
 8008b0e:	3401      	adds	r4, #1
 8008b10:	9305      	str	r3, [sp, #20]
 8008b12:	4619      	mov	r1, r3
 8008b14:	f04f 0c0a 	mov.w	ip, #10
 8008b18:	4620      	mov	r0, r4
 8008b1a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008b1e:	3a30      	subs	r2, #48	; 0x30
 8008b20:	2a09      	cmp	r2, #9
 8008b22:	d903      	bls.n	8008b2c <_svfiprintf_r+0x1a8>
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	d0c5      	beq.n	8008ab4 <_svfiprintf_r+0x130>
 8008b28:	9105      	str	r1, [sp, #20]
 8008b2a:	e7c3      	b.n	8008ab4 <_svfiprintf_r+0x130>
 8008b2c:	fb0c 2101 	mla	r1, ip, r1, r2
 8008b30:	4604      	mov	r4, r0
 8008b32:	2301      	movs	r3, #1
 8008b34:	e7f0      	b.n	8008b18 <_svfiprintf_r+0x194>
 8008b36:	ab03      	add	r3, sp, #12
 8008b38:	9300      	str	r3, [sp, #0]
 8008b3a:	462a      	mov	r2, r5
 8008b3c:	4b0f      	ldr	r3, [pc, #60]	; (8008b7c <_svfiprintf_r+0x1f8>)
 8008b3e:	a904      	add	r1, sp, #16
 8008b40:	4638      	mov	r0, r7
 8008b42:	f7fe f80f 	bl	8006b64 <_printf_float>
 8008b46:	1c42      	adds	r2, r0, #1
 8008b48:	4606      	mov	r6, r0
 8008b4a:	d1d6      	bne.n	8008afa <_svfiprintf_r+0x176>
 8008b4c:	89ab      	ldrh	r3, [r5, #12]
 8008b4e:	065b      	lsls	r3, r3, #25
 8008b50:	f53f af2c 	bmi.w	80089ac <_svfiprintf_r+0x28>
 8008b54:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008b56:	b01d      	add	sp, #116	; 0x74
 8008b58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b5c:	ab03      	add	r3, sp, #12
 8008b5e:	9300      	str	r3, [sp, #0]
 8008b60:	462a      	mov	r2, r5
 8008b62:	4b06      	ldr	r3, [pc, #24]	; (8008b7c <_svfiprintf_r+0x1f8>)
 8008b64:	a904      	add	r1, sp, #16
 8008b66:	4638      	mov	r0, r7
 8008b68:	f7fe faa0 	bl	80070ac <_printf_i>
 8008b6c:	e7eb      	b.n	8008b46 <_svfiprintf_r+0x1c2>
 8008b6e:	bf00      	nop
 8008b70:	080099dc 	.word	0x080099dc
 8008b74:	080099e6 	.word	0x080099e6
 8008b78:	08006b65 	.word	0x08006b65
 8008b7c:	080088cd 	.word	0x080088cd
 8008b80:	080099e2 	.word	0x080099e2

08008b84 <_sbrk_r>:
 8008b84:	b538      	push	{r3, r4, r5, lr}
 8008b86:	4d06      	ldr	r5, [pc, #24]	; (8008ba0 <_sbrk_r+0x1c>)
 8008b88:	2300      	movs	r3, #0
 8008b8a:	4604      	mov	r4, r0
 8008b8c:	4608      	mov	r0, r1
 8008b8e:	602b      	str	r3, [r5, #0]
 8008b90:	f7f9 fe04 	bl	800279c <_sbrk>
 8008b94:	1c43      	adds	r3, r0, #1
 8008b96:	d102      	bne.n	8008b9e <_sbrk_r+0x1a>
 8008b98:	682b      	ldr	r3, [r5, #0]
 8008b9a:	b103      	cbz	r3, 8008b9e <_sbrk_r+0x1a>
 8008b9c:	6023      	str	r3, [r4, #0]
 8008b9e:	bd38      	pop	{r3, r4, r5, pc}
 8008ba0:	20000448 	.word	0x20000448

08008ba4 <__assert_func>:
 8008ba4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008ba6:	4614      	mov	r4, r2
 8008ba8:	461a      	mov	r2, r3
 8008baa:	4b09      	ldr	r3, [pc, #36]	; (8008bd0 <__assert_func+0x2c>)
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	4605      	mov	r5, r0
 8008bb0:	68d8      	ldr	r0, [r3, #12]
 8008bb2:	b14c      	cbz	r4, 8008bc8 <__assert_func+0x24>
 8008bb4:	4b07      	ldr	r3, [pc, #28]	; (8008bd4 <__assert_func+0x30>)
 8008bb6:	9100      	str	r1, [sp, #0]
 8008bb8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008bbc:	4906      	ldr	r1, [pc, #24]	; (8008bd8 <__assert_func+0x34>)
 8008bbe:	462b      	mov	r3, r5
 8008bc0:	f000 f80e 	bl	8008be0 <fiprintf>
 8008bc4:	f000 faa4 	bl	8009110 <abort>
 8008bc8:	4b04      	ldr	r3, [pc, #16]	; (8008bdc <__assert_func+0x38>)
 8008bca:	461c      	mov	r4, r3
 8008bcc:	e7f3      	b.n	8008bb6 <__assert_func+0x12>
 8008bce:	bf00      	nop
 8008bd0:	20000028 	.word	0x20000028
 8008bd4:	080099ed 	.word	0x080099ed
 8008bd8:	080099fa 	.word	0x080099fa
 8008bdc:	08009a28 	.word	0x08009a28

08008be0 <fiprintf>:
 8008be0:	b40e      	push	{r1, r2, r3}
 8008be2:	b503      	push	{r0, r1, lr}
 8008be4:	4601      	mov	r1, r0
 8008be6:	ab03      	add	r3, sp, #12
 8008be8:	4805      	ldr	r0, [pc, #20]	; (8008c00 <fiprintf+0x20>)
 8008bea:	f853 2b04 	ldr.w	r2, [r3], #4
 8008bee:	6800      	ldr	r0, [r0, #0]
 8008bf0:	9301      	str	r3, [sp, #4]
 8008bf2:	f000 f88f 	bl	8008d14 <_vfiprintf_r>
 8008bf6:	b002      	add	sp, #8
 8008bf8:	f85d eb04 	ldr.w	lr, [sp], #4
 8008bfc:	b003      	add	sp, #12
 8008bfe:	4770      	bx	lr
 8008c00:	20000028 	.word	0x20000028

08008c04 <__ascii_mbtowc>:
 8008c04:	b082      	sub	sp, #8
 8008c06:	b901      	cbnz	r1, 8008c0a <__ascii_mbtowc+0x6>
 8008c08:	a901      	add	r1, sp, #4
 8008c0a:	b142      	cbz	r2, 8008c1e <__ascii_mbtowc+0x1a>
 8008c0c:	b14b      	cbz	r3, 8008c22 <__ascii_mbtowc+0x1e>
 8008c0e:	7813      	ldrb	r3, [r2, #0]
 8008c10:	600b      	str	r3, [r1, #0]
 8008c12:	7812      	ldrb	r2, [r2, #0]
 8008c14:	1e10      	subs	r0, r2, #0
 8008c16:	bf18      	it	ne
 8008c18:	2001      	movne	r0, #1
 8008c1a:	b002      	add	sp, #8
 8008c1c:	4770      	bx	lr
 8008c1e:	4610      	mov	r0, r2
 8008c20:	e7fb      	b.n	8008c1a <__ascii_mbtowc+0x16>
 8008c22:	f06f 0001 	mvn.w	r0, #1
 8008c26:	e7f8      	b.n	8008c1a <__ascii_mbtowc+0x16>

08008c28 <memmove>:
 8008c28:	4288      	cmp	r0, r1
 8008c2a:	b510      	push	{r4, lr}
 8008c2c:	eb01 0402 	add.w	r4, r1, r2
 8008c30:	d902      	bls.n	8008c38 <memmove+0x10>
 8008c32:	4284      	cmp	r4, r0
 8008c34:	4623      	mov	r3, r4
 8008c36:	d807      	bhi.n	8008c48 <memmove+0x20>
 8008c38:	1e43      	subs	r3, r0, #1
 8008c3a:	42a1      	cmp	r1, r4
 8008c3c:	d008      	beq.n	8008c50 <memmove+0x28>
 8008c3e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008c42:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008c46:	e7f8      	b.n	8008c3a <memmove+0x12>
 8008c48:	4402      	add	r2, r0
 8008c4a:	4601      	mov	r1, r0
 8008c4c:	428a      	cmp	r2, r1
 8008c4e:	d100      	bne.n	8008c52 <memmove+0x2a>
 8008c50:	bd10      	pop	{r4, pc}
 8008c52:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008c56:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008c5a:	e7f7      	b.n	8008c4c <memmove+0x24>

08008c5c <__malloc_lock>:
 8008c5c:	4801      	ldr	r0, [pc, #4]	; (8008c64 <__malloc_lock+0x8>)
 8008c5e:	f000 bc17 	b.w	8009490 <__retarget_lock_acquire_recursive>
 8008c62:	bf00      	nop
 8008c64:	20000450 	.word	0x20000450

08008c68 <__malloc_unlock>:
 8008c68:	4801      	ldr	r0, [pc, #4]	; (8008c70 <__malloc_unlock+0x8>)
 8008c6a:	f000 bc12 	b.w	8009492 <__retarget_lock_release_recursive>
 8008c6e:	bf00      	nop
 8008c70:	20000450 	.word	0x20000450

08008c74 <_realloc_r>:
 8008c74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c76:	4607      	mov	r7, r0
 8008c78:	4614      	mov	r4, r2
 8008c7a:	460e      	mov	r6, r1
 8008c7c:	b921      	cbnz	r1, 8008c88 <_realloc_r+0x14>
 8008c7e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8008c82:	4611      	mov	r1, r2
 8008c84:	f7ff bdc8 	b.w	8008818 <_malloc_r>
 8008c88:	b922      	cbnz	r2, 8008c94 <_realloc_r+0x20>
 8008c8a:	f7ff fd75 	bl	8008778 <_free_r>
 8008c8e:	4625      	mov	r5, r4
 8008c90:	4628      	mov	r0, r5
 8008c92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008c94:	f000 fc62 	bl	800955c <_malloc_usable_size_r>
 8008c98:	42a0      	cmp	r0, r4
 8008c9a:	d20f      	bcs.n	8008cbc <_realloc_r+0x48>
 8008c9c:	4621      	mov	r1, r4
 8008c9e:	4638      	mov	r0, r7
 8008ca0:	f7ff fdba 	bl	8008818 <_malloc_r>
 8008ca4:	4605      	mov	r5, r0
 8008ca6:	2800      	cmp	r0, #0
 8008ca8:	d0f2      	beq.n	8008c90 <_realloc_r+0x1c>
 8008caa:	4631      	mov	r1, r6
 8008cac:	4622      	mov	r2, r4
 8008cae:	f7ff f9c7 	bl	8008040 <memcpy>
 8008cb2:	4631      	mov	r1, r6
 8008cb4:	4638      	mov	r0, r7
 8008cb6:	f7ff fd5f 	bl	8008778 <_free_r>
 8008cba:	e7e9      	b.n	8008c90 <_realloc_r+0x1c>
 8008cbc:	4635      	mov	r5, r6
 8008cbe:	e7e7      	b.n	8008c90 <_realloc_r+0x1c>

08008cc0 <__sfputc_r>:
 8008cc0:	6893      	ldr	r3, [r2, #8]
 8008cc2:	3b01      	subs	r3, #1
 8008cc4:	2b00      	cmp	r3, #0
 8008cc6:	b410      	push	{r4}
 8008cc8:	6093      	str	r3, [r2, #8]
 8008cca:	da08      	bge.n	8008cde <__sfputc_r+0x1e>
 8008ccc:	6994      	ldr	r4, [r2, #24]
 8008cce:	42a3      	cmp	r3, r4
 8008cd0:	db01      	blt.n	8008cd6 <__sfputc_r+0x16>
 8008cd2:	290a      	cmp	r1, #10
 8008cd4:	d103      	bne.n	8008cde <__sfputc_r+0x1e>
 8008cd6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008cda:	f000 b94b 	b.w	8008f74 <__swbuf_r>
 8008cde:	6813      	ldr	r3, [r2, #0]
 8008ce0:	1c58      	adds	r0, r3, #1
 8008ce2:	6010      	str	r0, [r2, #0]
 8008ce4:	7019      	strb	r1, [r3, #0]
 8008ce6:	4608      	mov	r0, r1
 8008ce8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008cec:	4770      	bx	lr

08008cee <__sfputs_r>:
 8008cee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008cf0:	4606      	mov	r6, r0
 8008cf2:	460f      	mov	r7, r1
 8008cf4:	4614      	mov	r4, r2
 8008cf6:	18d5      	adds	r5, r2, r3
 8008cf8:	42ac      	cmp	r4, r5
 8008cfa:	d101      	bne.n	8008d00 <__sfputs_r+0x12>
 8008cfc:	2000      	movs	r0, #0
 8008cfe:	e007      	b.n	8008d10 <__sfputs_r+0x22>
 8008d00:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008d04:	463a      	mov	r2, r7
 8008d06:	4630      	mov	r0, r6
 8008d08:	f7ff ffda 	bl	8008cc0 <__sfputc_r>
 8008d0c:	1c43      	adds	r3, r0, #1
 8008d0e:	d1f3      	bne.n	8008cf8 <__sfputs_r+0xa>
 8008d10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008d14 <_vfiprintf_r>:
 8008d14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d18:	460d      	mov	r5, r1
 8008d1a:	b09d      	sub	sp, #116	; 0x74
 8008d1c:	4614      	mov	r4, r2
 8008d1e:	4698      	mov	r8, r3
 8008d20:	4606      	mov	r6, r0
 8008d22:	b118      	cbz	r0, 8008d2c <_vfiprintf_r+0x18>
 8008d24:	6983      	ldr	r3, [r0, #24]
 8008d26:	b90b      	cbnz	r3, 8008d2c <_vfiprintf_r+0x18>
 8008d28:	f000 fb14 	bl	8009354 <__sinit>
 8008d2c:	4b89      	ldr	r3, [pc, #548]	; (8008f54 <_vfiprintf_r+0x240>)
 8008d2e:	429d      	cmp	r5, r3
 8008d30:	d11b      	bne.n	8008d6a <_vfiprintf_r+0x56>
 8008d32:	6875      	ldr	r5, [r6, #4]
 8008d34:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008d36:	07d9      	lsls	r1, r3, #31
 8008d38:	d405      	bmi.n	8008d46 <_vfiprintf_r+0x32>
 8008d3a:	89ab      	ldrh	r3, [r5, #12]
 8008d3c:	059a      	lsls	r2, r3, #22
 8008d3e:	d402      	bmi.n	8008d46 <_vfiprintf_r+0x32>
 8008d40:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008d42:	f000 fba5 	bl	8009490 <__retarget_lock_acquire_recursive>
 8008d46:	89ab      	ldrh	r3, [r5, #12]
 8008d48:	071b      	lsls	r3, r3, #28
 8008d4a:	d501      	bpl.n	8008d50 <_vfiprintf_r+0x3c>
 8008d4c:	692b      	ldr	r3, [r5, #16]
 8008d4e:	b9eb      	cbnz	r3, 8008d8c <_vfiprintf_r+0x78>
 8008d50:	4629      	mov	r1, r5
 8008d52:	4630      	mov	r0, r6
 8008d54:	f000 f96e 	bl	8009034 <__swsetup_r>
 8008d58:	b1c0      	cbz	r0, 8008d8c <_vfiprintf_r+0x78>
 8008d5a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008d5c:	07dc      	lsls	r4, r3, #31
 8008d5e:	d50e      	bpl.n	8008d7e <_vfiprintf_r+0x6a>
 8008d60:	f04f 30ff 	mov.w	r0, #4294967295
 8008d64:	b01d      	add	sp, #116	; 0x74
 8008d66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d6a:	4b7b      	ldr	r3, [pc, #492]	; (8008f58 <_vfiprintf_r+0x244>)
 8008d6c:	429d      	cmp	r5, r3
 8008d6e:	d101      	bne.n	8008d74 <_vfiprintf_r+0x60>
 8008d70:	68b5      	ldr	r5, [r6, #8]
 8008d72:	e7df      	b.n	8008d34 <_vfiprintf_r+0x20>
 8008d74:	4b79      	ldr	r3, [pc, #484]	; (8008f5c <_vfiprintf_r+0x248>)
 8008d76:	429d      	cmp	r5, r3
 8008d78:	bf08      	it	eq
 8008d7a:	68f5      	ldreq	r5, [r6, #12]
 8008d7c:	e7da      	b.n	8008d34 <_vfiprintf_r+0x20>
 8008d7e:	89ab      	ldrh	r3, [r5, #12]
 8008d80:	0598      	lsls	r0, r3, #22
 8008d82:	d4ed      	bmi.n	8008d60 <_vfiprintf_r+0x4c>
 8008d84:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008d86:	f000 fb84 	bl	8009492 <__retarget_lock_release_recursive>
 8008d8a:	e7e9      	b.n	8008d60 <_vfiprintf_r+0x4c>
 8008d8c:	2300      	movs	r3, #0
 8008d8e:	9309      	str	r3, [sp, #36]	; 0x24
 8008d90:	2320      	movs	r3, #32
 8008d92:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008d96:	f8cd 800c 	str.w	r8, [sp, #12]
 8008d9a:	2330      	movs	r3, #48	; 0x30
 8008d9c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8008f60 <_vfiprintf_r+0x24c>
 8008da0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008da4:	f04f 0901 	mov.w	r9, #1
 8008da8:	4623      	mov	r3, r4
 8008daa:	469a      	mov	sl, r3
 8008dac:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008db0:	b10a      	cbz	r2, 8008db6 <_vfiprintf_r+0xa2>
 8008db2:	2a25      	cmp	r2, #37	; 0x25
 8008db4:	d1f9      	bne.n	8008daa <_vfiprintf_r+0x96>
 8008db6:	ebba 0b04 	subs.w	fp, sl, r4
 8008dba:	d00b      	beq.n	8008dd4 <_vfiprintf_r+0xc0>
 8008dbc:	465b      	mov	r3, fp
 8008dbe:	4622      	mov	r2, r4
 8008dc0:	4629      	mov	r1, r5
 8008dc2:	4630      	mov	r0, r6
 8008dc4:	f7ff ff93 	bl	8008cee <__sfputs_r>
 8008dc8:	3001      	adds	r0, #1
 8008dca:	f000 80aa 	beq.w	8008f22 <_vfiprintf_r+0x20e>
 8008dce:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008dd0:	445a      	add	r2, fp
 8008dd2:	9209      	str	r2, [sp, #36]	; 0x24
 8008dd4:	f89a 3000 	ldrb.w	r3, [sl]
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	f000 80a2 	beq.w	8008f22 <_vfiprintf_r+0x20e>
 8008dde:	2300      	movs	r3, #0
 8008de0:	f04f 32ff 	mov.w	r2, #4294967295
 8008de4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008de8:	f10a 0a01 	add.w	sl, sl, #1
 8008dec:	9304      	str	r3, [sp, #16]
 8008dee:	9307      	str	r3, [sp, #28]
 8008df0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008df4:	931a      	str	r3, [sp, #104]	; 0x68
 8008df6:	4654      	mov	r4, sl
 8008df8:	2205      	movs	r2, #5
 8008dfa:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008dfe:	4858      	ldr	r0, [pc, #352]	; (8008f60 <_vfiprintf_r+0x24c>)
 8008e00:	f7f7 fa0e 	bl	8000220 <memchr>
 8008e04:	9a04      	ldr	r2, [sp, #16]
 8008e06:	b9d8      	cbnz	r0, 8008e40 <_vfiprintf_r+0x12c>
 8008e08:	06d1      	lsls	r1, r2, #27
 8008e0a:	bf44      	itt	mi
 8008e0c:	2320      	movmi	r3, #32
 8008e0e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008e12:	0713      	lsls	r3, r2, #28
 8008e14:	bf44      	itt	mi
 8008e16:	232b      	movmi	r3, #43	; 0x2b
 8008e18:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008e1c:	f89a 3000 	ldrb.w	r3, [sl]
 8008e20:	2b2a      	cmp	r3, #42	; 0x2a
 8008e22:	d015      	beq.n	8008e50 <_vfiprintf_r+0x13c>
 8008e24:	9a07      	ldr	r2, [sp, #28]
 8008e26:	4654      	mov	r4, sl
 8008e28:	2000      	movs	r0, #0
 8008e2a:	f04f 0c0a 	mov.w	ip, #10
 8008e2e:	4621      	mov	r1, r4
 8008e30:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008e34:	3b30      	subs	r3, #48	; 0x30
 8008e36:	2b09      	cmp	r3, #9
 8008e38:	d94e      	bls.n	8008ed8 <_vfiprintf_r+0x1c4>
 8008e3a:	b1b0      	cbz	r0, 8008e6a <_vfiprintf_r+0x156>
 8008e3c:	9207      	str	r2, [sp, #28]
 8008e3e:	e014      	b.n	8008e6a <_vfiprintf_r+0x156>
 8008e40:	eba0 0308 	sub.w	r3, r0, r8
 8008e44:	fa09 f303 	lsl.w	r3, r9, r3
 8008e48:	4313      	orrs	r3, r2
 8008e4a:	9304      	str	r3, [sp, #16]
 8008e4c:	46a2      	mov	sl, r4
 8008e4e:	e7d2      	b.n	8008df6 <_vfiprintf_r+0xe2>
 8008e50:	9b03      	ldr	r3, [sp, #12]
 8008e52:	1d19      	adds	r1, r3, #4
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	9103      	str	r1, [sp, #12]
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	bfbb      	ittet	lt
 8008e5c:	425b      	neglt	r3, r3
 8008e5e:	f042 0202 	orrlt.w	r2, r2, #2
 8008e62:	9307      	strge	r3, [sp, #28]
 8008e64:	9307      	strlt	r3, [sp, #28]
 8008e66:	bfb8      	it	lt
 8008e68:	9204      	strlt	r2, [sp, #16]
 8008e6a:	7823      	ldrb	r3, [r4, #0]
 8008e6c:	2b2e      	cmp	r3, #46	; 0x2e
 8008e6e:	d10c      	bne.n	8008e8a <_vfiprintf_r+0x176>
 8008e70:	7863      	ldrb	r3, [r4, #1]
 8008e72:	2b2a      	cmp	r3, #42	; 0x2a
 8008e74:	d135      	bne.n	8008ee2 <_vfiprintf_r+0x1ce>
 8008e76:	9b03      	ldr	r3, [sp, #12]
 8008e78:	1d1a      	adds	r2, r3, #4
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	9203      	str	r2, [sp, #12]
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	bfb8      	it	lt
 8008e82:	f04f 33ff 	movlt.w	r3, #4294967295
 8008e86:	3402      	adds	r4, #2
 8008e88:	9305      	str	r3, [sp, #20]
 8008e8a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8008f70 <_vfiprintf_r+0x25c>
 8008e8e:	7821      	ldrb	r1, [r4, #0]
 8008e90:	2203      	movs	r2, #3
 8008e92:	4650      	mov	r0, sl
 8008e94:	f7f7 f9c4 	bl	8000220 <memchr>
 8008e98:	b140      	cbz	r0, 8008eac <_vfiprintf_r+0x198>
 8008e9a:	2340      	movs	r3, #64	; 0x40
 8008e9c:	eba0 000a 	sub.w	r0, r0, sl
 8008ea0:	fa03 f000 	lsl.w	r0, r3, r0
 8008ea4:	9b04      	ldr	r3, [sp, #16]
 8008ea6:	4303      	orrs	r3, r0
 8008ea8:	3401      	adds	r4, #1
 8008eaa:	9304      	str	r3, [sp, #16]
 8008eac:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008eb0:	482c      	ldr	r0, [pc, #176]	; (8008f64 <_vfiprintf_r+0x250>)
 8008eb2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008eb6:	2206      	movs	r2, #6
 8008eb8:	f7f7 f9b2 	bl	8000220 <memchr>
 8008ebc:	2800      	cmp	r0, #0
 8008ebe:	d03f      	beq.n	8008f40 <_vfiprintf_r+0x22c>
 8008ec0:	4b29      	ldr	r3, [pc, #164]	; (8008f68 <_vfiprintf_r+0x254>)
 8008ec2:	bb1b      	cbnz	r3, 8008f0c <_vfiprintf_r+0x1f8>
 8008ec4:	9b03      	ldr	r3, [sp, #12]
 8008ec6:	3307      	adds	r3, #7
 8008ec8:	f023 0307 	bic.w	r3, r3, #7
 8008ecc:	3308      	adds	r3, #8
 8008ece:	9303      	str	r3, [sp, #12]
 8008ed0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008ed2:	443b      	add	r3, r7
 8008ed4:	9309      	str	r3, [sp, #36]	; 0x24
 8008ed6:	e767      	b.n	8008da8 <_vfiprintf_r+0x94>
 8008ed8:	fb0c 3202 	mla	r2, ip, r2, r3
 8008edc:	460c      	mov	r4, r1
 8008ede:	2001      	movs	r0, #1
 8008ee0:	e7a5      	b.n	8008e2e <_vfiprintf_r+0x11a>
 8008ee2:	2300      	movs	r3, #0
 8008ee4:	3401      	adds	r4, #1
 8008ee6:	9305      	str	r3, [sp, #20]
 8008ee8:	4619      	mov	r1, r3
 8008eea:	f04f 0c0a 	mov.w	ip, #10
 8008eee:	4620      	mov	r0, r4
 8008ef0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008ef4:	3a30      	subs	r2, #48	; 0x30
 8008ef6:	2a09      	cmp	r2, #9
 8008ef8:	d903      	bls.n	8008f02 <_vfiprintf_r+0x1ee>
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	d0c5      	beq.n	8008e8a <_vfiprintf_r+0x176>
 8008efe:	9105      	str	r1, [sp, #20]
 8008f00:	e7c3      	b.n	8008e8a <_vfiprintf_r+0x176>
 8008f02:	fb0c 2101 	mla	r1, ip, r1, r2
 8008f06:	4604      	mov	r4, r0
 8008f08:	2301      	movs	r3, #1
 8008f0a:	e7f0      	b.n	8008eee <_vfiprintf_r+0x1da>
 8008f0c:	ab03      	add	r3, sp, #12
 8008f0e:	9300      	str	r3, [sp, #0]
 8008f10:	462a      	mov	r2, r5
 8008f12:	4b16      	ldr	r3, [pc, #88]	; (8008f6c <_vfiprintf_r+0x258>)
 8008f14:	a904      	add	r1, sp, #16
 8008f16:	4630      	mov	r0, r6
 8008f18:	f7fd fe24 	bl	8006b64 <_printf_float>
 8008f1c:	4607      	mov	r7, r0
 8008f1e:	1c78      	adds	r0, r7, #1
 8008f20:	d1d6      	bne.n	8008ed0 <_vfiprintf_r+0x1bc>
 8008f22:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008f24:	07d9      	lsls	r1, r3, #31
 8008f26:	d405      	bmi.n	8008f34 <_vfiprintf_r+0x220>
 8008f28:	89ab      	ldrh	r3, [r5, #12]
 8008f2a:	059a      	lsls	r2, r3, #22
 8008f2c:	d402      	bmi.n	8008f34 <_vfiprintf_r+0x220>
 8008f2e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008f30:	f000 faaf 	bl	8009492 <__retarget_lock_release_recursive>
 8008f34:	89ab      	ldrh	r3, [r5, #12]
 8008f36:	065b      	lsls	r3, r3, #25
 8008f38:	f53f af12 	bmi.w	8008d60 <_vfiprintf_r+0x4c>
 8008f3c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008f3e:	e711      	b.n	8008d64 <_vfiprintf_r+0x50>
 8008f40:	ab03      	add	r3, sp, #12
 8008f42:	9300      	str	r3, [sp, #0]
 8008f44:	462a      	mov	r2, r5
 8008f46:	4b09      	ldr	r3, [pc, #36]	; (8008f6c <_vfiprintf_r+0x258>)
 8008f48:	a904      	add	r1, sp, #16
 8008f4a:	4630      	mov	r0, r6
 8008f4c:	f7fe f8ae 	bl	80070ac <_printf_i>
 8008f50:	e7e4      	b.n	8008f1c <_vfiprintf_r+0x208>
 8008f52:	bf00      	nop
 8008f54:	08009b54 	.word	0x08009b54
 8008f58:	08009b74 	.word	0x08009b74
 8008f5c:	08009b34 	.word	0x08009b34
 8008f60:	080099dc 	.word	0x080099dc
 8008f64:	080099e6 	.word	0x080099e6
 8008f68:	08006b65 	.word	0x08006b65
 8008f6c:	08008cef 	.word	0x08008cef
 8008f70:	080099e2 	.word	0x080099e2

08008f74 <__swbuf_r>:
 8008f74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f76:	460e      	mov	r6, r1
 8008f78:	4614      	mov	r4, r2
 8008f7a:	4605      	mov	r5, r0
 8008f7c:	b118      	cbz	r0, 8008f86 <__swbuf_r+0x12>
 8008f7e:	6983      	ldr	r3, [r0, #24]
 8008f80:	b90b      	cbnz	r3, 8008f86 <__swbuf_r+0x12>
 8008f82:	f000 f9e7 	bl	8009354 <__sinit>
 8008f86:	4b21      	ldr	r3, [pc, #132]	; (800900c <__swbuf_r+0x98>)
 8008f88:	429c      	cmp	r4, r3
 8008f8a:	d12b      	bne.n	8008fe4 <__swbuf_r+0x70>
 8008f8c:	686c      	ldr	r4, [r5, #4]
 8008f8e:	69a3      	ldr	r3, [r4, #24]
 8008f90:	60a3      	str	r3, [r4, #8]
 8008f92:	89a3      	ldrh	r3, [r4, #12]
 8008f94:	071a      	lsls	r2, r3, #28
 8008f96:	d52f      	bpl.n	8008ff8 <__swbuf_r+0x84>
 8008f98:	6923      	ldr	r3, [r4, #16]
 8008f9a:	b36b      	cbz	r3, 8008ff8 <__swbuf_r+0x84>
 8008f9c:	6923      	ldr	r3, [r4, #16]
 8008f9e:	6820      	ldr	r0, [r4, #0]
 8008fa0:	1ac0      	subs	r0, r0, r3
 8008fa2:	6963      	ldr	r3, [r4, #20]
 8008fa4:	b2f6      	uxtb	r6, r6
 8008fa6:	4283      	cmp	r3, r0
 8008fa8:	4637      	mov	r7, r6
 8008faa:	dc04      	bgt.n	8008fb6 <__swbuf_r+0x42>
 8008fac:	4621      	mov	r1, r4
 8008fae:	4628      	mov	r0, r5
 8008fb0:	f000 f93c 	bl	800922c <_fflush_r>
 8008fb4:	bb30      	cbnz	r0, 8009004 <__swbuf_r+0x90>
 8008fb6:	68a3      	ldr	r3, [r4, #8]
 8008fb8:	3b01      	subs	r3, #1
 8008fba:	60a3      	str	r3, [r4, #8]
 8008fbc:	6823      	ldr	r3, [r4, #0]
 8008fbe:	1c5a      	adds	r2, r3, #1
 8008fc0:	6022      	str	r2, [r4, #0]
 8008fc2:	701e      	strb	r6, [r3, #0]
 8008fc4:	6963      	ldr	r3, [r4, #20]
 8008fc6:	3001      	adds	r0, #1
 8008fc8:	4283      	cmp	r3, r0
 8008fca:	d004      	beq.n	8008fd6 <__swbuf_r+0x62>
 8008fcc:	89a3      	ldrh	r3, [r4, #12]
 8008fce:	07db      	lsls	r3, r3, #31
 8008fd0:	d506      	bpl.n	8008fe0 <__swbuf_r+0x6c>
 8008fd2:	2e0a      	cmp	r6, #10
 8008fd4:	d104      	bne.n	8008fe0 <__swbuf_r+0x6c>
 8008fd6:	4621      	mov	r1, r4
 8008fd8:	4628      	mov	r0, r5
 8008fda:	f000 f927 	bl	800922c <_fflush_r>
 8008fde:	b988      	cbnz	r0, 8009004 <__swbuf_r+0x90>
 8008fe0:	4638      	mov	r0, r7
 8008fe2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008fe4:	4b0a      	ldr	r3, [pc, #40]	; (8009010 <__swbuf_r+0x9c>)
 8008fe6:	429c      	cmp	r4, r3
 8008fe8:	d101      	bne.n	8008fee <__swbuf_r+0x7a>
 8008fea:	68ac      	ldr	r4, [r5, #8]
 8008fec:	e7cf      	b.n	8008f8e <__swbuf_r+0x1a>
 8008fee:	4b09      	ldr	r3, [pc, #36]	; (8009014 <__swbuf_r+0xa0>)
 8008ff0:	429c      	cmp	r4, r3
 8008ff2:	bf08      	it	eq
 8008ff4:	68ec      	ldreq	r4, [r5, #12]
 8008ff6:	e7ca      	b.n	8008f8e <__swbuf_r+0x1a>
 8008ff8:	4621      	mov	r1, r4
 8008ffa:	4628      	mov	r0, r5
 8008ffc:	f000 f81a 	bl	8009034 <__swsetup_r>
 8009000:	2800      	cmp	r0, #0
 8009002:	d0cb      	beq.n	8008f9c <__swbuf_r+0x28>
 8009004:	f04f 37ff 	mov.w	r7, #4294967295
 8009008:	e7ea      	b.n	8008fe0 <__swbuf_r+0x6c>
 800900a:	bf00      	nop
 800900c:	08009b54 	.word	0x08009b54
 8009010:	08009b74 	.word	0x08009b74
 8009014:	08009b34 	.word	0x08009b34

08009018 <__ascii_wctomb>:
 8009018:	b149      	cbz	r1, 800902e <__ascii_wctomb+0x16>
 800901a:	2aff      	cmp	r2, #255	; 0xff
 800901c:	bf85      	ittet	hi
 800901e:	238a      	movhi	r3, #138	; 0x8a
 8009020:	6003      	strhi	r3, [r0, #0]
 8009022:	700a      	strbls	r2, [r1, #0]
 8009024:	f04f 30ff 	movhi.w	r0, #4294967295
 8009028:	bf98      	it	ls
 800902a:	2001      	movls	r0, #1
 800902c:	4770      	bx	lr
 800902e:	4608      	mov	r0, r1
 8009030:	4770      	bx	lr
	...

08009034 <__swsetup_r>:
 8009034:	4b32      	ldr	r3, [pc, #200]	; (8009100 <__swsetup_r+0xcc>)
 8009036:	b570      	push	{r4, r5, r6, lr}
 8009038:	681d      	ldr	r5, [r3, #0]
 800903a:	4606      	mov	r6, r0
 800903c:	460c      	mov	r4, r1
 800903e:	b125      	cbz	r5, 800904a <__swsetup_r+0x16>
 8009040:	69ab      	ldr	r3, [r5, #24]
 8009042:	b913      	cbnz	r3, 800904a <__swsetup_r+0x16>
 8009044:	4628      	mov	r0, r5
 8009046:	f000 f985 	bl	8009354 <__sinit>
 800904a:	4b2e      	ldr	r3, [pc, #184]	; (8009104 <__swsetup_r+0xd0>)
 800904c:	429c      	cmp	r4, r3
 800904e:	d10f      	bne.n	8009070 <__swsetup_r+0x3c>
 8009050:	686c      	ldr	r4, [r5, #4]
 8009052:	89a3      	ldrh	r3, [r4, #12]
 8009054:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009058:	0719      	lsls	r1, r3, #28
 800905a:	d42c      	bmi.n	80090b6 <__swsetup_r+0x82>
 800905c:	06dd      	lsls	r5, r3, #27
 800905e:	d411      	bmi.n	8009084 <__swsetup_r+0x50>
 8009060:	2309      	movs	r3, #9
 8009062:	6033      	str	r3, [r6, #0]
 8009064:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009068:	81a3      	strh	r3, [r4, #12]
 800906a:	f04f 30ff 	mov.w	r0, #4294967295
 800906e:	e03e      	b.n	80090ee <__swsetup_r+0xba>
 8009070:	4b25      	ldr	r3, [pc, #148]	; (8009108 <__swsetup_r+0xd4>)
 8009072:	429c      	cmp	r4, r3
 8009074:	d101      	bne.n	800907a <__swsetup_r+0x46>
 8009076:	68ac      	ldr	r4, [r5, #8]
 8009078:	e7eb      	b.n	8009052 <__swsetup_r+0x1e>
 800907a:	4b24      	ldr	r3, [pc, #144]	; (800910c <__swsetup_r+0xd8>)
 800907c:	429c      	cmp	r4, r3
 800907e:	bf08      	it	eq
 8009080:	68ec      	ldreq	r4, [r5, #12]
 8009082:	e7e6      	b.n	8009052 <__swsetup_r+0x1e>
 8009084:	0758      	lsls	r0, r3, #29
 8009086:	d512      	bpl.n	80090ae <__swsetup_r+0x7a>
 8009088:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800908a:	b141      	cbz	r1, 800909e <__swsetup_r+0x6a>
 800908c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009090:	4299      	cmp	r1, r3
 8009092:	d002      	beq.n	800909a <__swsetup_r+0x66>
 8009094:	4630      	mov	r0, r6
 8009096:	f7ff fb6f 	bl	8008778 <_free_r>
 800909a:	2300      	movs	r3, #0
 800909c:	6363      	str	r3, [r4, #52]	; 0x34
 800909e:	89a3      	ldrh	r3, [r4, #12]
 80090a0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80090a4:	81a3      	strh	r3, [r4, #12]
 80090a6:	2300      	movs	r3, #0
 80090a8:	6063      	str	r3, [r4, #4]
 80090aa:	6923      	ldr	r3, [r4, #16]
 80090ac:	6023      	str	r3, [r4, #0]
 80090ae:	89a3      	ldrh	r3, [r4, #12]
 80090b0:	f043 0308 	orr.w	r3, r3, #8
 80090b4:	81a3      	strh	r3, [r4, #12]
 80090b6:	6923      	ldr	r3, [r4, #16]
 80090b8:	b94b      	cbnz	r3, 80090ce <__swsetup_r+0x9a>
 80090ba:	89a3      	ldrh	r3, [r4, #12]
 80090bc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80090c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80090c4:	d003      	beq.n	80090ce <__swsetup_r+0x9a>
 80090c6:	4621      	mov	r1, r4
 80090c8:	4630      	mov	r0, r6
 80090ca:	f000 fa07 	bl	80094dc <__smakebuf_r>
 80090ce:	89a0      	ldrh	r0, [r4, #12]
 80090d0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80090d4:	f010 0301 	ands.w	r3, r0, #1
 80090d8:	d00a      	beq.n	80090f0 <__swsetup_r+0xbc>
 80090da:	2300      	movs	r3, #0
 80090dc:	60a3      	str	r3, [r4, #8]
 80090de:	6963      	ldr	r3, [r4, #20]
 80090e0:	425b      	negs	r3, r3
 80090e2:	61a3      	str	r3, [r4, #24]
 80090e4:	6923      	ldr	r3, [r4, #16]
 80090e6:	b943      	cbnz	r3, 80090fa <__swsetup_r+0xc6>
 80090e8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80090ec:	d1ba      	bne.n	8009064 <__swsetup_r+0x30>
 80090ee:	bd70      	pop	{r4, r5, r6, pc}
 80090f0:	0781      	lsls	r1, r0, #30
 80090f2:	bf58      	it	pl
 80090f4:	6963      	ldrpl	r3, [r4, #20]
 80090f6:	60a3      	str	r3, [r4, #8]
 80090f8:	e7f4      	b.n	80090e4 <__swsetup_r+0xb0>
 80090fa:	2000      	movs	r0, #0
 80090fc:	e7f7      	b.n	80090ee <__swsetup_r+0xba>
 80090fe:	bf00      	nop
 8009100:	20000028 	.word	0x20000028
 8009104:	08009b54 	.word	0x08009b54
 8009108:	08009b74 	.word	0x08009b74
 800910c:	08009b34 	.word	0x08009b34

08009110 <abort>:
 8009110:	b508      	push	{r3, lr}
 8009112:	2006      	movs	r0, #6
 8009114:	f000 fa52 	bl	80095bc <raise>
 8009118:	2001      	movs	r0, #1
 800911a:	f7f9 fac7 	bl	80026ac <_exit>
	...

08009120 <__sflush_r>:
 8009120:	898a      	ldrh	r2, [r1, #12]
 8009122:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009126:	4605      	mov	r5, r0
 8009128:	0710      	lsls	r0, r2, #28
 800912a:	460c      	mov	r4, r1
 800912c:	d458      	bmi.n	80091e0 <__sflush_r+0xc0>
 800912e:	684b      	ldr	r3, [r1, #4]
 8009130:	2b00      	cmp	r3, #0
 8009132:	dc05      	bgt.n	8009140 <__sflush_r+0x20>
 8009134:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009136:	2b00      	cmp	r3, #0
 8009138:	dc02      	bgt.n	8009140 <__sflush_r+0x20>
 800913a:	2000      	movs	r0, #0
 800913c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009140:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009142:	2e00      	cmp	r6, #0
 8009144:	d0f9      	beq.n	800913a <__sflush_r+0x1a>
 8009146:	2300      	movs	r3, #0
 8009148:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800914c:	682f      	ldr	r7, [r5, #0]
 800914e:	602b      	str	r3, [r5, #0]
 8009150:	d032      	beq.n	80091b8 <__sflush_r+0x98>
 8009152:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009154:	89a3      	ldrh	r3, [r4, #12]
 8009156:	075a      	lsls	r2, r3, #29
 8009158:	d505      	bpl.n	8009166 <__sflush_r+0x46>
 800915a:	6863      	ldr	r3, [r4, #4]
 800915c:	1ac0      	subs	r0, r0, r3
 800915e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009160:	b10b      	cbz	r3, 8009166 <__sflush_r+0x46>
 8009162:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009164:	1ac0      	subs	r0, r0, r3
 8009166:	2300      	movs	r3, #0
 8009168:	4602      	mov	r2, r0
 800916a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800916c:	6a21      	ldr	r1, [r4, #32]
 800916e:	4628      	mov	r0, r5
 8009170:	47b0      	blx	r6
 8009172:	1c43      	adds	r3, r0, #1
 8009174:	89a3      	ldrh	r3, [r4, #12]
 8009176:	d106      	bne.n	8009186 <__sflush_r+0x66>
 8009178:	6829      	ldr	r1, [r5, #0]
 800917a:	291d      	cmp	r1, #29
 800917c:	d82c      	bhi.n	80091d8 <__sflush_r+0xb8>
 800917e:	4a2a      	ldr	r2, [pc, #168]	; (8009228 <__sflush_r+0x108>)
 8009180:	40ca      	lsrs	r2, r1
 8009182:	07d6      	lsls	r6, r2, #31
 8009184:	d528      	bpl.n	80091d8 <__sflush_r+0xb8>
 8009186:	2200      	movs	r2, #0
 8009188:	6062      	str	r2, [r4, #4]
 800918a:	04d9      	lsls	r1, r3, #19
 800918c:	6922      	ldr	r2, [r4, #16]
 800918e:	6022      	str	r2, [r4, #0]
 8009190:	d504      	bpl.n	800919c <__sflush_r+0x7c>
 8009192:	1c42      	adds	r2, r0, #1
 8009194:	d101      	bne.n	800919a <__sflush_r+0x7a>
 8009196:	682b      	ldr	r3, [r5, #0]
 8009198:	b903      	cbnz	r3, 800919c <__sflush_r+0x7c>
 800919a:	6560      	str	r0, [r4, #84]	; 0x54
 800919c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800919e:	602f      	str	r7, [r5, #0]
 80091a0:	2900      	cmp	r1, #0
 80091a2:	d0ca      	beq.n	800913a <__sflush_r+0x1a>
 80091a4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80091a8:	4299      	cmp	r1, r3
 80091aa:	d002      	beq.n	80091b2 <__sflush_r+0x92>
 80091ac:	4628      	mov	r0, r5
 80091ae:	f7ff fae3 	bl	8008778 <_free_r>
 80091b2:	2000      	movs	r0, #0
 80091b4:	6360      	str	r0, [r4, #52]	; 0x34
 80091b6:	e7c1      	b.n	800913c <__sflush_r+0x1c>
 80091b8:	6a21      	ldr	r1, [r4, #32]
 80091ba:	2301      	movs	r3, #1
 80091bc:	4628      	mov	r0, r5
 80091be:	47b0      	blx	r6
 80091c0:	1c41      	adds	r1, r0, #1
 80091c2:	d1c7      	bne.n	8009154 <__sflush_r+0x34>
 80091c4:	682b      	ldr	r3, [r5, #0]
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	d0c4      	beq.n	8009154 <__sflush_r+0x34>
 80091ca:	2b1d      	cmp	r3, #29
 80091cc:	d001      	beq.n	80091d2 <__sflush_r+0xb2>
 80091ce:	2b16      	cmp	r3, #22
 80091d0:	d101      	bne.n	80091d6 <__sflush_r+0xb6>
 80091d2:	602f      	str	r7, [r5, #0]
 80091d4:	e7b1      	b.n	800913a <__sflush_r+0x1a>
 80091d6:	89a3      	ldrh	r3, [r4, #12]
 80091d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80091dc:	81a3      	strh	r3, [r4, #12]
 80091de:	e7ad      	b.n	800913c <__sflush_r+0x1c>
 80091e0:	690f      	ldr	r7, [r1, #16]
 80091e2:	2f00      	cmp	r7, #0
 80091e4:	d0a9      	beq.n	800913a <__sflush_r+0x1a>
 80091e6:	0793      	lsls	r3, r2, #30
 80091e8:	680e      	ldr	r6, [r1, #0]
 80091ea:	bf08      	it	eq
 80091ec:	694b      	ldreq	r3, [r1, #20]
 80091ee:	600f      	str	r7, [r1, #0]
 80091f0:	bf18      	it	ne
 80091f2:	2300      	movne	r3, #0
 80091f4:	eba6 0807 	sub.w	r8, r6, r7
 80091f8:	608b      	str	r3, [r1, #8]
 80091fa:	f1b8 0f00 	cmp.w	r8, #0
 80091fe:	dd9c      	ble.n	800913a <__sflush_r+0x1a>
 8009200:	6a21      	ldr	r1, [r4, #32]
 8009202:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009204:	4643      	mov	r3, r8
 8009206:	463a      	mov	r2, r7
 8009208:	4628      	mov	r0, r5
 800920a:	47b0      	blx	r6
 800920c:	2800      	cmp	r0, #0
 800920e:	dc06      	bgt.n	800921e <__sflush_r+0xfe>
 8009210:	89a3      	ldrh	r3, [r4, #12]
 8009212:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009216:	81a3      	strh	r3, [r4, #12]
 8009218:	f04f 30ff 	mov.w	r0, #4294967295
 800921c:	e78e      	b.n	800913c <__sflush_r+0x1c>
 800921e:	4407      	add	r7, r0
 8009220:	eba8 0800 	sub.w	r8, r8, r0
 8009224:	e7e9      	b.n	80091fa <__sflush_r+0xda>
 8009226:	bf00      	nop
 8009228:	20400001 	.word	0x20400001

0800922c <_fflush_r>:
 800922c:	b538      	push	{r3, r4, r5, lr}
 800922e:	690b      	ldr	r3, [r1, #16]
 8009230:	4605      	mov	r5, r0
 8009232:	460c      	mov	r4, r1
 8009234:	b913      	cbnz	r3, 800923c <_fflush_r+0x10>
 8009236:	2500      	movs	r5, #0
 8009238:	4628      	mov	r0, r5
 800923a:	bd38      	pop	{r3, r4, r5, pc}
 800923c:	b118      	cbz	r0, 8009246 <_fflush_r+0x1a>
 800923e:	6983      	ldr	r3, [r0, #24]
 8009240:	b90b      	cbnz	r3, 8009246 <_fflush_r+0x1a>
 8009242:	f000 f887 	bl	8009354 <__sinit>
 8009246:	4b14      	ldr	r3, [pc, #80]	; (8009298 <_fflush_r+0x6c>)
 8009248:	429c      	cmp	r4, r3
 800924a:	d11b      	bne.n	8009284 <_fflush_r+0x58>
 800924c:	686c      	ldr	r4, [r5, #4]
 800924e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009252:	2b00      	cmp	r3, #0
 8009254:	d0ef      	beq.n	8009236 <_fflush_r+0xa>
 8009256:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009258:	07d0      	lsls	r0, r2, #31
 800925a:	d404      	bmi.n	8009266 <_fflush_r+0x3a>
 800925c:	0599      	lsls	r1, r3, #22
 800925e:	d402      	bmi.n	8009266 <_fflush_r+0x3a>
 8009260:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009262:	f000 f915 	bl	8009490 <__retarget_lock_acquire_recursive>
 8009266:	4628      	mov	r0, r5
 8009268:	4621      	mov	r1, r4
 800926a:	f7ff ff59 	bl	8009120 <__sflush_r>
 800926e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009270:	07da      	lsls	r2, r3, #31
 8009272:	4605      	mov	r5, r0
 8009274:	d4e0      	bmi.n	8009238 <_fflush_r+0xc>
 8009276:	89a3      	ldrh	r3, [r4, #12]
 8009278:	059b      	lsls	r3, r3, #22
 800927a:	d4dd      	bmi.n	8009238 <_fflush_r+0xc>
 800927c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800927e:	f000 f908 	bl	8009492 <__retarget_lock_release_recursive>
 8009282:	e7d9      	b.n	8009238 <_fflush_r+0xc>
 8009284:	4b05      	ldr	r3, [pc, #20]	; (800929c <_fflush_r+0x70>)
 8009286:	429c      	cmp	r4, r3
 8009288:	d101      	bne.n	800928e <_fflush_r+0x62>
 800928a:	68ac      	ldr	r4, [r5, #8]
 800928c:	e7df      	b.n	800924e <_fflush_r+0x22>
 800928e:	4b04      	ldr	r3, [pc, #16]	; (80092a0 <_fflush_r+0x74>)
 8009290:	429c      	cmp	r4, r3
 8009292:	bf08      	it	eq
 8009294:	68ec      	ldreq	r4, [r5, #12]
 8009296:	e7da      	b.n	800924e <_fflush_r+0x22>
 8009298:	08009b54 	.word	0x08009b54
 800929c:	08009b74 	.word	0x08009b74
 80092a0:	08009b34 	.word	0x08009b34

080092a4 <std>:
 80092a4:	2300      	movs	r3, #0
 80092a6:	b510      	push	{r4, lr}
 80092a8:	4604      	mov	r4, r0
 80092aa:	e9c0 3300 	strd	r3, r3, [r0]
 80092ae:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80092b2:	6083      	str	r3, [r0, #8]
 80092b4:	8181      	strh	r1, [r0, #12]
 80092b6:	6643      	str	r3, [r0, #100]	; 0x64
 80092b8:	81c2      	strh	r2, [r0, #14]
 80092ba:	6183      	str	r3, [r0, #24]
 80092bc:	4619      	mov	r1, r3
 80092be:	2208      	movs	r2, #8
 80092c0:	305c      	adds	r0, #92	; 0x5c
 80092c2:	f7fd fba7 	bl	8006a14 <memset>
 80092c6:	4b05      	ldr	r3, [pc, #20]	; (80092dc <std+0x38>)
 80092c8:	6263      	str	r3, [r4, #36]	; 0x24
 80092ca:	4b05      	ldr	r3, [pc, #20]	; (80092e0 <std+0x3c>)
 80092cc:	62a3      	str	r3, [r4, #40]	; 0x28
 80092ce:	4b05      	ldr	r3, [pc, #20]	; (80092e4 <std+0x40>)
 80092d0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80092d2:	4b05      	ldr	r3, [pc, #20]	; (80092e8 <std+0x44>)
 80092d4:	6224      	str	r4, [r4, #32]
 80092d6:	6323      	str	r3, [r4, #48]	; 0x30
 80092d8:	bd10      	pop	{r4, pc}
 80092da:	bf00      	nop
 80092dc:	080095f5 	.word	0x080095f5
 80092e0:	08009617 	.word	0x08009617
 80092e4:	0800964f 	.word	0x0800964f
 80092e8:	08009673 	.word	0x08009673

080092ec <_cleanup_r>:
 80092ec:	4901      	ldr	r1, [pc, #4]	; (80092f4 <_cleanup_r+0x8>)
 80092ee:	f000 b8af 	b.w	8009450 <_fwalk_reent>
 80092f2:	bf00      	nop
 80092f4:	0800922d 	.word	0x0800922d

080092f8 <__sfmoreglue>:
 80092f8:	b570      	push	{r4, r5, r6, lr}
 80092fa:	1e4a      	subs	r2, r1, #1
 80092fc:	2568      	movs	r5, #104	; 0x68
 80092fe:	4355      	muls	r5, r2
 8009300:	460e      	mov	r6, r1
 8009302:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009306:	f7ff fa87 	bl	8008818 <_malloc_r>
 800930a:	4604      	mov	r4, r0
 800930c:	b140      	cbz	r0, 8009320 <__sfmoreglue+0x28>
 800930e:	2100      	movs	r1, #0
 8009310:	e9c0 1600 	strd	r1, r6, [r0]
 8009314:	300c      	adds	r0, #12
 8009316:	60a0      	str	r0, [r4, #8]
 8009318:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800931c:	f7fd fb7a 	bl	8006a14 <memset>
 8009320:	4620      	mov	r0, r4
 8009322:	bd70      	pop	{r4, r5, r6, pc}

08009324 <__sfp_lock_acquire>:
 8009324:	4801      	ldr	r0, [pc, #4]	; (800932c <__sfp_lock_acquire+0x8>)
 8009326:	f000 b8b3 	b.w	8009490 <__retarget_lock_acquire_recursive>
 800932a:	bf00      	nop
 800932c:	20000454 	.word	0x20000454

08009330 <__sfp_lock_release>:
 8009330:	4801      	ldr	r0, [pc, #4]	; (8009338 <__sfp_lock_release+0x8>)
 8009332:	f000 b8ae 	b.w	8009492 <__retarget_lock_release_recursive>
 8009336:	bf00      	nop
 8009338:	20000454 	.word	0x20000454

0800933c <__sinit_lock_acquire>:
 800933c:	4801      	ldr	r0, [pc, #4]	; (8009344 <__sinit_lock_acquire+0x8>)
 800933e:	f000 b8a7 	b.w	8009490 <__retarget_lock_acquire_recursive>
 8009342:	bf00      	nop
 8009344:	2000044f 	.word	0x2000044f

08009348 <__sinit_lock_release>:
 8009348:	4801      	ldr	r0, [pc, #4]	; (8009350 <__sinit_lock_release+0x8>)
 800934a:	f000 b8a2 	b.w	8009492 <__retarget_lock_release_recursive>
 800934e:	bf00      	nop
 8009350:	2000044f 	.word	0x2000044f

08009354 <__sinit>:
 8009354:	b510      	push	{r4, lr}
 8009356:	4604      	mov	r4, r0
 8009358:	f7ff fff0 	bl	800933c <__sinit_lock_acquire>
 800935c:	69a3      	ldr	r3, [r4, #24]
 800935e:	b11b      	cbz	r3, 8009368 <__sinit+0x14>
 8009360:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009364:	f7ff bff0 	b.w	8009348 <__sinit_lock_release>
 8009368:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800936c:	6523      	str	r3, [r4, #80]	; 0x50
 800936e:	4b13      	ldr	r3, [pc, #76]	; (80093bc <__sinit+0x68>)
 8009370:	4a13      	ldr	r2, [pc, #76]	; (80093c0 <__sinit+0x6c>)
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	62a2      	str	r2, [r4, #40]	; 0x28
 8009376:	42a3      	cmp	r3, r4
 8009378:	bf04      	itt	eq
 800937a:	2301      	moveq	r3, #1
 800937c:	61a3      	streq	r3, [r4, #24]
 800937e:	4620      	mov	r0, r4
 8009380:	f000 f820 	bl	80093c4 <__sfp>
 8009384:	6060      	str	r0, [r4, #4]
 8009386:	4620      	mov	r0, r4
 8009388:	f000 f81c 	bl	80093c4 <__sfp>
 800938c:	60a0      	str	r0, [r4, #8]
 800938e:	4620      	mov	r0, r4
 8009390:	f000 f818 	bl	80093c4 <__sfp>
 8009394:	2200      	movs	r2, #0
 8009396:	60e0      	str	r0, [r4, #12]
 8009398:	2104      	movs	r1, #4
 800939a:	6860      	ldr	r0, [r4, #4]
 800939c:	f7ff ff82 	bl	80092a4 <std>
 80093a0:	68a0      	ldr	r0, [r4, #8]
 80093a2:	2201      	movs	r2, #1
 80093a4:	2109      	movs	r1, #9
 80093a6:	f7ff ff7d 	bl	80092a4 <std>
 80093aa:	68e0      	ldr	r0, [r4, #12]
 80093ac:	2202      	movs	r2, #2
 80093ae:	2112      	movs	r1, #18
 80093b0:	f7ff ff78 	bl	80092a4 <std>
 80093b4:	2301      	movs	r3, #1
 80093b6:	61a3      	str	r3, [r4, #24]
 80093b8:	e7d2      	b.n	8009360 <__sinit+0xc>
 80093ba:	bf00      	nop
 80093bc:	080097b4 	.word	0x080097b4
 80093c0:	080092ed 	.word	0x080092ed

080093c4 <__sfp>:
 80093c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80093c6:	4607      	mov	r7, r0
 80093c8:	f7ff ffac 	bl	8009324 <__sfp_lock_acquire>
 80093cc:	4b1e      	ldr	r3, [pc, #120]	; (8009448 <__sfp+0x84>)
 80093ce:	681e      	ldr	r6, [r3, #0]
 80093d0:	69b3      	ldr	r3, [r6, #24]
 80093d2:	b913      	cbnz	r3, 80093da <__sfp+0x16>
 80093d4:	4630      	mov	r0, r6
 80093d6:	f7ff ffbd 	bl	8009354 <__sinit>
 80093da:	3648      	adds	r6, #72	; 0x48
 80093dc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80093e0:	3b01      	subs	r3, #1
 80093e2:	d503      	bpl.n	80093ec <__sfp+0x28>
 80093e4:	6833      	ldr	r3, [r6, #0]
 80093e6:	b30b      	cbz	r3, 800942c <__sfp+0x68>
 80093e8:	6836      	ldr	r6, [r6, #0]
 80093ea:	e7f7      	b.n	80093dc <__sfp+0x18>
 80093ec:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80093f0:	b9d5      	cbnz	r5, 8009428 <__sfp+0x64>
 80093f2:	4b16      	ldr	r3, [pc, #88]	; (800944c <__sfp+0x88>)
 80093f4:	60e3      	str	r3, [r4, #12]
 80093f6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80093fa:	6665      	str	r5, [r4, #100]	; 0x64
 80093fc:	f000 f847 	bl	800948e <__retarget_lock_init_recursive>
 8009400:	f7ff ff96 	bl	8009330 <__sfp_lock_release>
 8009404:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009408:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800940c:	6025      	str	r5, [r4, #0]
 800940e:	61a5      	str	r5, [r4, #24]
 8009410:	2208      	movs	r2, #8
 8009412:	4629      	mov	r1, r5
 8009414:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009418:	f7fd fafc 	bl	8006a14 <memset>
 800941c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009420:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009424:	4620      	mov	r0, r4
 8009426:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009428:	3468      	adds	r4, #104	; 0x68
 800942a:	e7d9      	b.n	80093e0 <__sfp+0x1c>
 800942c:	2104      	movs	r1, #4
 800942e:	4638      	mov	r0, r7
 8009430:	f7ff ff62 	bl	80092f8 <__sfmoreglue>
 8009434:	4604      	mov	r4, r0
 8009436:	6030      	str	r0, [r6, #0]
 8009438:	2800      	cmp	r0, #0
 800943a:	d1d5      	bne.n	80093e8 <__sfp+0x24>
 800943c:	f7ff ff78 	bl	8009330 <__sfp_lock_release>
 8009440:	230c      	movs	r3, #12
 8009442:	603b      	str	r3, [r7, #0]
 8009444:	e7ee      	b.n	8009424 <__sfp+0x60>
 8009446:	bf00      	nop
 8009448:	080097b4 	.word	0x080097b4
 800944c:	ffff0001 	.word	0xffff0001

08009450 <_fwalk_reent>:
 8009450:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009454:	4606      	mov	r6, r0
 8009456:	4688      	mov	r8, r1
 8009458:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800945c:	2700      	movs	r7, #0
 800945e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009462:	f1b9 0901 	subs.w	r9, r9, #1
 8009466:	d505      	bpl.n	8009474 <_fwalk_reent+0x24>
 8009468:	6824      	ldr	r4, [r4, #0]
 800946a:	2c00      	cmp	r4, #0
 800946c:	d1f7      	bne.n	800945e <_fwalk_reent+0xe>
 800946e:	4638      	mov	r0, r7
 8009470:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009474:	89ab      	ldrh	r3, [r5, #12]
 8009476:	2b01      	cmp	r3, #1
 8009478:	d907      	bls.n	800948a <_fwalk_reent+0x3a>
 800947a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800947e:	3301      	adds	r3, #1
 8009480:	d003      	beq.n	800948a <_fwalk_reent+0x3a>
 8009482:	4629      	mov	r1, r5
 8009484:	4630      	mov	r0, r6
 8009486:	47c0      	blx	r8
 8009488:	4307      	orrs	r7, r0
 800948a:	3568      	adds	r5, #104	; 0x68
 800948c:	e7e9      	b.n	8009462 <_fwalk_reent+0x12>

0800948e <__retarget_lock_init_recursive>:
 800948e:	4770      	bx	lr

08009490 <__retarget_lock_acquire_recursive>:
 8009490:	4770      	bx	lr

08009492 <__retarget_lock_release_recursive>:
 8009492:	4770      	bx	lr

08009494 <__swhatbuf_r>:
 8009494:	b570      	push	{r4, r5, r6, lr}
 8009496:	460e      	mov	r6, r1
 8009498:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800949c:	2900      	cmp	r1, #0
 800949e:	b096      	sub	sp, #88	; 0x58
 80094a0:	4614      	mov	r4, r2
 80094a2:	461d      	mov	r5, r3
 80094a4:	da07      	bge.n	80094b6 <__swhatbuf_r+0x22>
 80094a6:	2300      	movs	r3, #0
 80094a8:	602b      	str	r3, [r5, #0]
 80094aa:	89b3      	ldrh	r3, [r6, #12]
 80094ac:	061a      	lsls	r2, r3, #24
 80094ae:	d410      	bmi.n	80094d2 <__swhatbuf_r+0x3e>
 80094b0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80094b4:	e00e      	b.n	80094d4 <__swhatbuf_r+0x40>
 80094b6:	466a      	mov	r2, sp
 80094b8:	f000 f902 	bl	80096c0 <_fstat_r>
 80094bc:	2800      	cmp	r0, #0
 80094be:	dbf2      	blt.n	80094a6 <__swhatbuf_r+0x12>
 80094c0:	9a01      	ldr	r2, [sp, #4]
 80094c2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80094c6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80094ca:	425a      	negs	r2, r3
 80094cc:	415a      	adcs	r2, r3
 80094ce:	602a      	str	r2, [r5, #0]
 80094d0:	e7ee      	b.n	80094b0 <__swhatbuf_r+0x1c>
 80094d2:	2340      	movs	r3, #64	; 0x40
 80094d4:	2000      	movs	r0, #0
 80094d6:	6023      	str	r3, [r4, #0]
 80094d8:	b016      	add	sp, #88	; 0x58
 80094da:	bd70      	pop	{r4, r5, r6, pc}

080094dc <__smakebuf_r>:
 80094dc:	898b      	ldrh	r3, [r1, #12]
 80094de:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80094e0:	079d      	lsls	r5, r3, #30
 80094e2:	4606      	mov	r6, r0
 80094e4:	460c      	mov	r4, r1
 80094e6:	d507      	bpl.n	80094f8 <__smakebuf_r+0x1c>
 80094e8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80094ec:	6023      	str	r3, [r4, #0]
 80094ee:	6123      	str	r3, [r4, #16]
 80094f0:	2301      	movs	r3, #1
 80094f2:	6163      	str	r3, [r4, #20]
 80094f4:	b002      	add	sp, #8
 80094f6:	bd70      	pop	{r4, r5, r6, pc}
 80094f8:	ab01      	add	r3, sp, #4
 80094fa:	466a      	mov	r2, sp
 80094fc:	f7ff ffca 	bl	8009494 <__swhatbuf_r>
 8009500:	9900      	ldr	r1, [sp, #0]
 8009502:	4605      	mov	r5, r0
 8009504:	4630      	mov	r0, r6
 8009506:	f7ff f987 	bl	8008818 <_malloc_r>
 800950a:	b948      	cbnz	r0, 8009520 <__smakebuf_r+0x44>
 800950c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009510:	059a      	lsls	r2, r3, #22
 8009512:	d4ef      	bmi.n	80094f4 <__smakebuf_r+0x18>
 8009514:	f023 0303 	bic.w	r3, r3, #3
 8009518:	f043 0302 	orr.w	r3, r3, #2
 800951c:	81a3      	strh	r3, [r4, #12]
 800951e:	e7e3      	b.n	80094e8 <__smakebuf_r+0xc>
 8009520:	4b0d      	ldr	r3, [pc, #52]	; (8009558 <__smakebuf_r+0x7c>)
 8009522:	62b3      	str	r3, [r6, #40]	; 0x28
 8009524:	89a3      	ldrh	r3, [r4, #12]
 8009526:	6020      	str	r0, [r4, #0]
 8009528:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800952c:	81a3      	strh	r3, [r4, #12]
 800952e:	9b00      	ldr	r3, [sp, #0]
 8009530:	6163      	str	r3, [r4, #20]
 8009532:	9b01      	ldr	r3, [sp, #4]
 8009534:	6120      	str	r0, [r4, #16]
 8009536:	b15b      	cbz	r3, 8009550 <__smakebuf_r+0x74>
 8009538:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800953c:	4630      	mov	r0, r6
 800953e:	f000 f8d1 	bl	80096e4 <_isatty_r>
 8009542:	b128      	cbz	r0, 8009550 <__smakebuf_r+0x74>
 8009544:	89a3      	ldrh	r3, [r4, #12]
 8009546:	f023 0303 	bic.w	r3, r3, #3
 800954a:	f043 0301 	orr.w	r3, r3, #1
 800954e:	81a3      	strh	r3, [r4, #12]
 8009550:	89a0      	ldrh	r0, [r4, #12]
 8009552:	4305      	orrs	r5, r0
 8009554:	81a5      	strh	r5, [r4, #12]
 8009556:	e7cd      	b.n	80094f4 <__smakebuf_r+0x18>
 8009558:	080092ed 	.word	0x080092ed

0800955c <_malloc_usable_size_r>:
 800955c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009560:	1f18      	subs	r0, r3, #4
 8009562:	2b00      	cmp	r3, #0
 8009564:	bfbc      	itt	lt
 8009566:	580b      	ldrlt	r3, [r1, r0]
 8009568:	18c0      	addlt	r0, r0, r3
 800956a:	4770      	bx	lr

0800956c <_raise_r>:
 800956c:	291f      	cmp	r1, #31
 800956e:	b538      	push	{r3, r4, r5, lr}
 8009570:	4604      	mov	r4, r0
 8009572:	460d      	mov	r5, r1
 8009574:	d904      	bls.n	8009580 <_raise_r+0x14>
 8009576:	2316      	movs	r3, #22
 8009578:	6003      	str	r3, [r0, #0]
 800957a:	f04f 30ff 	mov.w	r0, #4294967295
 800957e:	bd38      	pop	{r3, r4, r5, pc}
 8009580:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8009582:	b112      	cbz	r2, 800958a <_raise_r+0x1e>
 8009584:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009588:	b94b      	cbnz	r3, 800959e <_raise_r+0x32>
 800958a:	4620      	mov	r0, r4
 800958c:	f000 f830 	bl	80095f0 <_getpid_r>
 8009590:	462a      	mov	r2, r5
 8009592:	4601      	mov	r1, r0
 8009594:	4620      	mov	r0, r4
 8009596:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800959a:	f000 b817 	b.w	80095cc <_kill_r>
 800959e:	2b01      	cmp	r3, #1
 80095a0:	d00a      	beq.n	80095b8 <_raise_r+0x4c>
 80095a2:	1c59      	adds	r1, r3, #1
 80095a4:	d103      	bne.n	80095ae <_raise_r+0x42>
 80095a6:	2316      	movs	r3, #22
 80095a8:	6003      	str	r3, [r0, #0]
 80095aa:	2001      	movs	r0, #1
 80095ac:	e7e7      	b.n	800957e <_raise_r+0x12>
 80095ae:	2400      	movs	r4, #0
 80095b0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80095b4:	4628      	mov	r0, r5
 80095b6:	4798      	blx	r3
 80095b8:	2000      	movs	r0, #0
 80095ba:	e7e0      	b.n	800957e <_raise_r+0x12>

080095bc <raise>:
 80095bc:	4b02      	ldr	r3, [pc, #8]	; (80095c8 <raise+0xc>)
 80095be:	4601      	mov	r1, r0
 80095c0:	6818      	ldr	r0, [r3, #0]
 80095c2:	f7ff bfd3 	b.w	800956c <_raise_r>
 80095c6:	bf00      	nop
 80095c8:	20000028 	.word	0x20000028

080095cc <_kill_r>:
 80095cc:	b538      	push	{r3, r4, r5, lr}
 80095ce:	4d07      	ldr	r5, [pc, #28]	; (80095ec <_kill_r+0x20>)
 80095d0:	2300      	movs	r3, #0
 80095d2:	4604      	mov	r4, r0
 80095d4:	4608      	mov	r0, r1
 80095d6:	4611      	mov	r1, r2
 80095d8:	602b      	str	r3, [r5, #0]
 80095da:	f7f9 f857 	bl	800268c <_kill>
 80095de:	1c43      	adds	r3, r0, #1
 80095e0:	d102      	bne.n	80095e8 <_kill_r+0x1c>
 80095e2:	682b      	ldr	r3, [r5, #0]
 80095e4:	b103      	cbz	r3, 80095e8 <_kill_r+0x1c>
 80095e6:	6023      	str	r3, [r4, #0]
 80095e8:	bd38      	pop	{r3, r4, r5, pc}
 80095ea:	bf00      	nop
 80095ec:	20000448 	.word	0x20000448

080095f0 <_getpid_r>:
 80095f0:	f7f9 b844 	b.w	800267c <_getpid>

080095f4 <__sread>:
 80095f4:	b510      	push	{r4, lr}
 80095f6:	460c      	mov	r4, r1
 80095f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80095fc:	f000 f894 	bl	8009728 <_read_r>
 8009600:	2800      	cmp	r0, #0
 8009602:	bfab      	itete	ge
 8009604:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009606:	89a3      	ldrhlt	r3, [r4, #12]
 8009608:	181b      	addge	r3, r3, r0
 800960a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800960e:	bfac      	ite	ge
 8009610:	6563      	strge	r3, [r4, #84]	; 0x54
 8009612:	81a3      	strhlt	r3, [r4, #12]
 8009614:	bd10      	pop	{r4, pc}

08009616 <__swrite>:
 8009616:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800961a:	461f      	mov	r7, r3
 800961c:	898b      	ldrh	r3, [r1, #12]
 800961e:	05db      	lsls	r3, r3, #23
 8009620:	4605      	mov	r5, r0
 8009622:	460c      	mov	r4, r1
 8009624:	4616      	mov	r6, r2
 8009626:	d505      	bpl.n	8009634 <__swrite+0x1e>
 8009628:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800962c:	2302      	movs	r3, #2
 800962e:	2200      	movs	r2, #0
 8009630:	f000 f868 	bl	8009704 <_lseek_r>
 8009634:	89a3      	ldrh	r3, [r4, #12]
 8009636:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800963a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800963e:	81a3      	strh	r3, [r4, #12]
 8009640:	4632      	mov	r2, r6
 8009642:	463b      	mov	r3, r7
 8009644:	4628      	mov	r0, r5
 8009646:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800964a:	f000 b817 	b.w	800967c <_write_r>

0800964e <__sseek>:
 800964e:	b510      	push	{r4, lr}
 8009650:	460c      	mov	r4, r1
 8009652:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009656:	f000 f855 	bl	8009704 <_lseek_r>
 800965a:	1c43      	adds	r3, r0, #1
 800965c:	89a3      	ldrh	r3, [r4, #12]
 800965e:	bf15      	itete	ne
 8009660:	6560      	strne	r0, [r4, #84]	; 0x54
 8009662:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009666:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800966a:	81a3      	strheq	r3, [r4, #12]
 800966c:	bf18      	it	ne
 800966e:	81a3      	strhne	r3, [r4, #12]
 8009670:	bd10      	pop	{r4, pc}

08009672 <__sclose>:
 8009672:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009676:	f000 b813 	b.w	80096a0 <_close_r>
	...

0800967c <_write_r>:
 800967c:	b538      	push	{r3, r4, r5, lr}
 800967e:	4d07      	ldr	r5, [pc, #28]	; (800969c <_write_r+0x20>)
 8009680:	4604      	mov	r4, r0
 8009682:	4608      	mov	r0, r1
 8009684:	4611      	mov	r1, r2
 8009686:	2200      	movs	r2, #0
 8009688:	602a      	str	r2, [r5, #0]
 800968a:	461a      	mov	r2, r3
 800968c:	f7f9 f835 	bl	80026fa <_write>
 8009690:	1c43      	adds	r3, r0, #1
 8009692:	d102      	bne.n	800969a <_write_r+0x1e>
 8009694:	682b      	ldr	r3, [r5, #0]
 8009696:	b103      	cbz	r3, 800969a <_write_r+0x1e>
 8009698:	6023      	str	r3, [r4, #0]
 800969a:	bd38      	pop	{r3, r4, r5, pc}
 800969c:	20000448 	.word	0x20000448

080096a0 <_close_r>:
 80096a0:	b538      	push	{r3, r4, r5, lr}
 80096a2:	4d06      	ldr	r5, [pc, #24]	; (80096bc <_close_r+0x1c>)
 80096a4:	2300      	movs	r3, #0
 80096a6:	4604      	mov	r4, r0
 80096a8:	4608      	mov	r0, r1
 80096aa:	602b      	str	r3, [r5, #0]
 80096ac:	f7f9 f841 	bl	8002732 <_close>
 80096b0:	1c43      	adds	r3, r0, #1
 80096b2:	d102      	bne.n	80096ba <_close_r+0x1a>
 80096b4:	682b      	ldr	r3, [r5, #0]
 80096b6:	b103      	cbz	r3, 80096ba <_close_r+0x1a>
 80096b8:	6023      	str	r3, [r4, #0]
 80096ba:	bd38      	pop	{r3, r4, r5, pc}
 80096bc:	20000448 	.word	0x20000448

080096c0 <_fstat_r>:
 80096c0:	b538      	push	{r3, r4, r5, lr}
 80096c2:	4d07      	ldr	r5, [pc, #28]	; (80096e0 <_fstat_r+0x20>)
 80096c4:	2300      	movs	r3, #0
 80096c6:	4604      	mov	r4, r0
 80096c8:	4608      	mov	r0, r1
 80096ca:	4611      	mov	r1, r2
 80096cc:	602b      	str	r3, [r5, #0]
 80096ce:	f7f9 f83c 	bl	800274a <_fstat>
 80096d2:	1c43      	adds	r3, r0, #1
 80096d4:	d102      	bne.n	80096dc <_fstat_r+0x1c>
 80096d6:	682b      	ldr	r3, [r5, #0]
 80096d8:	b103      	cbz	r3, 80096dc <_fstat_r+0x1c>
 80096da:	6023      	str	r3, [r4, #0]
 80096dc:	bd38      	pop	{r3, r4, r5, pc}
 80096de:	bf00      	nop
 80096e0:	20000448 	.word	0x20000448

080096e4 <_isatty_r>:
 80096e4:	b538      	push	{r3, r4, r5, lr}
 80096e6:	4d06      	ldr	r5, [pc, #24]	; (8009700 <_isatty_r+0x1c>)
 80096e8:	2300      	movs	r3, #0
 80096ea:	4604      	mov	r4, r0
 80096ec:	4608      	mov	r0, r1
 80096ee:	602b      	str	r3, [r5, #0]
 80096f0:	f7f9 f83b 	bl	800276a <_isatty>
 80096f4:	1c43      	adds	r3, r0, #1
 80096f6:	d102      	bne.n	80096fe <_isatty_r+0x1a>
 80096f8:	682b      	ldr	r3, [r5, #0]
 80096fa:	b103      	cbz	r3, 80096fe <_isatty_r+0x1a>
 80096fc:	6023      	str	r3, [r4, #0]
 80096fe:	bd38      	pop	{r3, r4, r5, pc}
 8009700:	20000448 	.word	0x20000448

08009704 <_lseek_r>:
 8009704:	b538      	push	{r3, r4, r5, lr}
 8009706:	4d07      	ldr	r5, [pc, #28]	; (8009724 <_lseek_r+0x20>)
 8009708:	4604      	mov	r4, r0
 800970a:	4608      	mov	r0, r1
 800970c:	4611      	mov	r1, r2
 800970e:	2200      	movs	r2, #0
 8009710:	602a      	str	r2, [r5, #0]
 8009712:	461a      	mov	r2, r3
 8009714:	f7f9 f834 	bl	8002780 <_lseek>
 8009718:	1c43      	adds	r3, r0, #1
 800971a:	d102      	bne.n	8009722 <_lseek_r+0x1e>
 800971c:	682b      	ldr	r3, [r5, #0]
 800971e:	b103      	cbz	r3, 8009722 <_lseek_r+0x1e>
 8009720:	6023      	str	r3, [r4, #0]
 8009722:	bd38      	pop	{r3, r4, r5, pc}
 8009724:	20000448 	.word	0x20000448

08009728 <_read_r>:
 8009728:	b538      	push	{r3, r4, r5, lr}
 800972a:	4d07      	ldr	r5, [pc, #28]	; (8009748 <_read_r+0x20>)
 800972c:	4604      	mov	r4, r0
 800972e:	4608      	mov	r0, r1
 8009730:	4611      	mov	r1, r2
 8009732:	2200      	movs	r2, #0
 8009734:	602a      	str	r2, [r5, #0]
 8009736:	461a      	mov	r2, r3
 8009738:	f7f8 ffc2 	bl	80026c0 <_read>
 800973c:	1c43      	adds	r3, r0, #1
 800973e:	d102      	bne.n	8009746 <_read_r+0x1e>
 8009740:	682b      	ldr	r3, [r5, #0]
 8009742:	b103      	cbz	r3, 8009746 <_read_r+0x1e>
 8009744:	6023      	str	r3, [r4, #0]
 8009746:	bd38      	pop	{r3, r4, r5, pc}
 8009748:	20000448 	.word	0x20000448

0800974c <_init>:
 800974c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800974e:	bf00      	nop
 8009750:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009752:	bc08      	pop	{r3}
 8009754:	469e      	mov	lr, r3
 8009756:	4770      	bx	lr

08009758 <_fini>:
 8009758:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800975a:	bf00      	nop
 800975c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800975e:	bc08      	pop	{r3}
 8009760:	469e      	mov	lr, r3
 8009762:	4770      	bx	lr
